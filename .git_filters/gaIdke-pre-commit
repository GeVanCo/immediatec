#!/usr/bin/perl
########################################################################
#
# $Id: gaIdke-pre-commit 1.13 $
# $IdBlockFurtherExpansion$	# this file has descriptive $Id$ entries
#
#  Copyright Â© 2016 John E Wulff <immediatec@gmail.com>
#  SPDX-License-Identifier: MIT
#
# Filters and hooks to implement 'Automatic GIT $Id: Keyword Expansion'
#
# pre-commit:
#         Obtain the list of files currently being committed (staged)
#         and not modified since they were added to the index (dirty).
#         Back up each file and rewrite the file - scanning for $Id
#         lines.
#
#         Increment the last number in <ver> of any $Id: <path> <ver>
#         line in the file, which will be committed as modified.
#         <path> is obtained from a 'git diff --name-only --cached'
#         command, which is the list of files staged for commit.
#         If a file has been renamed, the new path is written in the
#         $Id: string.
#
#         Create a new version 1.1 for a line containing $Id$ to start
#         the process.
#
#         The above applies if the commit is executed in the master branch.
#         Special handling applies if the commit is executed in any other
#         branch (see gaIDke-README).
#
#         Finally append the path and modified version to .gitSmudgeList. This
#         list is stored for use by post-commit for a 'checkout' and 'smudge'
#         of modified files.  The information in .gitSmudgeList is also
#         used by 'prepare-commit-msg' to pre-format a list of $Id incremented
#         files as a tail for the commit message. This is not optional because
#         'smudge' uses this information in the log to find the right commit
#         for this version of the file.
#
#         If no valid $Id string is found, the backup of the file is restored
#         and that filename is not recorded in .gitSmudgeList. This
#         means that file will not be smudged in post-commit and because
#         it's modify date is not changed here or in post-commit, the file
#         will not trigger a subsequent 'make'. The operation is completely
#         transparent to GIT for this case.
#
#         Further $Id keyword expansion can be suppressed by placing the
#         string $IdBlockFurtherExpansion$ after an initial $Id keyword line,
#         which will be expanded and before any line containing $Id$ or
#         $Id: <path> <ver> $, which would otherwise be expanded. This is
#         only required for files like this one describing $Id features.
#
########################################################################

@modifyList = ();
$smudgeList = "";
@dirtyList = split " ", qx(git diff --name-only);
@dirtyHash{@dirtyList} = "1" x @dirtyList;	# populate %dirtyHash with number of entries in @dirtyList
$gBranch = qx(git rev-parse --abbrev-ref HEAD);	# current GIT branch
chomp $gBranch;

foreach $path (split " ", qx(git diff --name-only --cached)) {
    next if $dirtyHash{$path} or not -f $path;	# skip dirty or non-existing files - will be comitted without $Id increment
    qx(mv -f "$path" "$path.gaidke");
    open IN, "$path.gaidke" or die "Cannot open '$path.gaidke': $!";
    open OUT, ">$path" or die "Cannot create '$path': $!";
    if ($path =~ m/.*\/(.*)/) {
	$filename = $1;
    } else {
	$filename = $path;
    }
    $minorVersion = 0;
    $allowIdExpansion = 1;			# allow $Id expansion initially
    $branch = $gBranch;				# restore branch for each file
    while (<IN>) {
	if ($allowIdExpansion and m/\$Id/) {	# speed up scan by pre-selecting $Id lines
	    if (m/\$IdBlockFurtherExpansion\$/) {
		$allowIdExpansion = 0;		# block $Id expansion for texts describing this feature
	    }
	    elsif (m/\$Id:\s+([^\$\s]\S*)\s+([^\$\s]\S*)\s+[^\$]*\$/) {
		$mod = $filename ne $1 ? " <- $1" : "";
		@versions = split /\./, $2;
		$vCnt = scalar @versions;
		if ($vCnt == 1) {
		    unshift @versions, "";	# special case for imported single SVN version number
		    $vCnt = 2;
		}
		if ($vCnt and ($vCnt % 2) == 0) {	# elements must be in pairs - else ignore
		    if ($gBranch eq "master") {
			$branch = $versions[0];	# first major version identifies master branch
		    }
		    $numeric = 1;
		    $versionHead = "";
		    for ($i = 0; $i < $vCnt; $i += 2) {
			$versionHead .= "$versions[$i].";
			$minorVersion = $versions[$i+1];
			if ($minorVersion !~ m/^\d+$/) {
			    $numeric = 0;	# minor versions must be numeric - ignore this Id
			    last;
			}
			if ($branch ne $versions[$i]) {
			    $versionHead .= "$minorVersion.";
			} else {
			    last;		# stop when branch is found
			}
		    }
		    if ($numeric) {
			if ($i >= $vCnt) {
			    $versionHead .= "$branch.";
			    $minorVersion = 0;	# extend Id version with start of new branch
			}
			$minorVersion++;	# increment minor version
			s/\$Id:\s+([^\$\s]\S*)\s+([^\$\s]\S*)\s+[^\$]*\$/\$Id: $filename $versionHead$minorVersion \$/;
		    }
		}
	    }
	    elsif (m/\$Id\$/) {
		$mod = "";
		$versionHead = $gBranch eq "master"
			     ? "1."		# expand an initial master $Id$ entry
			     : "1.1.$branch.";	# expand an initial branch $Id$ entry
		$minorVersion = 1;
		s/\$Id\$/\$Id: $filename $versionHead$minorVersion \$/;
	    }
	}
	print OUT;
    }
    close OUT;
    close IN;
    if ($minorVersion) {
	push @modifyList, $path;		# file has been modified
	$smudgeList .= "$path $versionHead$minorVersion$mod\n"; # for prepare-commit-msg and post-commit
	qx(chmod --reference="$path.gaidke" "$path");
    } else {
	qx(mv -f "$path.gaidke" "$path");	# no change - restore original unmodified file
    }
}

if (@modifyList) {
    qx(git add @modifyList);			# some files have been modified - add them to git index
    open SMUDGE, ">.gitSmudgeList" or die "Cannot create '.gitSmudgeList': $!";
    print SMUDGE "$smudgeList";
    close SMUDGE;
}
