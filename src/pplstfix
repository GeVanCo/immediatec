#!/usr/bin/perl

#################################################################
#
#	Copyright (C) 2000-2012  John E. Wulff
#
#   You may distribute under the terms of either the GNU General Public
#   License or the Artistic License, as specified in the README file.
#
#   For more information about this program, or for information on how
#   to contact the author, see the README file
#
#	pplstfix
#   Fix iC listing, eliminating aliases and other discrepencies
#   which are soooo much easier in Perl than in C
#
#   Aliases appear in the listing because of one pass compiler
#   limitations. Aliases are completely eliminated from the
#   executable code, and should therefore not confuse readers
#   of the listings. This correction is now no longer necessary
#   as it was for V1.1, which corrected real naming errors, but
#   it is a neat feature, which is easy to maintain.
#
#   Author: John E. Wulff
#   V1.1:  02.01.01 Written in the car between Siegen and Eisingen
#   V1.4:  11.01.01 Major rewrite to handle new algorithm
#   V1.7:  14.08.02 Change in header line
#   V1.9:  12.12.03 Change IX0_0 etc to IX0.0 and _1 to 1 in C CODE
#   V1.10: 07.01.04 Be more precise - do not change QX0_0t to  QX0.0t
#		    Allow Alias of numbers (NCONST =)
#		    Change Alias in C CODE listing line
#   V1.11: 27.01.04 Re-format listing using longest identifier
#   V1.12: 07.03.04 format output spacing, even for variables not in
#		    NET TOPOLOGY list
#   V1.13: 22.12.04 Change Copyright to include 2005
#   V1.14: 02.03.05 Accept negative constansts
#   V1.15: 05.03.05 New algorithm to format individual logic expansions
#   V1.16: 28.09.05 More precise regular expressions - allow $ at start of name
#   V1.17: 10.01.06 Add -o option to specify an output file (Windows has trouble with >)
#   V1.18: 27.02.07 use '@' as function head marker rather then '$', which can be normal variable character
#   V1.19: 14.03.08 add 'e' to $FOPS and $LOPS;
#   V1.20: 25.06.08 Change Copyright to include 2008; email
#   V1.21: 21.08.09 Change Copyright to include 2009; no email
#   V1.22: 28.05.12 Accept TIMER1 type display mnemonic '!1' and extend it for backward references
#
#################################################################

use strict;

my $named = $0;
$named =~ s#.*[/\\]##;		# delete directory names in path
format STDERR =
Usage:	@<<<<<<< [-h][ -o out_file][ -l log_file] in_file ...
	$named
	-o out	produce output file (default: stdout)
	-l log	produce log file, usually 'pplstfix.log'
	-h	help, ouput this Usage text only
	called from immcc, icr or ict compiler to adjust listing output
$Id: pplstfix,v 1.23 2012/11/24 04:53:34 jw Exp $
.

use vars qw($opt_o $opt_l $opt_h);
use Getopt::Std;		# replace require "getopts.pl";
getopts('o:l:h');		# sets $opt_h if -h etc

if ($opt_h) {
    write STDERR; exit 0;	# -h, ouput Usage only
}

my (%inv);
%inv = ("~", " ", " ", "~");	# inversion symbols in listing

my $OPS  = qr"[-.+\"^&|%*#/>({=\][<:!@?ktwi]";	# DEBUG display of types from icc.h
my $FOPS = qr"[UA _EsrHVSRDIFGCTBWX:!e]";	# DEBUG display of ftypes from icc.h
my $LOPS = qr"[UA _EsrHVSRDIFGCTBWX:!e~?]";	# DEBUG display of ftypes or negation


open STDOUT, ">$opt_o" or die "Can't redirect stdout to '$opt_o': $!" if $opt_o;
open LOG, ">$opt_l" or die "Can't create '$opt_l': $!" if $opt_l;
while ($ARGV = shift @ARGV) {
    unless (open (IN, $ARGV)) {
	warn "can't open input $ARGV";
	next;
    }
    print LOG "##### $named $ARGV\n" if $opt_l;
    processFile();
    close(IN);
}
close LOG if $opt_l;

####################################################################
#
#	output a large logic block
#	outputLargeBlock($max1, $max2, $max3, $hashRef, \@largeBlock);
#
####################################################################

sub outputLargeBlock {
    my ($max1, $max2, $max3, $hashRef, $RlargeBlock) = @_;
    my ($pr, $w1, $w3, $w4, $w6, $w8, $w10, $w12, $arrayRef);
    if (defined $hashRef) {
	push @$RlargeBlock, $hashRef;		# save for sorting
    }
    if (@$RlargeBlock) {
	while (@$RlargeBlock) {
	    $hashRef = shift @$RlargeBlock;
	    if (ref($hashRef) eq 'HASH') {
		foreach my $targ (sort
		    {
			my ($at, $an, $bt, $bn);
			if ($a =~ /(.+)_(\d+)$/) {
			    ($at, $an) = ($1, $2);
			} else {
			    ($at, $an) = ($a, -1);
			}
			if ($b =~ /(.+)_(\d+)$/) {
			    ($bt, $bn) = ($1, $2);
			} else {
			    ($bt, $bn) = ($b, -1);
			}
			$at cmp $bt || $an <=> $bn;
		    }
		    keys %$hashRef) {
		    $arrayRef = $hashRef->{$targ};
		    while (@$arrayRef) {
			$pr = shift @$arrayRef;
			if (ref($pr) eq 'ARRAY') {
			    ($w1, $w3, $w4, $w6, $w8, $w10, $w12) = @$pr;
			    $pr = sprintf "%s\t%*s %6s  %*s %-2s      %*s %s",
				$w1, -$max1, $w3,
				$w4, -$max2, $w6,
				$w8, -$max3, $w10, $w12;
			}
			$pr =~ s/\s+$//;
			print "$pr\n";
			print LOG "$.:--$pr\n" if $opt_l;
		    }
		}
	    } else {
		print "$hashRef\n";		# 2nd and further lines
		print LOG "$.:==$hashRef\n" if $opt_l;
	    }
	}
    }
} # outputLargeBlock

####################################################################
#
#	process one file
#
####################################################################

sub processFile {
    my ($line, $name, $xlate, $type, $ftype, $inver, $tlen, %symbols, %lengths, %timer1);
    my ($empty, $removed, $count, $ar, $word, $wpos, $wlen, @array, $cFlag);
    my ($maxLength, $len, $blankLines, $target, $nodeName, $hashRef);
    my ($print, $max1, $max2, $max3, @largeBlock, @logicBlock);
    $maxLength = 7;			# one standard tab size - 1
    %symbols = ();
    %lengths = ();
    %timer1  = ();

    # Pass 1: scan file for ALIAS and TIMER1 definitions in NET TOPOLOGY

    while (<IN>) {
	if (/\bNET TOPOLOGY\b/) {
	    last;		# bypass iC listing and C CODE
	}
    }

    print LOG "##### Pass1 NET TOPOLOGY\n" if $opt_l;
    while (<IN>) {
	if (/\bNET STATISTICS\b/ or /^compiled by:/) {
	    last;
	}
	# allow alias of numbers (change jw 040112)
	########################################################################
	##	NET TOPOLOGY
	##
	##	QX1.7	|  X	 v5@
	##	i7_7	@   	 IX7.7<
	##	v5	@   	~v5_1#
	##	IX0.0	<   	 _f1_1|
	##	QB1	@  A	 i-
	##	QB1_0	+  W
	##	_f1_1	|  F	{ (3)	 i-	 QB1@		# }
	##	i	-  A	 QB1_0+
	##	t1m0	!1 !	 clk2_1|	 clk3_1|
	##	timSet1	@  !	 t1m0!1
	## There are no function definition variables with '@' in NET TOPOLOGY
	########################################################################
	if (/
		^\s{1,8}?
	    |
		([\w\$][\w.\$]* | -\d+)			# $1
		\s+
		(!1|$OPS)				# $2 possible TIMER1 !1
		\ \ ?					#   2 or 1 space
		($FOPS)					# $3
		(					# $4
		    \s
		    (					# $5
			([ <~])				# $6
			([\w\$][\w.\$]* | -\d+)		# $7
			(!1|$OPS) | [({})]\ \(\d+\)	# $8 possible TIMER1 !1
		    )
		)?
	    /xgo)
	{
	    if (defined $1) {
		$name  = $1;
		$type  = $2;				# (!1|$OPS)
		if ($type eq '!1') {
		    $timer1{$name} = 1;
		}
		if ($type eq '@') {
		    # NET TOPOLOGY line found eg:QB0_0	@  A	~QB0_1*
		    $line  = $.;
		    $ftype = $3;			# ($FOPS)
		    $inver = ($6 eq '~') ? 1 : 0;
		    $xlate = $7;
		    if ($4 and $name ne $xlate) {
			$symbols{$name} = [ $line, $xlate, $type, $ftype, $inver ];
		    } else {
			warn "*** $named $ARGV $.: ERROR ALIAS '$name' translates to itself '$xlate'\n";
			print LOG "$.:**$_\n" if $opt_l;
		    }
		    if ($8 eq '!1') {
			$timer1{$name} = 1;		# alias is also marked as TIMER1
		    }
		}
		if (($len = length $1) > $maxLength) {
		    $maxLength = $len;
		}
		if (exists $lengths{$name}) {
		    warn "*** $named $ARGV $.: ERROR '$name' occurs twice in NET TOPOLOGY\n";
		    print LOG "$.:**$_\n" if $opt_l;
		    $tlen = $lengths{$name};		# previous length
		} else {
		    $tlen = 7;				# standard length
		}
		if (defined $5 and ($len = length $5) > $tlen) {
		    $tlen = $len;
		}
		$lengths{$name} = $tlen;
		print LOG "$.:	$1	$2 $3 $6 $7 $8\n" if $opt_l;
	    }
	    while (/\G
		    \s+
		    (					# $1
			[ <~]
			([\w\$][\w.\$]* | -\d+)		# $2
			$OPS				# only first target can be TIMER1
		    )
		/xgo)
	    {
		if (($len = length $1) > $tlen) {
		    $tlen = $len;
		    $lengths{$name} = $tlen;
		}
	    }
	}
    }

    # terminate at NET STATISTICS

    # Pass 2: resolve ALIAS occurences - format the output

    print LOG "##### Pass2\n" if $opt_l;
    seek(IN, 0, 0);
    $. = 0;
    @array = ();
    @logicBlock = ();
    @largeBlock = ();
    $max1 = $max2 = $max3 = 7;
    $blankLines = 2;					# starts new set of hashes;
    undef $hashRef;					# throw away the hash
    $nodeName = '!';					# name differs from '' for if switch
    $empty = 0;
    $removed = 0;
    $cFlag = 0;						# iC LISTING
  Line:
    while (<IN>) {
	chomp;
	unless ($cFlag == 4 or				# first listing complete
	    /^\*\*\* / or				# or '*** Error' or Warning line
	    ($cFlag == 0 and /^[a-z>]/)) {		# or logic generation line
	    if ($empty and /^$/) {
		$empty = 0;
		next Line;
	    }
	    if (/^([\d*])/ and $cFlag < 2) {		# 001 listing or separator
		my $s1 = $1;
		outputLargeBlock($max1, $max2, $max3, $hashRef, \@largeBlock);
		$max1 = $max2 = $max3 = 7;
		$blankLines = 2;			# starts new set of hashes;
		undef $hashRef;				# throw away the hash
		@largeBlock = ();
		$nodeName = '!';			# name differs from '' for if switch
		if (/\bC CODE\b/) {
		    $cFlag = 1;				# change ALIAS's in C CODE listing lines
		}
		elsif (/\bNET TOPOLOGY\b/) {
		    $cFlag = 2;
		}
		elsif ($s1 eq '*' or $cFlag == 1) {
		    s/\b([IQT]X\d+)_(\d+(_\d+)?)\b/$1.$2/g;
		    s/\b__(\d+)\b/-$1/g;
		    s/\b_(\d+)\b/$1/g;
		    goto cCode if $cFlag == 1;
		}
	    }
	    elsif ($cFlag > 0 and $cFlag < 3 or not /^[^\s\@]/) {	# just output debug & 02 lines
		if (/\bNET STATISTICS\b/) {		# do not change text
		    $cFlag = 3;
		}
	      cCode:
		if ($cFlag == 0) {
		    while (/				# listing line
			    ([\w\$][\w.@\$]* | -\d+)	# $1
			/xg)
		    {
			if (defined($symbols{$1})) {
			    push @array, $1, pos($_), length $1;# $word, $wpos and $wlen
			}
			print LOG "$.:	$1\n" if $opt_l;
		    }
		} else {
		    while (/				# non listing line or C CODE
			    ([\w\$][\w.\$]* | -\d+)	# $1
			/xg)
		    {
			if (defined($symbols{$1})) {
			    push @array, $1, pos($_), length $1;# $word, $wpos and $wlen
			}
			print LOG "$.:	$1\n" if $opt_l;
		    }
		}
	      Array:
		while (@array) {
		    # start with the last word found, so positions are correct
		    ($word, $wpos, $wlen) = splice @array, -3;
		    $xlate = $word;				# xlation of word
		    $inver = 0;
		    while (defined($ar = $symbols{$xlate})) {	# allow multiple xlate
			$line  = $ar->[0];
			if (/---@/ or $line == $.) {	# $line finds topology definition
			    ########################################################################
			    # do not translate ALIAS definitions - delete @ Q.._0
			    ########################################################################
			    @array = ();
			    if ($word !~ /Q.*_0/ or /^\$/) {	# keep $x lines (never occurs ???)
				last Array;			# $inver has not been inverted
			    } elsif (/^\t/) {
				$empty = 1;			# delete ALIAS definition
			    } else {
				$removed++;			# reduce ALIAS count
			    }
			    next Line;
			}
			$xlate = $ar->[1];
			if ($ar->[3] eq ' ') {			# ftype is GATE
			    $inver ^= $ar->[4];			# invert
			}
			print LOG "$.:	$word ==> $xlate ($inver)\n" if $opt_l;
		    }
		    substr($_, $wpos - $wlen, $wlen) = $xlate if $xlate ne $word;
		    if ($cFlag == 2 and $inver) {		# in topology line swap ' ' and '~'
			substr($_, $wpos - $wlen - 1, 1) = $inv{substr($_, $wpos -$wlen - 1, 1)};
			$inver = 0;
		    }
		}
		if ($cFlag != 2 and $inver) {			# for first word in listing line
		    s/([ ~]) ---/$inv{$1} ---/;			# swap ' ' and '~'
		    $inver = 0;
		}
		if ($cFlag == 0) {
		    print LOG "$.: /$_/\n" if $opt_l;		# iC logic line
		    if (/
			^
			(@\d+\ =)?				# $1
			\s{1,8}?
			(					# $2
			    ([\w\$(][\w.@\$)]* | -\d+)?		# $3
			    \s+
			    ($LOPS.---$OPS)			# $4 possible TIMER1 !1
			)?
			(					# $5
			    (\s{1,2}				# $6
				([\w\$][\w.@\$]* | -\d+)	# $7
			    )
			    (\s+				# $8
				(!1|$FOPS)			# $9 possible TIMER1 !1
			    )?
			)?
			(\s+					# $10
			    ([^\s]*)				# $11
			)?
			(\s*					# $12
			    (\/\/\s+.*)				# $13
			)?
			$
			/xo)
		    {
			$name  = $3;
			$type  = $4;				# '!1---&' possible
			$ftype = $9;				# '!1' possible
			if (($len = length $3) > $max1) {
			    $max1 = $len;
			}
			if (($len = length $7) > $max2) {
			    $max2 = $len;
			}
			if (($len = length $11) > $max3) {
			    $max3 = $len;
			}
			print LOG "$.:$1..$3\[$max1\]$4..$7\[$max2\]$9..$11\[$max3\]..$13\n" if $opt_l;
			if ($blankLines > 0) {
			    $target = defined $7 ? $7 : '';	# target node name
			    if ($nodeName ne $target) {
				$nodeName = $target;
			    } else {
				warn "*** $named $ARGV $.: ERROR '$target' occurs twice\n";
				print LOG "$.:**$_\n" if $opt_l;
				@logicBlock = @{$hashRef->{$target}}; # continue to fill same array
			    }
			}
			if (defined $timer1{$name}) {
			    if (substr($type, 0, 1) ne '!') {
				warn "*** $named $ARGV $.: ERROR '$name' has no '!' although TIMER1\n";
				print LOG "$.:**$_\n" if $opt_l;
			    }
			    substr($type, 0, 2) = '!1';		# avoid regex to keep $1 - $13
			}
			if (defined $7 and defined $timer1{$target}) {
			    if (substr($ftype, 0, 1) ne '!') {
				warn "*** $named $ARGV $.: ERROR '$target' has no '!' although TIMER1\n";
				print LOG "$.:**$_\n" if $opt_l;
			    }
			    $ftype = '!1';
			}
			push @logicBlock, [$1, $3, $type, $7, $ftype, $11, $13];
			$blankLines = 0;
		    } else {
			if ($blankLines++) {
			    if (defined $hashRef) {
				print LOG "$.:#2 '$nodeName'\n" if $opt_l;
				push @largeBlock, $hashRef;	# save for sorting later
				undef $hashRef;			# throw away the hash
				$nodeName = '!';
			    }
			    push @largeBlock, $_;		# 2nd and further blank line
			} else {
			    print LOG "$.:#1 '$nodeName'\n" if $opt_l;
			    push @logicBlock, $_;		# 1st blank line at end of @logicBlock
			    $hashRef->{$nodeName} =  [ @logicBlock ];
			    @logicBlock = ();
			}
			print LOG "$.:>>$_\n" if $opt_l and not /^$/;	# missed a text line
		    }
		    next Line;
		}
		########################################################################
		##	NET TOPOLOGY
		##
		##	QX1.7	|  X	 v5@
		##	i7_7	@   	 IX7.7<
		##	v5	@   	~v5_1#
		##	IX0.0	<   	 _f1_1|
		##	QB1	@  A	 i-
		##	QB1_0	+  W
		##	_f1_1	|  F	{ (3)	 i-	 QB1@		# }
		##	i	-  A	 QB1_0+
		##	t1m0	!1 !	 clk2_1|	 clk3_1|
		##	timSet1	@  !	 t1m0!1
		## There are no function definition variables with '@' in NET TOPOLOGY
		########################################################################
		if ($cFlag == 2) {
		    if (/
			    ^\s{1,8}?
			|
			    ([\w\$][\w.\$]* | -\d+)		# $1
			    \s+
			    (!1|$OPS)				# $2 possible TIMER1 !1
			    \ \ ?				#   2 or 1 space
			    ($FOPS)				# $3
			    (					# $4
				\s
				(				# $5
				    ([ <~])			# $6
				    ([\w\$][\w.\$]* | -\d+)	# $7
				    (!1|$OPS) | [({})]\ \(\d+\)	# $8 possible TIMER1 !1
				)
			    )?
			/xgo)
		    {
			if (defined $1) {
			    $tlen = $lengths{$1};
			    $print = sprintf "%*s %-2s %1s %*s",
				-$maxLength, $1, $2, $3, -$tlen, $5;
			} else {
			    $print = ' ' x ($maxLength + 5);
			}
			while (/\G
				\s+
				(				# $1
				    [ <~]
				    ([\w\$][\w.\$]* | -\d+)	# $2
				    $OPS			# only first target can be TIMER1
				)
			    /xgo)
			{
			    $print .= sprintf " %*s", -$tlen, $1;
			}
			$_ = $print;
		    }
		}
	    }
	    if (/^ALIAS\t@ +(\d+)$/) {
		if (($count = $1 - $removed) > 0) {
		    s/\d+/$count/;
		} else {
		    next Line;
		}
	    }
	    s/\s+$//;
	    if (/^compiled by:/) {				# do not change text
		$cFlag = 4;
	    }
	}
	print "$_\n";
	print LOG "$.:__$_\n" if $opt_l;
    }
    if ($cFlag == 0) {
	outputLargeBlock($max1, $max2, $max3, $hashRef, \@largeBlock);	# listing terminated prematurely
    }
} # processFile
