/********************************************************************
 *
 *	barb.ica - vertical bar demo
 *
 *	with arrays to get variable length counters
 *		    and multiple instances
 *
 *	QX0 outputs the value of a shift register made up of SR flip
 *	flops m0 to m7. These are clocked by an internally generated
 *	clock c0. It looks like running lights when displayed.
 *
 *	By changing the input IB1 the clocking speed on m0 to m7,
 *	which is output on QX0.0 to QX0.7 is set to IB1 * 50 ms.
 *	A value of 0 on input IB1 lets you clock the running
 *	lights manually via input IX0.0
 *
 *	Output QX2.0 indicates the direction of the running
 *	lights on QmX0 - just to show a bit of internal logic.
 *
 *******************************************************************/

use strict;
%define LAST 8		/* counters 0 ... LAST */
%define INST 4		/* number of instances */
%define F ((LAST/8+1)*8)

imm timer t = TIMER(TX0.4);
  FOR (int I = 0; I < INST; I++) {{

imm int d[I] = IB[(I*F+LAST)/8];			// IB[(I*F+LAST)/8] =
imm bit f[I] = IB[(I*F+LAST)/8];			// d[I]  =

imm bit b[I] = D(~b[I] & f[I], t, d[I]) | CHANGE(IX0.0 & ~f[I]);
imm clock c[I] = CLOCK(b[I]);

    FOR (int J = I*F; J <= I*F+LAST; J++) {{
imm bit m[J];
    }}

m[I*F+0] = SR(~m[I*F+LAST]     , m[I*F+LAST] & ~m[I*F+1], c[I]);
    FOR (int J = I*F+1; J <= I*F+LAST-2; J++) {{
m[J] = SR(~m[I*F+LAST] & m[J-1], m[I*F+LAST] & ~m[J+1], c[I]);
    }}
m[I*F+LAST-1] = SR(~m[I*F+LAST] & m[I*F+LAST-2], m[I*F+LAST]      , c[I]);
m[I*F+LAST] = SR(~m[I*F+LAST] & m[I*F+LAST-1], m[I*F+LAST] & ~m[I*F+0], c[I]);

    FOR (int J = I*F; J <= I*F+LAST; J++) {{
QX[J/8].[J%8] = m[J];
    }}
  }}
