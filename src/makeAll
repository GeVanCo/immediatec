#!/bin/bash

########################################################################
#
#	Copyright (C) 2000-2009  John E. Wulff
#
#   You may distribute under the terms of either the GNU General Public
#   License or the Artistic License, as specified in the README file.
#
#   For more information about this program, or for information on how
#   to contact the author, see the README file
#
#	make immcc libict.a and libict.so by default
#
#	make immcc, libict.a, icr, ict or lmain individually with
#	-C -L -R -T or -M flags
#	when any of these are set, cexe.c is not modified
#
#	use egrep rather than grep -E so it works on older Unix systems
#
########################################################################

usage ()
{
    echo 'Usage:' >&2
    echo " ${0##*/} [-qgclrtmCLRTMuedsyzh][ -D<OPT>][ -W<OPT>][ -o<OBJ>]" >&2
    echo '    call make for immcc, libict.a, icr, ict and lmain with correct options' >&2
    echo '	-q	output only headings and error messages' >&2
    echo '	-g	compile for debugging and no optimisation (default -O2)' >&2
    echo '	-c	make immcc iC compiler with YYDEBUG' >&2
    echo '	-l	make libict.a with YYDEBUG -t trace output possible' >&2
    echo '		     libict.so is made without YYDEBUG' >&2
    echo '	-r	make icr iC compiler with YYDEBUG -t trace output possible' >&2
    echo '	-t	make ict iC compiler with YYDEBUG -t trace output possible' >&2
    echo '	-m	make lmain test internal C compiler with YYDEBUG' >&2
    echo '	-C	make immcc only; generate an empty cexe.c' >&2
    echo '	-L	make libict.a and libict.so' >&2
    echo '	-R	make icr only without modifying cexe.c' >&2
    echo '	-T	make ict only without modifying cexe.c' >&2
    echo '	-M	make lmain only' >&2
    echo '	-D<OPT>	make all targets with <OPT> defined' >&2
    echo '	see usage of immcc, icr, ict and applications for options' >&2
    echo '	-W<OPT>	compile all C sources with -W<OPT> (useful for -Wall)' >&2
    echo '	-u	make any compiler targets with Symbol SYUNION option' >&2
    echo '	-e	make all targets with EFENCE option and link with -lefence' >&2
    echo '	-d	make with DEQ - double ended queues are slightly faster' >&2
    echo '	-s	make with INT_MAX=32767' >&2
    echo '		(on a 16 bit system INT_MAX is 32767 and -s is not required)' >&2
    echo '		simulates compilation for a 16 bit system, which does' >&2
    echo '		no 32 bit arithmetic and rejects QL.. and IL.. I/O unless' >&2
    echo '	-y	make with LONG16' >&2
    echo '		produces code for long int arithmetic on a 16 bit system' >&2
    echo '	-o<OBJ>	define object extension (o is default; obj for Windows)' >&2
    echo '	-z	echo compiler calls with all options for debugging (not -q)' >&2
    echo '	-h	this help text' >&2
    echo '	NOTE: if any option is changed, make clean is automatically executed' >&2
    echo '	$Id: makeAll,v 1.31 2010/12/14 07:05:06 jw Exp $' >&2
}

makeLib ()
{
    mv load.$O misc.$O scid.$O ict.$O icbegin.$O icend.$O tcpc.$O  link.$O rsff.$O scan.$O Make_tmp 2> /dev/null
    if [ -d LibObjs ]; then
	mv LibObjs/* .
    else
	mkdir LibObjs
    fi
    make OPT="-DLOAD -DTCP$l$d$e$o$s$y" CFLAGS="$cflags" libict.a
    mv load.$O misc.$O scid.$O ict.$O icbegin.$O icend.$O tcpc.$O  link.$O rsff.$O scan.$O LibObjs
    mv Make_tmp/* . 2> /dev/null
}

makeShared ()
{
    mv load.$O misc.$O scid.$O ict.$O icbegin.$O icend.$O tcpc.$O  link.$O rsff.$O scan.$O Make_tmp 2> /dev/null
    if [ -d SharedObjs ]; then
	mv SharedObjs/* .
    else
	mkdir SharedObjs
    fi
    make OPT="-fPIC -DLOAD -DTCP$d$e$o$s$y" CFLAGS="-O2$W" libict.so
    mv load.$O misc.$O scid.$O ict.$O icbegin.$O icend.$O tcpc.$O  link.$O rsff.$O scan.$O SharedObjs
    mv Make_tmp/* . 2> /dev/null
}

makeIcr ()
{
    mv comp.$O genr.$O gram.$O icr.$O misc.$O init.$O lexc.$O link.$O icc.$O outp.$O rsff.$O scan.$O symb.$O Make_tmp 2> /dev/null
    if [ -d IcrObjs ]; then
	mv IcrObjs/* .
    else
	mkdir IcrObjs
    fi
    make OPT="-DRUN$r$u$d$e$o$s$y" CFLAGS="$cflags" icr
    mv comp.$O genr.$O gram.$O icr.$O misc.$O init.$O lexc.$O link.$O icc.$O outp.$O rsff.$O scan.$O symb.$O IcrObjs
    mv Make_tmp/* . 2> /dev/null
}

makeIct ()
{
    mv comp.$O genr.$O gram.$O ict.$O misc.$O init.$O lexc.$O link.$O icc.$O outp.$O rsff.$O scan.$O symb.$O tcpc.$O Make_tmp 2> /dev/null
    if [ -d IctObjs ]; then
	mv IctObjs/* .
    else
	mkdir IctObjs
    fi
    make OPT="-DTCP$t$u$d$e$o$s$y" CFLAGS="$cflags" ict
    mv comp.$O genr.$O gram.$O ict.$O misc.$O init.$O lexc.$O link.$O icc.$O outp.$O rsff.$O scan.$O symb.$O tcpc.$O IctObjs
    mv Make_tmp/* . 2> /dev/null
}

makeLmain ()
{
    mv misc.$O gram.$O lexc.$O symb.$O Make_tmp 2> /dev/null
    if [ -d LmainObjs ]; then
	mv LmainObjs/* .
    else
	mkdir LmainObjs
    fi
    make OPT="-DLMAIN$m$u$d$e$o$s$y" CFLAGS="$cflags" lmain
    mv misc.$O gram.$O lexc.$O symb.$O LmainObjs
    mv Make_tmp/* . 2> /dev/null
}

q=""
c=""
l=""
r=""
t=""
m=""
u=""
d=""
e=""
s=""
y=""
C=0
L=0
R=0
T=0
M=0
IM_LIB=1
cflags="-O2"			# optimisation, no debugging info
O="o"
o=""
w=""
z=0
YN=0
Y=""

while getopts ":qgclrtmCLRTMudeD:W:syo:zh" opt; do
    case $opt in
    q )	q="q";;		# echo only - dont kill
    g )	cflags="-g";;	# debugging, no optimisation
    c )	C=1; IM_LIB=0; c="-DYYDEBUG"; YN=$(($YN|1));;
    l )	L=1; IM_LIB=0; l=" -DYYDEBUG"; YN=$(($YN|2));;
    r )	R=1; IM_LIB=0; r=" -DYYDEBUG";;
    t )	T=1; IM_LIB=0; t=" -DYYDEBUG";;
    m )	M=1; IM_LIB=0; m=" -DYYDEBUG";;
    C )	C=1; IM_LIB=0;;
    L )	L=1; IM_LIB=0;;
    R )	R=1; IM_LIB=0;;
    T )	T=1; IM_LIB=0;;
    M )	M=1; IM_LIB=0;;
    u )	u=" -DSYUNION";;
    d )	d=" -DDEQ";;
    e )	e=" -DEFENCE";;
    D ) o=" -D$OPTARG";;
    W ) W=" -W$OPTARG";;
    s )	s=" -DINT_MAX=32767";;
    y )	y=" -DLONG16";;
    o ) O="$OPTARG";;
    z )	z=1; q="";;
    h )	usage; exit 255;;
    \?)	echo "$name: illegal option '-$OPTARG'"; usage; exit 127;;
    esac
done
cflags="$cflags$W";
shift $(($OPTIND - 1))

if [ -f Make_tmp ]; then
    echo 'Error makeAll: Make_tmp exists as file ??? - nothing made' >&2
    exit 1;
fi
test -d Make_tmp || mkdir Make_tmp;

if [ $YN -ne 0 ]; then
    Y=" -DYYDEBUG=$YN"
fi
if ! perl icg.pl $Y$u$d$e$o$s$y icc.h | cmp -s - icg.h; then
    echo "Options changed to '$Y$u$d$e$o$s$y'"
    if [ $z -eq 1 ]; then	# $u SYSUNION only to make clean if it changes
	echo "make clean; perl icg.pl $Y$u$d$e$o$s$y icc.h > icg.h" >&2
    fi
    make clean 2>&1 | if [ -n "$q" ]; then egrep -i "(\berror|warning|unrecognized|up to date|:[A-Z_a-z. 0-9]+:)"; else cat; fi
    perl icg.pl $Y$u$d$e$o$s$y icc.h > icg.h
fi

if [ $IM_LIB = 1 ] || [ $C = 1 ]; then
    echo "make OPT=\"$c$u$d$e$o$s$y\" CFLAGS=\"$cflags\" immcc"
    make OPT="$c$u$d$e$o$s$y" CFLAGS="$cflags" immcc 2>&1 | if [ -n "$q" ]; then egrep -i "(\berror|warning|unrecognized|up to date|:[A-Z_a-z. 0-9]+:)"; else cat; fi
fi

if [ $IM_LIB = 1 ] || [ $L = 1 ]; then
    echo "make OPT=\"-DLOAD -DTCP$l$d$e$o$s$y\" CFLAGS=\"$cflags\" libict.a"
    makeLib  2>&1 | if [ -n "$q" ]; then egrep -i "(\berror|warning|unrecognized|up to date|:[A-Z_a-z. 0-9]+:)"; else cat; fi
    echo "make OPT=\"-fPIC -DLOAD -DTCP$d$e$o$s$y\" CFLAGS=\"-O2$W\" libict.so"
    makeShared  2>&1 | if [ -n "$q" ]; then egrep -i "(\berror|warning|unrecognized|up to date|:[A-Z_a-z. 0-9]+:)"; else cat; fi
fi

if [ $R = 1 ]; then
    echo "make OPT=\"-DRUN$r$u$d$e$o$s$y\" CFLAGS=\"$cflags\" icr"
    makeIcr  2>&1 | if [ -n "$q" ]; then egrep -i "(\berror|warning|unrecognized|up to date|:[A-Z_a-z. 0-9]+:)"; else cat; fi
fi

if [ $T = 1 ]; then
    echo "make OPT=\"-DTCP$t$u$d$e$o$s$y\" CFLAGS=\"$cflags\" ict"
    makeIct  2>&1 | if [ -n "$q" ]; then egrep -i "(\berror|warning|unrecognized|up to date|:[A-Z_a-z. 0-9]+:)"; else cat; fi
fi

if [ $M = 1 ]; then
    echo "make OPT=\"-DLMAIN$m$u$d$e$o$s$y\" CFLAGS=\"$cflags\" lmain"
    makeLmain  2>&1 | if [ -n "$q" ]; then egrep -i "(\berror|warning|unrecognized|up to date|:[A-Z_a-z. 0-9]+:)"; else cat; fi
fi

rmdir Make_tmp
exit 0

############ POD to generate man page ##################################

=head1 NAME

 makeAll - supports Makefile in immcc develeopment

=head1 SYNOPSIS

 makeAll [-qgclrtmCLRTMuedsyzh][ -D<OPT>][ -W<OPT>][ -o<OBJ>]
 call make for immcc, libict.a, icr, ict and lmain with correct options
    -q      output only headings and error messages
    -g      compile for debugging and no optimisation (default -O2)
    -c      make immcc iC compiler with YYDEBUG
    -l      make libict.a with YYDEBUG -t trace output possible
    -r      make icr iC compiler with YYDEBUG -t trace output possible
    -t      make ict iC compiler with YYDEBUG -t trace output possible
    -m      make lmain test internal C compiler with YYDEBUG
    -C      make immcc only; generate an empty cexe.c
    -L      make libict.a only
    -R      make icr only without modifying cexe.c
    -T      make ict only without modifying cexe.c
    -M      make lmain only
    -D<OPT> make all targets with <OPT> defined
            see usage of immcc, icr, ict and applications for options
    -W<OPT> compile all C sources with -W<OPT> (useful for -Wall)
    -u      make any compiler targets with Symbol SYUNION option
    -e      make all targets with EFENCE option and link with -lefence
    -d      make with DEQ - double ended queues are slightly faster
    -s      make with INT_MAX=32767
            (on a 16 bit system INT_MAX is 32767 and -s is not required)
            simulates compilation for a 16 bit system, which does
            no 32 bit arithmetic and rejects QL.. and IL.. I/O unless
    -y      make with LONG16
            produces code for long int arithmetic on a 16 bit system
    -o<OBJ> define object extension (o is default; obj for Windows)
    -z      echo compiler calls with all options for debugging (not -q)
    -h      this help text
    NOTE: if any option is changed, make clean is automatically executed

=head1 DESCRIPTION

makeAll is a shell script to support the Makefile to build various
versions of the immcc compiler. Normally only the 'immcc' compiler and
'libict.a' are required for production systems.

'icr' is an early version of the compiler which builds its run-time
structures in memory and interprets these directly after compilation. I/O
is via the terminal and very limited. It was very useful in the early
part of development and will not be developed further.

'ict' is another version of the compiler which builds its run-time
structures in memory and interprets these directly after compilation. I/O
is via TCP/IP and iCserver.

'lmain' is a standalone check for the integrated C-compiler implemented
with gram.y and lexc.l. It test compiles C sources and generates debugging
output and possibly error messages.

'makeAll' keeps the directories 'LibObjs' 'SharedObjs' 'IcrObjs'
'IctObjs' 'LmainObjs' to save object files which differ for the
different targets.  Thus the following rules for 'make' are satisfied:

  to make immcc, make with OPT=''
  to make libict.a, remove all objects and make with OPT='-DLOAD -DTCP'
  to make libict.so,  "     "    " and make with OPT='-fPIC -DLOAD -DTCP'
  to make icr,        "     "    " and make with OPT='-DRUN -DYYDEBUG'
  to make ict,        "     "    " and make with OPT='-DTCP'
  to make lmain,      "     "    " and make with OPT='-DLMAIN -DYYDEBUG'

    makeAll       # makes 'immcc' 'libict.a' and 'libict.so'
                  # without YYDEBUG support
    makeAll -trm; # makes the auxiliary compilers with YYDEBUG support

another useful call is:

    makeAll -qgcrtlm;

which makes all quietly with debugging and YYDEBUG support

=head1 AUTHOR

John E. Wulff

=head1 BUGS

Email bug reports to B<immediateC@gmail.com> with S<L<iC Project>> in
the subject field.

=head1 SEE ALSO

L<immcc(1)>, L<iCserver(1)>

=head1 COPYRIGHT

COPYRIGHT (C) 2000-2009  John E. Wulff

You may distribute under the terms of either the GNU General Public
License or the Artistic License, as specified in the README file.

For more information about this program, or for information on how
to contact the author, see the README file.
