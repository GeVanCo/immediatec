#!/bin/sh
########################################################################
#
#	Copyright (C) 2000-2001  John E. Wulff
#
#   You may distribute under the terms of either the GNU General Public
#   License or the Artistic License, as specified in the README file.
#
#   For more information about this program, or for information on how
#   to contact the author, see the README file or <john.wulff@inka.de>
#
#	Mdiff - multiple diff with precise list and status output
#
########################################################################

usage()
{
  echo >&2
  echo 'Generate a full report of differences between a list of files  in the' >&2
  echo 'current directory and files with the same name in another directory.' >&2
  echo >&2
  echo 'Option -l allows the generation of lists of different or identical files in' >&2
  echo 'the two directories or a list of non-existing files in the second directory.' >&2
  echo 'These 3 lists are exclusive subsets of the complete set of selected files.' >&2
  echo >&2
  echo "Usage:	$name [+w] [-ietqlckIh] [-x<regex>] [file ...|command] [directory]" >&2
  echo '	+w	whitespace (spaces, tabs, blank lines) are significant' >&2
  echo '		default: whitespace and blank lines are ignored' >&2
  echo '	-i	identical files output:	==== file ====' >&2
  echo '		default: ignore identical files in output' >&2
  echo '	-e	non-existing files put:	**** file does not exist' >&2
  echo '		default: ignore non-existing files in output' >&2
  echo '			 (unless only 1 file)' >&2
  echo '		if files differ output:	#### file ####' >&2
  echo '			 followed by the output of diff' >&2
  echo '	-t	text and date header at start of report' >&2
  echo '	-p	full path in file names for directory (default removed)' >&2
  echo '	-q	quiet operation - return status only' >&2
  echo '	-l	list files which differ - no other output' >&2
  echo '	-li	list files which are identical' >&2
  echo '	-le	list files which are non-existing in directory' >&2
  echo '	-c	display diff output in context form' >&2
  echo '	-I	case insensitive and white space ignored' >&2
  echo '	-k	ignore lines containing the string $Id:' >&2
  echo '	-x <regex> ignore changes in lines that match regex' >&2
  echo '	-h	this help text' >&2
  echo '	--	output is piped to less' >&2
  echo '	-	all further arguments are treated as files' >&2
  echo '	(for backward compatibility first argument may be directory)' >&2
  echo '	if the first argument is not a file, the argument is  executed' >&2
  echo '		as a shell command to generate a list of files.' >&2
  echo "	if no files or command is specified, '$defaultfiles' is used" >&2
  echo '	return status 0 (true) if all files are identical' >&2
  echo '	return status n (false) number of files which differ' >&2
  echo 'Author:	John E. Wulff        <john.wulff@inka.de>' >&2
  echo '$Id: Mdiff,v 1.25 2002/07/13 15:43:07 archiv Exp $' >&2
}

########################################################################
#
#	all echo's to stdin are in process which may be piped
#
########################################################################

process()
{
    dir=${directory%*/}
    if [ "$t" = 1 ]; then
	echo "Differences in directory $PWD and $dir"
	date
    fi

    status=0
    for f in $files; do
	if [ -f "$f" ]; then
	    if [ "$p" != 0 ]; then
		d=$f
	    else
		d=${f##*/}
	    fi
	    if [ -f "$dir/$d" ]; then
		if [ $f -ef $dir/$d ]; then
		    f1=${f%/*}
		    if [ "$f" = "$f1" ]; then
			f1="."
		    fi
		    d1="$dir/$d"
		    f2=${d1%/*}
		    echo "$name: paths $f1 and $f2 are identical - ignored" >&2
		    status=-1
		    break
		elif diff -q $w $f $dir/$d > /dev/null; then
		    if [ "$q" = 0 ]; then
			[ "$i" = 0 ] || echo "========== $f =========="
		    elif [ "$li" = 3 ]; then
			echo $f
		    fi
		else
		    let status+=1
		    if [ "$q" = 0 ]; then
			echo
			echo "########## $f ##########"
			ls -lL $f
			ls -lL $dir/$d
			diff $w $context $f $dir/$d
		    elif [ "$li" = 1 ] && [ "$e" = 0 ]; then
			echo $f
		    fi
		fi
	    elif [ "$e" != 0 ]; then
		let status+=1
		if [ "$q" = 0 ]; then
		    echo "********** $dir/$d does not exist"
		elif [ "$li" = 1 ]; then
		    echo $f
		fi
	    fi
	fi
    done
    if [ "$status" != 0 ] && [ "$q" = 0 ]; then
	echo
	echo "########## $status files differ ##########"
    fi
}

########################################################################
#
#	main
#
########################################################################

name=${0##*/}
name=${name%.*}
i=0; e=0; t=0; p=0; q=0; li=0; w=-wB; pipe=0; recursive=0;
context=''
defaultfiles='[Mm]akefile* *.[achimlyv]*'

while [ $# -gt 0 ]; do
    case $1 in
    -)	shift; break;;
    -*)	option=${1#?}
	while [ -n "$option" ]; do
	    case $option in
	    e*)	e=1;;
	    i*)	i=1; let "li|=2";;
	    l*)	t=0; q=1; let "li|=1";;
	    t*)	t=1;;
	    p*)	p=1;;
	    q*)	t=0; q=1;;
	    c*) context="-c";;
	    k*)	w="$w -I \$Id:";;
	    I*)	w=-wBi;;
	    r*)	recursive=1;;
	    R*)	recursive=1;;
	    x*)	option=${option#?}
		if [ -z "$option" ]; then
		    shift
		    option=$1
		fi
		w="$w -I $option"
		break;;
	    h*)	usage; exit 255;;
	    -*)	pipe=1;;
	    *)	x=${option#?}; option=${option%$x}
	    	echo "$name: unexpected option $option in $1" >&2
		usage; exit 254;;
	    esac
	    option=${option#?}
	done
	;;
    +w) w=;;
    *)	break;;
    esac
    shift
done

dircount=0
filecount=0
command=''
directory=''
dirargs=''
files=''
while [ $# != 0 ]; do
    if [ -f "$1" ]; then
	files="$files $1"
	let filecount+=1
    elif [ -d "$1" ]; then
	if [ -n "$directory" ]; then
	    dirargs="$dirargs $directory"
	    let dircount+=1
	fi
	directory=$1		# last directory in args is other directory
    else
	command=$1		# attempt to use as a command to get list of files
    fi
    shift
done

if [ -z "$directory" ]; then
    echo "$name: there must be at least one directory argument" >&2
    usage
    exit 253
fi

if [ $filecount = 0 ]; then
    for c in $command; do
	break
    done
    if [ -n "$c" ]; then
	tmp=${c#[a-zA-Z_]*}
	if [ $tmp != $c ]; then
	    files=`$command`
	else
	    files=$command
	    command=''
	fi
    else
	files=$defaultfiles
    fi
elif [ $filecount = 1 ] && [ $q = 0 ]; then
    e=1;			# for single file argument, check if other file exists
fi

# echo "files: $files"
# echo "dirs:  $dirargs"
# echo "dir:   $directory"
# echo "n:   $filecount $dircount $e"
# for f in $files; do echo $f; done
# exit

if [ "$pipe" = 0 ]; then
    process
else
    process | less
fi

exit $status
