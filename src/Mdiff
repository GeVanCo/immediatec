#!/bin/sh
########################################################################
#
#	Copyright (C) 2000-2001  John E. Wulff
#
#   You may distribute under the terms of either the GNU General Public
#   License or the Artistic License, as specified in the README file.
#
#   For more information about this program, or for information on how
#   to contact the author, see the README file or <john.wulff@inka.de>
#
#	Mdiff - multiple diff with precise list and status output
#
########################################################################

usage()
{
  echo >&2
  echo 'Generate a full report of differences between the files in two' >&2
  echo 'different project directories. Whitspace is normally ignored.' >&2
  echo >&2
  echo 'Option -l allows the generation of lists of different or' >&2
  echo 'identical files in the two projects.' >&2
  echo >&2
  echo "Usage:	$name [+w] [-ietqlckIh] [file ...] [directory]" >&2
  echo '	+w	whitespace (spaces and tabs) is significant' >&2
  echo '		default: whitespace is ignored' >&2
  echo '	-i	identical files output:	==== file ====' >&2
  echo '		default: ignore identical files in output' >&2
  echo '	-e	nonexisting files put:	**** file does not exist' >&2
  echo '		default: ignore nonexisting files in output' >&2
  echo '		(unless only 1 file)' >&2
  echo '		if files exist output:	#### file ####' >&2
  echo '	-t	text and date header at start of report' >&2
  echo '	-q	quiet operation - return status only' >&2
  echo '	-l	list names of files which differ' >&2
  echo '	-li	list names of files which are identical' >&2
  echo '	-c	display diff output in context form' >&2
  echo '	-k	ignore lines containing the string $Id:' >&2
  echo '	-I	case insensitive and white space ignored' >&2
  echo '	-h	this help text' >&2
  echo '	--	output is piped to less' >&2
  echo '	-	all further arguments are treated as files' >&2
  echo '	if last argument is not a directory, .. is used' >&2
  echo "	if no files are specified, '$files' is used" >&2
  echo '	return status 0 (true) if all files are identical' >&2
  echo '	return status n (false) number of files which differ' >&2
  echo 'Author:	John E. Wulff        <john.wulff@inka.de>' >&2
  echo '$Id: Mdiff,v 1.20 2002/06/02 14:19:33 archiv Exp $' >&2
}

########################################################################
#
#	all echo's to stdin are in process which may be piped
#
########################################################################

process()
{
    if [ "$t" = 1 ]; then
	echo "Differences in directory $PWD and $dir"
	date
    fi

    status=0
    for f in $files; do
	if [ -f "$f" ]; then
	    d=${f##*/}
	    if [ -f "$dir/$d" ]; then
		if diff -q $w $f $dir/$d > /dev/null; then
		    if [ "$q" = 0 ]; then
			[ "$i" = 0 ] || echo "========== $f =========="
		    elif [ "$li" = 3 ]; then
			echo $f
		    fi
		else
		    let status+=1
		    if [ "$q" = 0 ]; then
			echo
			echo "########## $f ##########"
			ls -lL $f
			ls -lL $dir/$d
			diff $w $context $f $dir/$d
		    elif [ "$li" = 1 ]; then
			echo $f
		    fi
		fi
	    elif [ "$e" != 0 ]; then
		let status+=1
		if [ "$q" = 0 ] || [ "$li" = 2 ]; then
		    echo "********** $dir/$d does not exist"
		elif [ "$li" = 1 ]; then
		    echo $f
		fi
	    fi
	fi
    done
    if [ "$status" != 0 ] && [ "$q" = 0 ]; then
	echo
	echo "########## $status files differ ##########"
    fi
}

########################################################################
#
#	main
#
########################################################################

name=${0##*/}
name=${name%.*}
files='[Mm]akefile* *.[chyv]*'
i=0; e=0; t=0; q=0; li=0; w=-w; pipe=0
context=''

while [ $# -gt 0 ]; do
    case $1 in
    -)	shift; break;;
    -*)	option=${1#?}
	while [ -n "$option" ]; do
	    case $option in
	    e*)	e=1;;
	    i*)	i=1; let "li|=2";;
	    l*)	q=1; let "li|=1";;
	    t*)	t=1;;
	    q*)	q=1;;
	    c*) context="-c";;
	    k*)	w="$w -I \$Id:";;
	    I*)	w=-wi;;
	    h*)	usage; exit 255;;
	    -*)	pipe=1;;
	    *)	x=${option#?}; option=${option%$x}
	    	echo "$name: unexpected option $option in $1" >&2
		usage; exit 254;;
	    esac
	    option=${option#?}
	done
	;;
    +w) w=;;
    *)	break;;
    esac
    shift
done

if [ $# = 0 ]; then
    dir='..'
elif [ -d "$1" ]; then
    dir=$1			# first argument is directory (backwards compatible)
    shift
    if [ $# != 0 ]; then
	files=$*
	if [ $# = 1 ]; then
	    e=1;		# for single file argument, check if other file exists
	fi
    fi
else
    files=''			# there must be at least 1 nondirectory
    if [ $# -le 2 ]; then
	e=1;			# for single file argument, check if other file exists
    fi
    while [ $# -gt 1 ]; do
	files="$files $1"
	shift
    done
    if [ -d "$1" ]; then
	dir=$1			# last argument is directory
    else
	dir='..'
	files="$files $1"
    fi
fi

if [ "$pipe" = 0 ]; then
    process
else
    process | less
fi

exit $status
