#!/bin/sh

########################################################################
#
#	Copyright (C) 2000-2001  John E. Wulff
#
#   You may distribute under the terms of either the GNU General Public
#   License or the Artistic License, as specified in the README file.
#
#   For more information about this program, or for information on how
#   to contact the author, see the README file or <john@je-wulff.de>
#
#	make an executable file from an iC file
#
#	Use cc rather than gcc, to make this script usable on every Unix
#
########################################################################

usage ()
{
    echo 'Usage:	'${0##*/}' [-[l|o<exe>|s|c|b|n]i6xqh] [-v[<N>]] file.ic ...' >&2
    echo '    (default)	link all iCfiles file.ic ... into independent executables' >&2
    echo '		output names are base names of the iCfiles (file ...)' >&2
    echo '	-l	link all iCfiles into one executable' >&2
    echo '		default output name is base name of the first iCfile' >&2
    echo "	-o<exe>	place output in file 'exe' (implies -l if first option)" >&2
    echo '	-s	generate listings file.lst .. only (-o target.lst optional)' >&2
    echo '	-c	generate C outputs file.c ... only (-o target.c optional)' >&2
    echo '	-b	generate both listing and C output' >&2
    echo '	-n	generate no output, report ict compile errors only' >&2
    echo "		-s and -n generate 'cexe.c' for last file as a side effect" >&2
    echo '	-i	produce file.ini which records output of an initial run' >&2
    echo '	-6	produce logic generation listing file.lst6' >&2
    echo '	-x	auxiliary files _list1.h _list2.h _list_.c not deleted' >&2
    echo '	-q	quiet operation - return status only' >&2
    echo '	-v	use ict, pplstfix and libict.a in local directory' >&2
    echo '		(default use installed ict and -lict)' >&2
    echo '	-v<N>	use ict<N> eg ict1 ict2 ... with libict1.a libict2.a ...' >&2
    echo '	-h	this help text' >&2
    echo '	$Id: iCmake,v 1.20 2002/06/13 08:39:24 jw Exp $' >&2
}

link=0
status=0
list=""
a=""
v=""
b=""
lib="-lict"
d="-d74 -A"
x=""
l=""
q=0
i=0

while [ $# -gt 0 ]; do
    case $1 in
    -)	shift; break;;
    -*)	option=${1#?}
	while [ -n "$option" ]; do
	    case "$option" in
	    l*)	link=1;;
	    o*) if [ "$link" = 0 ]; then
		    link=1
		fi
		option=${option#?}
		if [ -z "$option" ]; then
		    shift
		    option=$1
		fi
		if [ -n "$option" ]; then
		    first=$option
		    base=${first%.*}
		    if [ "$first" = "$base.ic" ]; then
			echo "parameter error - target '$first' has extension .ic" >&2
			exit 1
		    fi
		else
		    usage; exit 255
		fi
		break;;
	    s*)	link=2;;
	    c*)	link=3;d="-A";;
	    b*) link=4;;
	    n*) link=5;d="-A";;
	    i*)	i=1;;
	    q*)	q=1;;
	    v*)	option=${option#?}
		if [ -n "$option" ]; then
		    v=$option
		    lib=./libict$v.a
		else
		    lib=./libict.a
		    v=" -P./"
		fi
		b="./"
		break;;
	    6*)	d="-d76 -A";l="6";;
	    x*)	x="1";;
	    h*)	usage; exit 255;;
	    *) aflag="-$option"; break;;
	    esac
	    option=${option#?}
	done;;
    *)	break;;
    esac
    shift
done

# if [ "$q" = 0 ]; then
#     echo "########## '${0##*/}' ##########"
# fi

for f in $*; do
    file=$f
    base=${file%.*}
    if [ "$file" = "$base" ]; then
	file="$base.ic"
    fi
    if [ -f "$file" ]; then
	if [ "$q" = 0 ]; then
	    echo $file
	fi
	case $link in
	0)
	    rm -f $base.c $base
	    if nice ${b}ict$v $d -o $base.c -l $base.lst$l $file; then
		if nice cc -g -I. -o $base $base.c _list_.c $lib; then
		    if [ "$i" = 1 ] && ! ./$base -d540 > $base.ini; then
			if [ "$q" = 0 ]; then
			    echo "run time error in initial execution of '$base'" >&2
			fi
			let status+=1
		    fi
		else
		    if [ "$q" = 0 ]; then
			echo "cc compile errors in '$base.c' - no executable '$base' generated" >&2
		    fi
		    let status+=1
		fi
	    else
		if [ "$q" = 0 ]; then
		    echo "${b}ict$v compile errors in '$file' - no executable '$base' generated" >&2
		fi
		let status+=1
	    fi ;;
	1)
	    rm -f $base.c		# in case read only
	    if nice ${b}ict$v $a $d -o $base.c -l $base.lst$l $file; then
		list="$list $base.c"
	    else
		list="$list ERROR:$base.c"
		let status+=1
	    fi
	    a="-a"	# append linking info for 2nd and later files
	    if [ -z "$first" ]; then
		first=$base
	    fi ;;
	2)
	    if [ -n "$first" ]; then
		base=${first%.*}
		first=''		# -o applied only to first file
	    fi
	    if ! nice ${b}ict$v $d -c -l $base.lst$l $file; then
		if [ "$q" = 0 ]; then
		    echo "${b}ict$v compile errors in '$file'" >&2
		fi
		let status+=1
	    fi ;;
	3)
	    if [ -n "$first" ]; then
		base=${first%.*}
		first=''		# -o applied only to first file
	    fi
	    rm -f $base.c
	    if ! nice ${b}ict$v $d -o $base.c $file; then
		if [ "$q" = 0 ]; then
		    echo "${b}ict$v compile errors in '$file'" >&2
		fi
		let status+=1
	    fi ;;
	4)
	    if [ -n "$first" ]; then
		echo "output file '$first' ignored" >&2
		first=''
	    fi
	    rm -f $base.c
	    if ! nice ${b}ict$v $d -o $base.c -l $base.lst$l $file; then
		if [ "$q" = 0 ]; then
		    echo "${b}ict$v compile errors in '$file'" >&2
		fi
		let status+=1
	    fi ;;
	5)
	    if [ -n "$first" ]; then
		echo "output file '$first' ignored" >&2
		first=''
	    fi
	    if ! nice ${b}ict$v $d -c $file; then
		if [ "$q" = 0 ]; then
		    echo "${b}ict$v compile errors in '$file'" >&2
		fi
		let status+=1
	    fi ;;
	esac
    else
	if [ "$q" = 0 ]; then
	    echo "Error: iC file '$file' does not exist" >&2
	fi
	list="$list ERROR:$base.c"
	let status+=1
    fi
done

if [ "$link" = 1 ]; then
    if [ -z "$list" ]; then
	if [ "$q" = 0 ]; then
	    echo "parameter error - no iC source files" >&2
	fi
	let status+=1
    elif [ "$status" = 0 ]; then
	rm -f $first
	if [ "$q" = 0 ]; then
	    echo "link $first from$list"
	fi
	if nice cc -g -I. -o $first $list _list_.c $lib; then
	    if [ "$i" = 1 ] && ! ./$first -d540 > $first.ini; then
		if [ "$q" = 0 ]; then
		    echo "run time error in initial execution of '$first'" >&2
		fi
		let status+=1
	    fi
	else
	    if [ "$q" = 0 ]; then
		echo "cc link errors in '$list' - no executable '$first' generated" >&2
	    fi
	    let status+=1
	fi
    else
	if [ "$q" = 0 ]; then
	    echo "${b}ict$v compile errors in '$list'" >&2
	fi
    fi
fi

# clean up temporary files generated by ict compiler unless -x option
if [ "$x" != 1 ]; then
    rm -f _list1.h _list2.h _list_.c
fi

# if [ "$status" != 0 ] && [ "$q" = 0 ]; then
#     echo "########## $status errors ##########"
# fi
exit $status
