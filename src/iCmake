#!/bin/bash

########################################################################
#
#	Copyright (C) 2000-2005  John E. Wulff
#
#   You may distribute under the terms of either the GNU General Public
#   License or the Artistic License, as specified in the README file.
#
#   For more information about this program, or for information on how
#   to contact the author, see the README file or <john@je-wulff.de>
#
#	make an executable file from an iC file
#
#	Cygnus does not understand cc - CC=gcc
#	On other systems use            CC=cc
#
########################################################################

CC=gcc

usage ()
{
    echo 'Usage:' >&2
    echo '  '${0##*/}' [-[l|o<exe>|s|c|b|n]i6xqh] [-v[<N>]] [-d<dir>] [-y<opt>] file ...' >&2
    echo '    (default)	link all iC-files file.ic ... into independent executables' >&2
    echo '		output names are base names of the iC-files (file ...)' >&2
    echo '	-l	link all iC-files into one executable' >&2
    echo '		default output name is base name of the first iC-file' >&2
    echo "	-o<exe>	place output in file 'exe' (implies -l if first option)" >&2
    echo '	-s	generate listings file.lst .. only (-o target.lst optional)' >&2
    echo '	-c	generate C outputs file.c ... only (-o target.c optional)' >&2
    echo '	-b	generate both listings and C outputs' >&2
    echo '	-n	generate no output, report icc compile errors only' >&2
    echo "		-s and -n generate 'cexe.c' for last file as a side effect" >&2
    echo '	-i	produce file.ini which records output of an initial run' >&2
    echo '	-I	produce file.ini with full INITIALIZATION info (debug only)' >&2
    echo '	-6	produce logic generation listing file.lst6' >&2
    echo '	-x	auxiliary files _list1.h _list2.h _list_.c not deleted' >&2
    echo '	-q	quiet operation - return status only' >&2
    echo '	-v	use icc, pplstfix and libict.a in local directory' >&2
    echo '	-v<N>	use icc<N> eg icc1 icc2 ... with libict1.a libict2.a ...' >&2
    echo '	-d<dir>	use icc and (pplstfix libict.a unless -v first) in directory' >&2
    echo '		<dir> (default use installed icc and -lict)' >&2
    echo '	-y<opt>	call icc with extra -d<opt> orred into normal -d474' >&2
    echo "	-N	No nice with calls of icc and $CC compilers (default is nice)" >&2
    echo '	-z	echo compiler calls with all options for debugging' >&2
    echo '	-h	this help text' >&2
    echo '	$Id: iCmake,v 1.29 2005/01/06 13:08:25 jw Exp $' >&2
}

link=0
status=0
list=""
nice="nice"
a=""
v=""
b=""
lib="-lict"
ldir="-L/usr/local/lib"
d="-d474 -A"
x=""
l=""
q=0
z=0
i=""

while [ $# -gt 0 ]; do
    case $1 in
    -)	shift; break;;
    -*)	option=${1#?}
	while [ -n "$option" ]; do
	    case "$option" in
	    l*)	link=1;;
	    o*) if [ "$link" = 0 ]; then
		    link=1
		fi
		option=${option#?}
		if [ -z "$option" ]; then
		    shift
		    option=$1
		fi
		if [ -n "$option" ]; then
		    first=$option
		    base=${first%.*}
		    if [ "$first" = "$base.ic" ]; then
			echo "parameter error - target '$first' has extension .ic" >&2
			exit 1
		    fi
		else
		    usage; exit 255
		fi
		break;;
	    s*)	link=2;;
	    c*)	link=3;d="-A";;
	    b*) link=4;;
	    n*) link=5;d="-A";;
	    N*) nice="";;
	    i*)	i=440;;
	    I*)	i=540;;
	    q*)	q=1;;
	    v*)	option=${option#?}
		if [ -z "$b" ]; then
		    b="./"
		fi
		lib=${b}libict$option.a
		ldir=""
		v="$option -P${b}"
		break;;
	    d*)	option=${option#?}
		if [ -z "$option" ]; then
		    shift
		    option=$1
		fi
		option=${option%/}
		if [ ! -d "$option/" ]; then
		    echo "Error: -d '$option/' is not a directory" >&2
		    exit 254;
		fi
		b="$option/"
		if [ -z "$v" ]; then
		    lib=${b}libict.a
		    ldir=""
		    v=" -P${b}"
		fi
		break;;
	    6*)	d="$d -d2";l="6";;
	    x*)	d="$d -d4000";x="1";;
	    y*)	option=${option#?}
		if [ -z "$option" ]; then
		    shift
		    option=$1
		fi
		d="$d -d$option"
		break;;
	    z*)	z=1;;
	    h*)	usage; exit 255;;
	    *) aflag="-$option"; break;;
	    esac
	    option=${option#?}
	done;;
    *)	break;;
    esac
    shift
done

# if [ "$q" = 0 ]; then
#     echo "########## '${0##*/}' ##########"
# fi

for f in $*; do
    file=$f
    base=${file%.*}
    if [ "$file" = "$base" ]; then
	file="$base.ic"
    fi
    if [ -f "$file" ]; then
	if [ "$q" = 0 ]; then
	    echo $file
	fi
	case $link in
	0)
	    rm -f $base.c $base
	    if [ "$z" = 1 ]; then
		echo "${b}icc$v $d -o $base.c -l $base.lst$l $file" >&2
	    fi
	    if $nice ${b}icc$v $d -o $base.c -l $base.lst$l $file; then
		echo >> _list2.h	# terminate last line of #define \
		if [ "$z" = 1 ]; then
		    echo "$CC -g -I. $ldir -o $base $base.c _list_.c $lib" >&2
		fi
		if $nice $CC -g -I. $ldir -o $base $base.c _list_.c $lib; then
		    if [ -n "$i" ] && ! ./$base -d$i > $base.ini; then
			if [ "$q" = 0 ]; then
			    echo "run time error in initial execution of '$base'" >&2
			fi
			let status+=1
		    fi
		else
		    if [ "$q" = 0 ]; then
			echo "$CC compile errors in '$base.c' - no executable '$base' generated" >&2
		    fi
		    let status+=1
		fi
	    else
		if [ "$q" = 0 ]; then
		    echo "${b}icc$v compile errors in '$file' - no executable '$base' generated" >&2
		fi
		let status+=1
	    fi ;;
	1)
	    rm -f $base.c		# in case read only
	    if [ "$z" = 1 ]; then
		echo "${b}icc$v $a $d -o $base.c -l $base.lst$l $file" >&2
	    fi
	    if $nice ${b}icc$v $a $d -o $base.c -l $base.lst$l $file; then
		list="$list $base.c"
	    else
		list="$list ERROR:$base.c"
		let status+=1
	    fi
	    a="-a"	# append linking info for 2nd and later files
	    if [ -z "$first" ]; then
		first=$base
	    fi ;;
	2)
	    if [ -n "$first" ]; then
		base=${first%.*}
		first=''		# -o applied only to first file
	    fi
	    if [ "$z" = 1 ]; then
		echo "${b}icc$v $d -c -l $base.lst$l $file" >&2
	    fi
	    if ! $nice ${b}icc$v $d -c -l $base.lst$l $file; then
		if [ "$q" = 0 ]; then
		    echo "${b}icc$v compile errors in '$file'" >&2
		fi
		let status+=1
	    fi ;;
	3)
	    if [ -n "$first" ]; then
		base=${first%.*}
		first=''		# -o applied only to first file
	    fi
	    rm -f $base.c
	    if [ "$z" = 1 ]; then
		echo "${b}icc$v $d -o $base.c $file" >&2
	    fi
	    if ! $nice ${b}icc$v $d -o $base.c $file; then
		if [ "$q" = 0 ]; then
		    echo "${b}icc$v compile errors in '$file'" >&2
		fi
		let status+=1
	    fi ;;
	4)
	    if [ -n "$first" ]; then
		echo "output file '$first' ignored" >&2
		first=''
	    fi
	    rm -f $base.c
	    if [ "$z" = 1 ]; then
		echo "${b}icc$v $d -o $base.c -l $base.lst$l $file" >&2
	    fi
	    if ! $nice ${b}icc$v $d -o $base.c -l $base.lst$l $file; then
		if [ "$q" = 0 ]; then
		    echo "${b}icc$v compile errors in '$file'" >&2
		fi
		let status+=1
	    fi ;;
	5)
	    if [ -n "$first" ]; then
		echo "output file '$first' ignored" >&2
		first=''
	    fi
	    if [ "$z" = 1 ]; then
		echo "${b}icc$v $d -c $file" >&2
	    fi
	    if ! $nice ${b}icc$v $d -c $file; then
		if [ "$q" = 0 ]; then
		    echo "${b}icc$v compile errors in '$file'" >&2
		fi
		let status+=1
	    fi ;;
	esac
    else
	if [ "$q" = 0 ]; then
	    echo "Error: iC file '$file' does not exist" >&2
	fi
	list="$list ERROR:$base.c"
	let status+=1
    fi
done

if [ "$link" = 1 ]; then
    if [ -z "$list" ]; then
	if [ "$q" = 0 ]; then
	    echo "parameter error - no iC source files" >&2
	fi
	let status+=1
    elif [ "$status" = 0 ]; then
	rm -f $first
	if [ "$q" = 0 ]; then
	    echo "link $first from$list"
	fi
	echo >> _list2.h	# terminate last line of #define \
	if [ "$z" = 1 ]; then
	    echo "$CC -g -I. $ldir -o $first $list _list_.c $lib" >&2
	fi
	if $nice $CC -g -I. $ldir -o $first $list _list_.c $lib; then
	    if [ -n "$i" ] && ! ./$first -d$i > $first.ini; then
		if [ "$q" = 0 ]; then
		    echo "run time error in initial execution of '$first'" >&2
		fi
		let status+=1
	    fi
	else
	    if [ "$q" = 0 ]; then
		echo "$CC link errors in '$list' - no executable '$first' generated" >&2
	    fi
	    let status+=1
	fi
    else
	if [ "$q" = 0 ]; then
	    echo "${b}icc$v compile errors in '$list'" >&2
	fi
    fi
fi

# clean up temporary files generated by icc compiler unless -x option
if [ "$x" != 1 ]; then
    rm -f _list1.h _list2.h _list_.c
fi

# if [ "$status" != 0 ] && [ "$q" = 0 ]; then
#     echo "########## $status errors ##########"
# fi
exit $status

############ POD to generate man page ##################################

=head1 NAME

 iCmake - make one or more iC applications

=head1 SYNOPSIS

 iCmake [-[l|o<exe>|s|c|b|n]i6xqh] [-v[<N>]] [-d<dir>] [-y<opt>] file ...
  (default) link all iC-files file.ic ... into independent executables
            output names are base names of the iC-files (file ...)
    -l	    link all iC-files into one executable
            default output name is base name of the first iC-file
    -o<exe> place output in file 'exe' (implies -l if first option)
    -s	    generate listings file.lst .. only (-o target.lst optional)
    -c	    generate C outputs file.c ... only (-o target.c optional)
    -b	    generate both listings and C outputs
    -n	    generate no output, report icc compile errors only
            -s and -n generate 'cexe.c' for last file as a side effect
    -i	    produce file.ini which records output of an initial run
    -I	    produce file.ini with full INITIALIZATION info (debug only)
    -6	    produce logic generation listing file.lst6
    -x	    auxiliary files _list1.h _list2.h _list_.c not deleted
    -q	    quiet operation - return status only
    -v	    use icc, pplstfix and libict.a in local directory
    -v<N>   use icc<N> eg icc1 icc2 ... with libict1.a libict2.a ...
    -d<dir> use icc and (pplstfix libict.a unless -v first) in directory
            <dir> (default use installed icc and -lict)
    -y<opt> call icc with extra -d<opt> orred into normal -d474
    -N	    No nice with calls of icc and gcc compilers (default is nice)
    -z	    echo compiler calls with all options for debugging
    -h	    this help text

=head1 DESCRIPTION

iCmake is a shell script to compile iC sources into C sources using the
icc compiler.  These in turn are compiled and linked into an executable
iC applications (currently using gcc - this can be changed).

Various options allow partial compilation and generation of listings.

returns 0 (true) for no errors or the number of errors (false)

=head1 AUTHOR

John E. Wulff

=head1 BUGS

Email bug reports to B<john@je-wulff> with L<iC Project> in the
subject field.

=head1 SEE ALSO

L<icc(1)>, L<iClive(1)>, L<iCserver(1)>, L<iCbox(1)>

=head1 COPYRIGHT

COPYRIGHT (C) 2000-2005  John E. Wulff

You may distribute under the terms of either the GNU General Public
License or the Artistic License, as specified in the README file.

For more information about this program, or for information on how
to contact the author, see the README file.
