#!/bin/bash

########################################################################
#
#	Copyright (C) 2000-2012  John E. Wulff
#
#   You may distribute under the terms of either the GNU General Public
#   License or the Artistic License, as specified in the README file.
#
#   For more information about this program, or for information on how
#   to contact the author, see the README file
#
#	make an executable file from an iC file
#
#	Cygnus does not understand cc - CC=gcc
#	Intel C/C++ compiler		CC=icc
#
########################################################################

if echo $PATH | grep -q intel_cc; then
    CC=icc
else
    CC=gcc
fi
ldir=" -I/usr/local/include -L/usr/local/lib"
LIB="/usr/local/lib/"
ICC=immcc
IAC=immac

usage ()
{
  echo 'Usage:' >&2
  echo '  '${0##*/}' [-[l|o<exe>|i|t|c|b|n]sfgASpRaLjIJ6xqNzh][ -v[<N>]][ -w<dir>]' >&2
  echo '         [ -k<lim>][ -d<opt>][ -O<level>][ -Dmacro[=defn]...][ -Umacro...]' >&2
  echo '         [ -Cmacro[=defn]...][ -Vmacro...][ -Pmacro[=defn]...]' >&2
  echo '         [ -W[no-]<warn>...] file ...' >&2
  echo '     default:	link all iC-files file.ic ... into independent executables' >&2
  echo '		output names are base names of the iC-files (file ...)' >&2
  echo '	-l	link all iC-files into one executable (implies -A -f)' >&2
  echo '		default: output name is base name of the first iC-file' >&2
  echo '		complete listing of all files is in first.lst' >&2
  echo "	-o<exe>	place output in file 'exe' (implies -l if first option)" >&2
  echo '		complete listing of all files is in exe.lst' >&2
  echo "	-i      generate iC file.ic .. only (runs $IAC pre-compiler only)" >&2
  echo '	-t	generate listings file.lst .. only (-o target.lst optional)' >&2
  echo '	-c	generate C outputs file.c ... only (-o target.c optional)' >&2
  echo '	-b	generate both listings and C outputs - no executable' >&2
  echo "	-n	generate no output, report $ICC compile errors only" >&2
  echo "		-t and -n generate 'cexe.c' for last file as a side effect" >&2
  echo '	-s	link with static library libict.a (default libict.so)' >&2
  echo "	-f	force building of new output files" >&2
  echo '	-e	link all targets with -lefence to test with Electric Fence' >&2
  echo '	-g	debugging with gdb - each expression has its own C code' >&2
  echo '		forces -s -- link with static library libict.a' >&2
  echo '	-A	compile output ARITHMETIC ALIAS nodes for symbol debugging' >&2
  echo '	-S	strict compile - all immediate variables must be declared' >&2
  echo "		forces $IAC to only accept twin braces in FOR ... {{ }}" >&2
  echo "		-N negates use strict pragmas in $IAC for testing" >&2
  echo '	-p	pedantic: warning if variable contains $ (default: $ allowed)' >&2
  echo '	-pp	pedantic-error: error if variable contains $' >&2
  echo '	-O <level> optimisation -O0 none -O1 bit -O2 arithmetic -O4 eliminate' >&2
  echo '		   duplicate arithmetic expressions -O7 all (default)' >&2
  echo '	-R      no maximum error count (default: abort after 100 errors)' >&2
  echo '	-D<macro> predefine <macro> for the iC preprocessor phase' >&2
  echo '	-U<macro> cancel previous definition of <macro> for the iC phase' >&2
  echo '	        Note: do not use the same macros for the iC and the C phase' >&2
  echo '	-C<macro> predefine <macro> for the C preprocessor phase' >&2
  echo '	-V<macro> cancel previous definition of <macro> for the C phase' >&2
  echo "	-P<macro> predefine <macro> for $IAC pre-compiler (forces $IAC)" >&2
  echo '		  also forces building of new iC output and the rest' >&2
  echo '	-W[no-]<warn>                  positive/negative warning options' >&2
  echo '	    -W[no-]deprecated-logic    use of && || ! in pure bit expressions' >&2
  echo '	    -W[no-]function-parameter  unused parameters in functions' >&2
  echo '	    -W[no-]function-delete     delete before function re-definition' >&2
  echo '	    -Wno-deprecated -Wdeprecated (default) all of the above' >&2
  echo "	-a      $IAC: output FOR loop control and %define lines as comments" >&2
  echo "	-L      generate auxiliary 'file.log' for debugging $IAC translation" >&2
  echo '	-k<lim>	highest I/O index (default: no limit; 63 for -c mode)' >&2
  echo '	        if lim <= 63, mixed byte, word and long indices are tested' >&2
  echo '	        default: any index for bit, byte, word or long is allowed' >&2
  echo '	-j	produce file.ini which records output of an initial run' >&2
  echo '	-I	produce file.ini with full INITIALIZATION info (debug only)' >&2
  echo '	-J	produce file.ini with run INITIALIZATION only  (debug only)' >&2
  echo '	-6	produce logic generation listing file.lst6' >&2
  echo '	-x	auxiliary files .iC_list1.h .iC_list2.h not deleted' >&2
  echo '	-q	quiet operation - return status only' >&2
  echo "	-v<N>	use $IAC<N>, $ICC<N>, pplstfix<N> and libict<N>.a in local" >&2
  echo '		directory' >&2
  echo "	-w<dir>	use $IAC, $ICC, pplstfix and libict.a in directory <dir>" >&2
  echo "		(default: use installed $ICC, pplstfix and -lict)" >&2
  echo "	-d<opt>	call $ICC with extra -d<opt> orred into normal -d474" >&2
  echo "	-N	No nice with calls of $ICC, $CC and $IAC compilers" >&2
  echo '		(default: nice)' >&2
  echo '	-z	echo compiler calls with all options for debugging' >&2
  echo '	-h	this help text' >&2
  echo '	$Id: iCmake,v 1.41 2012/12/07 01:08:04 jw Exp $' >&2
}

lwsock32=""
if [ "$OS" = Windows_NT ]; then
    lwsock32=" -lwsock32"
fi
link=0
status=0
files=""
list=""
slist=""
nice="nice "
aux=""
v=""
b=""
lib="-lict$lwsock32"
d=" -d474"
A=""
S=""
N=""
p=""
P=""
L=""
a=""
R=""
force=0
ef=""
ic=""
x=0
l=""
q=0
z=0
k=""
I=""
D=""
C=""
CFL=" -fno-builtin"

if $ICC < /dev/null 2>&1| grep -q 'Electric Fence'; then
    ef=" -lefence"
fi

while getopts ":lo:itcbnsfegASpRaLk:jIJ6xqNv:w:d:O:D:U:C:V:P:W:zh" opt; do
    case $opt in
    l )	link=1
	aux=" -a"			# generate aux files with 'immcc -a' for linking
	if [ -z "$A" ]; then
	    A=" -A"			# must have ARITH ALIAS for linking
	    d="$d$A"
	fi
	;;
    o ) if [ $link -eq 0 ]; then	# don't necessarily generate aux files
	    link=1
	    aux=" -a"			# generate aux files with 'immcc -a' for linking
	    if [ -z "$A" ]; then
		A=" -A"			# must have ARITH ALIAS for linking
		d="$d$A"
	    fi
	fi
	if [ -n "$OPTARG" ]; then
	    first=$OPTARG
	    base=${first%.*}
	    if [ "$first" = "$base.ic" -o "$first" = "$base.ih" ]; then
		echo "parameter error - target -o '$first' is probably an iC source" >&2
		exit 1
	    fi
	else
	    echo "parameter error - no target name for -o option" >&2
	    exit 2
	fi
	;;
    i )	ic="ica";;
    t )	link=2;;
    c )	link=3; d="$A$S$R$k";;
    b ) link=4;;
    n ) link=5; d="$A$S$R$k";;
    s ) lib="${LIB}libict.a$lwsock32";;
    f )	force=1;;
    e ) ef=" -lefence";;
    g ) d="$d -g"; CFL="$CFL -g"; lib="${LIB}libict.a$lwsock32";;
    A )	if [ -z "$A" ]; then A=" -A"; d="$d$A"; fi;;
    S )	if [ -z "$S" ]; then S=" -S"; d="$d$S"; fi;;
    p )	if [ -z "$p" ]; then p=" -P"; C="$C -pedantic"; fi; d="$d$p";;	# allows -pp => -P -P
    R )	if [ -z "$R" ]; then R=" -R"; d="$d$R"; fi;;
    a ) a=" -a";;
    L ) L=" -l x.log";;			# dummy string changed later
    k ) case "$OPTARG" in
	1*|2*|3*|4*|5*|6*|7|8|9)
	    k=" -k$OPTARG"; d="$d$k";;
	esac
	;;
    j )	I=440;;
    I )	I=540;;
    J )	I=500;;
    6 )	d="$d -d2"; l="6";;
    x )	d="$d -d4000"; x="1";;
    q )	q=1;;
    N ) nice=""; N=" -N";;
    v ) if [ -z "$b" ]; then
	    b="./"
	fi
	lib="${b}libict$OPTARG.a$lwsock32"
	ldir=""
	v="$OPTARG"
	;;
    w ) OPTARG=${OPTARG%/}
	if [ ! -d "$OPTARG/" ]; then
	    echo "Error: -d '$OPTARG/' is not a directory" >&2
	    exit 254;
	fi
	b="$OPTARG/"
	if [ -z "$v" ]; then
	    lib="${b}libict.a$lwsock32"
	    ldir=""
	fi
	;;
    d ) d="$d -d$OPTARG";;
    O ) d="$d -O$OPTARG";;
    D ) D="$D -D$OPTARG";;
    U ) D="$D -U$OPTARG";;
    C ) D="$D -C$OPTARG"; C="$C -D$OPTARG";;
    V ) D="$D -V$OPTARG"; C="$C -U$OPTARG";;
    P ) P="$P -P$OPTARG";;
    W ) D="$D -W$OPTARG";;
    z )	z=1;;
    h )	usage; exit 0;;
    \?)	echo "$name: illegal option '-$OPTARG'"; usage; exit 127;;
    esac
done
shift $(($OPTIND - 1))

lib="$lib$ef"
# echo "I=$I, k=$k, d=$d, l=$l, v=$v, b=$b, lib=$lib, force = $force"
# echo "*='$*'"
# exit

# if [ $q -eq 0 ]; then
#     echo "########## '${0##*/}' ##########"
# fi

if [ -n "$aux" ]; then
    rm -f .iC_list1.h .iC_list2.h
fi

for arg in $*; do
    lk=$link				# temporary link mode for each file
    base=${arg%.*}
    ext=${arg#$base}
    icaFile="$base.ica"
    icFile="$base.ic"
    if [ -n "$L" ]; then
	L=" -l $base.log"		# will change for every arg once L is set
    fi
# echo "arg=$arg, base=$base, ext=$ext, icaFile=$icaFile, icFile=$icFile, lk=$lk"
    stat=0
    if [ -f $icaFile ]; then
	if [ $icaFile -nt $icFile -o $force -ne 0 -a "$ext" != '.ic' ]; then
	    if [ -w $icFile ]; then
		mv -f $icFile "$icFile.bak"		# backup writable iC file
	    fi
	    if [ $q -eq 0 ]; then
		if [ $z -eq 1 ]; then echo -n "# "; fi
		echo $icaFile
	    fi
	    if [ $z -eq 1 ]; then
		echo "$nice${b}$IAC$v$a$S$N$P$L -o $icFile $icaFile"	# may be copy if no iCa constructs
	    fi
	    if ! $nice${b}$IAC$v$a$S$N$P$L -o $icFile $icaFile; then	# translate iCa to iC file
		if [ $q -eq 0 ]; then
		    echo "${b}$IAC$v compile errors in '$icaFile' - incorrect iC file '$icFile' generated" >&2
		fi
		stat=1
		let status+=20			# immac error
	    fi
	fi
    elif [ -f $icFile ]; then
	if [ $z -eq 1 ]; then
	    echo "if ! $nice${b}$IAC$v$S$N$P -t $icFile;"	# may be copy if no iCa constructs
	fi
	if ! $nice${b}$IAC$v$S$N$P -t $icFile; then
	    echo "$? '$icFile' should be renamed '$icaFile' because it has iCa constructs" >&2
	    stat=1
	    let status+=20			# immac error
	fi
    fi
    if [ -n "$ext" ]; then
	case $ext in
	.lst )	lk=2;;
	.lst6 )	lk=2; d="$d -d2"; l="6";;
	.c )	lk=3; d="$A$S$R$k";;
	.ic )	;;
	.ica )	;;
	* )	echo "*** bad file extension '$ext' in '$arg'" >&2; usage; exit 127;;
	esac
    fi

    if [ -f "$icFile" -a -z "$ic" -a "$stat" -eq 0 ]; then
	case $lk in
	0)				# default
	    stat=0
	    if [ "$icFile" -nt "$base.c" -o $force -ne 0 ]; then
		if [ $q -eq 0 ]; then
		    if [ $z -eq 1 ]; then echo -n "# "; fi
		    echo $icFile
		fi
		rm -f $base.c
		if [ $z -eq 1 ]; then
		    echo "$nice${b}$ICC$v$D$d -o $base.c -l $base.lst$l $icFile"
		fi
		if ! $nice${b}$ICC$v$D$d -o $base.c -l $base.lst$l $icFile; then
		    if [ $q -eq 0 ]; then
			echo "${b}$ICC$v compile errors in '$icFile' - no executable '$base' generated" >&2
		    fi
		    stat=1
		    let status+=1
		fi
	    fi
	    if [ "$stat" -eq 0 ]; then	# do sequentially in case C file was already made
		if [ "$base.c" -nt "$base" -o $force -ne 0 ]; then
		    rm -f $base
		    if [ $z -eq 1 ]; then
			echo "$nice$CC$CFL -I.$ldir$C -o $base $base.c $lib"
		    fi
		    if $nice$CC$CFL -I.$ldir$C -o $base $base.c $lib; then
			if [ -n "$I" ]; then
			    if [ $z -eq 1 ]; then
				echo "./$base -d$I > $base.ini"
			    fi
			    if ! ./$base -d$I > $base.ini; then
				if [ $q -eq 0 ]; then
				    echo "run time error in initial execution of '$base'" >&2
				fi
				let status+=1
			    fi
			fi
		    else
			if [ $q -eq 0 ]; then
			    echo "$CC compile errors in '$base.c' - no executable '$base' generated" >&2
			fi
			let status+=1
		    fi
		fi
	    fi ;;
	1)				# -l	link all iC-files into one executable
	    if [ "$icFile" -nt "$base.c" -o $force -ne 0 ]; then
		list="$list $icFile"	# compile and link all if one has changed
	    fi
	    files="$files $icFile"
	    ;;
	2)				# -t	generate listings file.lst
	    if [ -n "$first" ]; then
		base=${first%.*}
		first=''		# -o applied only to first file
	    fi
	    if [ "$icFile" -nt "$base.lst$l" -o $force -ne 0 ]; then
		if [ $q -eq 0 ]; then
		    if [ $z -eq 1 ]; then echo -n "# "; fi
		    echo "$base.lst$l"
		fi
		rm -f $base.lst$l
		if [ $z -eq 1 ]; then
		    echo "$nice${b}$ICC$v$D$d -c -l $base.lst$l $icFile"
		fi
		if ! $nice${b}$ICC$v$D$d -c -l $base.lst$l $icFile; then
		    if [ $q -eq 0 ]; then
			echo "${b}$ICC$v compile errors in '$icFile'" >&2
		    fi
		    let status+=1
		fi
	    fi ;;
	3)				# -c	generate C outputs file.c
	    if [ -n "$first" ]; then
		base=${first%.*}
		first=''		# -o applied only to first file
	    fi
	    if [ "$icFile" -nt "$base.c" -o $force -ne 0 ]; then
		if [ $q -eq 0 ]; then
		    if [ $z -eq 1 ]; then echo -n "# "; fi
		    echo "$base.c"
		fi
		rm -f $base.c
		if [ $z -eq 1 ]; then
		    echo "$nice${b}$ICC$v$D$d -o $base.c $icFile"
		fi
		if ! $nice${b}$ICC$v$D$d -o $base.c $icFile; then
		    if [ $q -eq 0 ]; then
			echo "${b}$ICC$v compile errors in '$icFile'" >&2
		    fi
		    let status+=1
		fi
	    fi ;;
	4)				# -b	generate both listings and C outputs
	    if [ -n "$first" ]; then
		echo "output file '$first' ignored" >&2
		first=''
	    fi
	    if [ "$icFile" -nt "$base.c" -o "$icFile" -nt "$base.lst$l" -o $force -ne 0 ]; then
		if [ $q -eq 0 ]; then
		    if [ $z -eq 1 ]; then echo -n "# "; fi
		    echo "$base.c $base.lst$l"
		fi
		rm -f $base.c $base.lst$l
		if [ $z -eq 1 ]; then
		    echo "$nice${b}$ICC$v$D$d -o $base.c -l $base.lst$l $icFile"
		fi
		if ! $nice${b}$ICC$v$D$d -o $base.c -l $base.lst$l $icFile; then
		    if [ $q -eq 0 ]; then
			echo "${b}$ICC$v compile errors in '$icFile'" >&2
		    fi
		    let status+=1
		fi
	    fi ;;
	5)				# -n	generate no output, report immcc compile errors only
	    if [ $q -eq 0 ]; then
		if [ $z -eq 1 ]; then echo -n "# "; fi
		echo $icFile
	    fi
	    if [ -n "$first" ]; then
		echo "output file '$first' ignored" >&2
		first=''
	    fi
	    if [ $z -eq 1 ]; then
		echo "$nice${b}$ICC$v$D$d -c $icFile"
	    fi
	    if ! $nice${b}$ICC$v$D$d -c $icFile; then
		if [ $q -eq 0 ]; then
		    echo "${b}$ICC$v compile errors in '$icFile'" >&2
		fi
		let status+=1
	    fi ;;
	esac
    elif [ -z "$ic" ]; then
	if [ $q -eq 0 ]; then
	    echo "Error: iC file '$icFile' does not exist or is in error" >&2
	fi
	list="$list ERROR:$base.c"
	let status+=1
    fi
done

if [ $link -eq 1 -a -z "$ic" -a -n "$list" ]; then
    list=""
    for icFile in $files; do	# recompile all files for aux and link
	base=${icFile%.ic}
	if [ $q -eq 0 ]; then
	    if [ $z -eq 1 ]; then echo -n "# "; fi
	    echo $icFile
	fi
	rm -f $base.c		# -f in case read only
	if [ $z -eq 1 ]; then
	    echo "$nice${b}$ICC$v$D$aux$d -o $base.c -l $base.lst$l $icFile"
	fi
	if ! $nice${b}$ICC$v$D$aux$d -o $base.c -l $base.lst$l $icFile; then
	    list="$list ERROR:"
	    let status+=1
	fi
	list="$list $base.c"
	slist="$slist $base.lst$l"
	if [ -z "$first" ]; then
	    first=$base
	fi
    done
    if [ $status -eq 0 ]; then
	rm -f $first
	if [ $q -eq 0 ]; then
	    if [ $z -eq 1 ]; then echo -n "# "; fi
	    echo "link $first from$list"
	fi
	if [ -n "$slist" ]; then
	    cat $slist > .iC_list0.lst
	    mv -f .iC_list0.lst $first.lst$l
	fi
	echo >> .iC_list2.h	# terminate last line of #define \
	if [ $z -eq 1 ]; then
	    echo "echo >> .iC_list2.h	# terminate last line of #define \\"
	    echo "$nice$CC$CFL -I.$ldir$C -o $first $list $lib"
	fi
	if $nice$CC$CFL -I.$ldir$C -o $first $list $lib; then
	    if [ -n "$I" ]; then
		if [ $z -eq 1 ]; then echo "./$first -d$I > $first.ini"; fi
		if ! ./$first -d$I > $first.ini; then
		    if [ $q -eq 0 ]; then
			echo "run time error in initial execution of '$first'" >&2
		    fi
		    let status+=1
		fi
	    fi
	else
	    if [ $q -eq 0 ]; then
		echo "$CC link errors in '$list' - no executable '$first' generated" >&2
	    fi
	    let status+=1
	fi
    else
	if [ $q -eq 0 ]; then
	    echo "${b}$ICC$v compile errors in '$list'" >&2
	fi
    fi
fi

# clean up temporary files generated by immcc compiler unless -x option
if [ $x -ne 1 ]; then
    rm -f .iC_list1.h .iC_list2.h
fi

# if [ $status -ne 0 -a $q -eq 0 ]; then
#     echo "########## $status errors ##########"
# fi
exit $status

############ POD to generate man page ##################################

=encoding utf8

=head1 NAME

iCmake - make one or more immediate-C applications

=head1 SYNOPSIS

 iCmake [-[l|o<exe>|i|t|c|b|n]sfgASpRaLjIJ6xqNzh][ -v[<N>]][ -w<dir>]
        [ -k<lim>][ -d<opt>][ -O<level>][ -Dmacro[=defn]...][ -Umacro...]
	[ -Cmacro[=defn]...][ -Vmacro...][ -Pmacro[=defn]...]
	[ -W[no-]<warn>...] file ...
   default: link all iC-files file.ic ... into independent executables
            output names are base names of the iC-files (file ...)
    -l      link all iC-files into one executable (implies -A)
            default: output name is base name of the first iC-file
            complete listing of all files is in first.lst
    -o<exe> place output in file 'exe' (implies -l if first option)
            complete listing of all files is in exe.lst
    -i      generate iC file.ic .. only (runs immac pre-compiler only)
    -t      generate listings file.lst .. only (-o target.lst optional)
    -c      generate C outputs file.c ... only (-o target.c optional)
    -b      generate both listings and C outputs - no executable
    -n      generate no output, report immcc compile errors only
            -t and -n generate 'cexe.c' for last file as a side effect
    -s	    link with static library libict.a (default libict.so)
    -f      force building of new output files
    -e      link all targets with -lefence to test with Electric Fence
    -g      debugging with gdb - each expression has its own C code
            forces -s -- link with static library libict.a
    -A      compile output ARITHMETIC ALIAS nodes for symbol debugging
    -S      strict compile - all immediate variables must be declared
            forces immac to only accept twin braces in FOR ... {{ }}
            -N negates use strict pragmas in immac for testing
    -p      pedantic: warning if variable contains $ (default: $ allowed)
    -pp     pedantic-error: error if variable contains $
    -O <level> optimisation -O0 none -O1 bit -O2 arithmetic -O4 eliminate
               duplicate arithmetic expressions -O7 all (default)
    -R      no maximum error count (default: abort after 100 errors)
    -D <macro> predefine <macro> for the iC preprocessor phase
    -U <macro> cancel previous definition of <macro> for the iC phase
            Note: do not use the same macros for the iC and the C phase
    -C <macro> predefine <macro> for the C preprocessor phase
    -V <macro> cancel previous definition of <macro> for the C phase
    -P <macro> predefine <macro> for immac pre-compiler (forces immac)
               also forces building of new iC output and the rest
    -W[no-]<warn>                  positive/negative warning options
        -W[no-]deprecated-logic    use of && || ! in pure bit expressions
        -W[no-]function-parameter  unused parameters in functions
        -W[no-]function-delete     delete before function re-definition
        -Wno-deprecated -Wdeprecated (default) all of the above
    -a      immac: output FOR loop control and %define lines as comments
    -L      generate auxiliary 'file.log' for debugging immac translation
    -k<lim> highest I/O index (default: no limit; 63 for -c mode)
            if lim <= 63, mixed byte, word and long indices are tested
            default: any index for bit, byte, word or long is allowed
    -j      produce file.ini which records output of an initial run
    -I      produce file.ini with full INITIALIZATION info (debug only)
    -J      produce file.ini with run INITIALIZATION only  (debug only)
    -6      produce logic generation listing file.lst6
    -x      auxiliary files .iC_list1.h .iC_list2.h not deleted
    -q      quiet operation - return status only
    -v<N>   use immac<N>, immcc<N>, pplstfix<N> and libict<N>.a in local
            directory
    -w<dir> use immac, immcc, pplstfix and libict.a in directory <dir>
            (default: use installed immcc, pplstfix and -lict)
    -d<opt> call immcc with extra -d<opt> orred into normal -d474
    -N      No nice with calls of immcc, gcc and immac compilers
            (default: nice)
    -z      echo compiler calls with all options for debugging
    -h      this help text

=head1 DESCRIPTION

B<iCmake> is a shell script to compile iCa and iC sources into C
sources using the B<immac> and B<immcc> compilers.  These in turn
are compiled and linked into an executable iC applications by a C
compiler - currently B<gcc> (this can be changed).

If a source file contains 'FOR loops', 'IF statements' or %define
macro definitions, it is an iCa language file and should be named
<source>.ica.  This is translated to an iC source file using the
B<immac> pre-compiler, which is then translated into a C source be the
B<immcc> compiler. Otherwise the source should have the extension .ic,
which is translated directly by B<immcc>. If a file with the extension
.ic has iCa constucts a warning is issued and no attempt is made to
tranlsate it with B<immcc> (this would cause serious errors).

Various options allow partial compilation and generation of listings.

returns 0 (true) for no errors or the number of errors (false)

=head1 AUTHOR

John E. Wulff

=head1 BUGS

Email bug reports to B<immediateC@gmail.com> with L<iC Project> in the
subject field.

=head1 SEE ALSO

L<immcc(1)>, L<immac(1)>, L<iClive(1)>, L<iCserver(1)>, L<iCbox(1)>

=head1 COPYRIGHT

COPYRIGHT (C) 2000-2012  John E. Wulff

You may distribute under the terms of either the GNU General Public
License or the Artistic License, as specified in the README file.

For more information about this program, or for information on how
to contact the author, see the README file.

=cut

############ end of POD to generate man page ###########################
