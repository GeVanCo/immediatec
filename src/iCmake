#!/bin/bash

########################################################################
#
#	Copyright (C) 2000-2005  John E. Wulff
#
#   You may distribute under the terms of either the GNU General Public
#   License or the Artistic License, as specified in the README file.
#
#   For more information about this program, or for information on how
#   to contact the author, see the README file or <john@je-wulff.de>
#
#	make an executable file from an iC file
#
#	Cygnus does not understand cc - CC=gcc
#	Intel C/C++ compiler		CC=icc
#
########################################################################

if echo $PATH | grep -q intel_cc; then
    CC=icc
    ldir=" -I/usr/local/include -L/usr/local/lib"
else
    CC=gcc
    ldir=" -I/usr/local/include -L/usr/local/lib"
fi
ICC=immcc

usage ()
{
  echo 'Usage:' >&2
  echo '  '${0##*/}' [-[l|o<exe>|s|c|b|n]gASRiI6xqh][ -v[<N>]][ -w<dir>][ -d<opt>]' >&2
  echo '         [ -O<level>][ -Dmacro[=defn]...][ -Umacro...] file ...' >&2
  echo '     default:	link all iC-files file.ic ... into independent executables' >&2
  echo '		output names are base names of the iC-files (file ...)' >&2
  echo '	-l	link all iC-files into one executable (implies -A)' >&2
  echo '		default: output name is base name of the first iC-file' >&2
  echo '		complete listing of all files is in first.lst' >&2
  echo '	-o<exe>	place output in file 'exe' (implies -l if first option)' >&2
  echo '		complete listing of all files is in exe.lst' >&2
  echo '	-s	generate listings file.lst .. only (-o target.lst optional)' >&2
  echo '	-c	generate C outputs file.c ... only (-o target.c optional)' >&2
  echo '	-b	generate both listings and C outputs - no executable' >&2
  echo "	-n	generate no output, report $ICC compile errors only" >&2
  echo '		-s and -n generate 'cexe.c' for last file as a side effect' >&2
  echo '	-g	each expression has its own C code for debugging with gdb' >&2
  echo '	-A	compile output ARITHMETIC ALIAS nodes for symbol debugging' >&2
  echo '	-S	strict compile - all immediate variables must be declared' >&2
  echo '	-P	pedantic: warning if variable contains $ (default: $ allowed)' >&2
  echo '	-PP	pedantic-error: error if variable contains $' >&2
  echo '	-O <level> optimisation -O0 none -O1 bit -O2 arithmetic -O4 eliminate' >&2
  echo '		duplicate arithmetic expressions -O7 all (default)' >&2
  echo '	-R      no maximum error count (default: abort after 100 errors)' >&2
  echo '	-D<macro> predefine <macro> for the iC preprocessor phase' >&2
  echo '	-U<macro> cancel previous definition of <macro> for the iC phase' >&2
  echo '	        Note: do not use the same macros for the iC and the C phase' >&2
  echo '	-C<macro> predefine <macro> for the C preprocessor phase' >&2
  echo '	-V<macro> cancel previous definition of <macro> for the C phase' >&2
  echo '	-k<lim>	highest I/O index (default: no limit; 63 for -c mode)' >&2
  echo '	        if lim <= 63, mixed byte, word and long indices are tested' >&2
  echo '	        default: any index for bit, byte, word or long is allowed' >&2
  echo '	-i	produce file.ini which records load info from initial run' >&2
  echo '	-I	produce file.ini with full INITIALIZATION info (debug only)' >&2
  echo '	-J	produce file.ini with run INITIALIZATION only (debug only)' >&2
  echo '	-6	produce logic generation listing file.lst6' >&2
  echo '	-x	auxiliary files .iC_list1.h .iC_list2.h not deleted' >&2
  echo '	-q	quiet operation - return status only' >&2
  echo "	-v<N>   use $ICC<N>, pplsstfix<N> and libict<N>.a in local directory" >&2
  echo "	-w<dir> use $ICC, pplstfix and libict.a in directory <dir>" >&2
  echo "		(default: use installed $ICC, pplstfix and -lict)" >&2
  echo "	-d<opt>	call $ICC with extra -d<opt> orred into normal -d474" >&2
  echo "	-N	No nice with calls of $ICC and $CC compilers (default: nice)" >&2
  echo '	-z	echo compiler calls with all options for debugging' >&2
  echo '	-h	this help text' >&2
  echo '	$Id: iCmake,v 1.34 2007/12/04 16:12:00 jw Exp $' >&2
}

lwsock32=""
if [ "$OS" = Windows_NT ]; then
    lwsock32=" -lwsock32"
fi
link=0
status=0
list=""
slist=""
nice="nice"
a=""
v=""
b=""
lib="-lict$lwsock32"
d=" -d474"
A=""
S=""
P=""
R=""
x=0
l=""
q=0
z=0
k=""
I=""
D=""
C=""

while getopts ":lo:scbnNk:iIJqv:w:gASO:PRD:U:C:V:6xd:zh" opt; do
    case $opt in
    l )	link=1
	a=" -a"				# generate aux files for linking
	if [ -z "$A" ]; then
	    A=" -A"			# must have ARITH ALIAS for linking
	    d="$d$A"
	fi
	;;
    o ) if [ $link -eq 0 ]; then	# don't necessarily generate aux files
	    link=1
	    a=" -a"			# generate aux files for linking
	    if [ -z "$A" ]; then
		A=" -A"			# must have ARITH ALIAS for linking
		d="$d$A"
	    fi
	fi
	if [ -n "$OPTARG" ]; then
	    first=$OPTARG
	    base=${first%.*}
	    if [ "$first" = "$base.ic" -o "$first" = "$base.ih" ]; then
		echo "parameter error - target -o '$first' is probably an iC source" >&2
		exit 1
	    fi
	else
	    echo "parameter error - no target name for -o option" >&2
	    exit 2
	fi
	;;
    s )	link=2;;
    c )	link=3; d="$A$S$R$k";;
    b ) link=4;;
    n ) link=5; d="$A$S$R$k";;
    N ) nice="";;
    k ) case "$OPTARG" in
	1*|2*|3*|4*|5*|6*|7|8|9)
	    k=" -k$OPTARG"; d="$d$k";;
	esac
	;;
    i )	I=440;;
    I )	I=540;;
    J )	I=500;;
    q )	q=1;;
    v ) if [ -z "$b" ]; then
	    b="./"
	fi
	lib="${b}libict$OPTARG.a$lwsock32"
	ldir=""
	v="$OPTARG"
	;;
    w ) OPTARG=${OPTARG%/}
	if [ ! -d "$OPTARG/" ]; then
	    echo "Error: -d '$OPTARG/' is not a directory" >&2
	    exit 254;
	fi
	b="$OPTARG/"
	if [ -z "$v" ]; then
	    lib="${b}libict.a$lwsock32"
	    ldir=""
	fi
	;;
    A )	if [ -z "$A" ]; then A=" -A"; d="$d$A"; fi;;
    S )	if [ -z "$S" ]; then S=" -S"; d="$d$S"; fi;;
    P )	if [ -z "$P" ]; then P=" -P"; C="$C -pedantic"; fi; d="$d$P";;	# allows -PP => -P -P
    R )	if [ -z "$R" ]; then R=" -R"; d="$d$R"; fi;;
    D ) D="$D -D$OPTARG";;
    U ) D="$D -U$OPTARG";;
    C ) D="$D -C$OPTARG"; C="$C -D$OPTARG";;
    V ) D="$D -V$OPTARG"; C="$C -U$OPTARG";;
    6 )	d="$d -d2"; l="6";;
    x )	d="$d -d4000"; x="1";;
    d ) d="$d -d$OPTARG";;
    O ) d="$d -O$OPTARG";;
    g ) d="$d -g";;
    z )	z=1;;
    h )	usage; exit 0;;
    \?)	echo "$name: illegal option '-$OPTARG'"; usage; exit 127;;
    esac
done
shift $(($OPTIND - 1))

# echo I=$I, k=$k, d=$d, l=$l, v=$v, b=$b, lib=$lib
# exit

# if [ $q -eq 0 ]; then
#     echo "########## '${0##*/}' ##########"
# fi

if [ -n "$a" ]; then
    rm -f .iC_list1.h .iC_list2.h
fi
for f in $*; do
    file=$f
    base=${file%.*}
    if [ "$file" = "$base" ]; then
	file="$base.ic"
    fi
    if [ -f "$file" ]; then
	if [ $q -eq 0 ]; then
	    if [ $z -eq 1 ]; then echo -n "# "; fi
	    echo $file
	fi
	case $link in
	0)				# default
	    rm -f $base.c $base
	    if [ $z -eq 1 ]; then
		echo "${b}$ICC$v$D$d -o $base.c -l $base.lst$l $file"
	    fi
	    if $nice ${b}$ICC$v$D$d -o $base.c -l $base.lst$l $file; then
		if [ $z -eq 1 ]; then
		    echo "$CC -g -I.$ldir$C -o $base $base.c $lib"
		fi
		if $nice $CC -g -I.$ldir$C -o $base $base.c $lib; then
		    if [ -n "$I" ]; then
			if [ $z -eq 1 ]; then
			    echo "./$base -d$I > $base.ini"
			fi
			if ! ./$base -d$I > $base.ini; then
			    if [ $q -eq 0 ]; then
				echo "run time error in initial execution of '$base'" >&2
			    fi
			    let status+=1
			fi
		    fi
		else
		    if [ $q -eq 0 ]; then
			echo "$CC compile errors in '$base.c' - no executable '$base' generated" >&2
		    fi
		    let status+=1
		fi
	    else
		if [ $q -eq 0 ]; then
		    echo "${b}$ICC$v compile errors in '$file' - no executable '$base' generated" >&2
		fi
		let status+=1
	    fi ;;
	1)				# -l	link all iC-files into one executable
	    rm -f $base.c		# -f in case read only
	    if [ $z -eq 1 ]; then
		echo "${b}$ICC$v$D$a$d -o $base.c -l $base.lst$l $file"
	    fi
	    if $nice ${b}$ICC$v$D$a$d -o $base.c -l $base.lst$l $file; then
		list="$list $base.c"
		slist="$slist $base.lst$l"
	    else
		list="$list ERROR:$base.c"
		let status+=1
	    fi
	    if [ -z "$first" ]; then
		first=$base
	    fi ;;
	2)				# -s	generate listings file.lst
	    if [ -n "$first" ]; then
		base=${first%.*}
		first=''		# -o applied only to first file
	    fi
	    if [ $z -eq 1 ]; then
		echo "${b}$ICC$v$D$d -c -l $base.lst$l $file"
	    fi
	    if ! $nice ${b}$ICC$v$D$d -c -l $base.lst$l $file; then
		if [ $q -eq 0 ]; then
		    echo "${b}$ICC$v compile errors in '$file'" >&2
		fi
		let status+=1
	    fi ;;
	3)				# -c	generate C outputs file.c
	    if [ -n "$first" ]; then
		base=${first%.*}
		first=''		# -o applied only to first file
	    fi
	    rm -f $base.c
	    if [ $z -eq 1 ]; then
		echo "${b}$ICC$v$D$d -o $base.c $file"
	    fi
	    if ! $nice ${b}$ICC$v$D$d -o $base.c $file; then
		if [ $q -eq 0 ]; then
		    echo "${b}$ICC$v compile errors in '$file'" >&2
		fi
		let status+=1
	    fi ;;
	4)				# -b	generate both listings and C outputs
	    if [ -n "$first" ]; then
		echo "output file '$first' ignored" >&2
		first=''
	    fi
	    rm -f $base.c
	    if [ $z -eq 1 ]; then
		echo "${b}$ICC$v$D$d -o $base.c -l $base.lst$l $file"
	    fi
	    if ! $nice ${b}$ICC$v$D$d -o $base.c -l $base.lst$l $file; then
		if [ $q -eq 0 ]; then
		    echo "${b}$ICC$v compile errors in '$file'" >&2
		fi
		let status+=1
	    fi ;;
	5)				# -n	generate no output, report immcc compile errors only
	    if [ -n "$first" ]; then
		echo "output file '$first' ignored" >&2
		first=''
	    fi
	    if [ $z -eq 1 ]; then
		echo "${b}$ICC$v$D$d -c $file"
	    fi
	    if ! $nice ${b}$ICC$v$D$d -c $file; then
		if [ $q -eq 0 ]; then
		    echo "${b}$ICC$v compile errors in '$file'" >&2
		fi
		let status+=1
	    fi ;;
	esac
    else
	if [ $q -eq 0 ]; then
	    echo "Error: iC file '$file' does not exist" >&2
	fi
	list="$list ERROR:$base.c"
	let status+=1
    fi
done

if [ $link -eq 1 ]; then
    if [ -z "$list" ]; then
	if [ $q -eq 0 ]; then
	    echo "parameter error - no iC source files" >&2
	fi
	let status+=1
    elif [ $status -eq 0 ]; then
	rm -f $first
	if [ $q -eq 0 ]; then
	    if [ $z -eq 1 ]; then echo -n "# "; fi
	    echo "link $first from$list"
	fi
	if [ -n "$slist" ]; then
	    cat $slist > .iC_list0.lst
	    mv -f .iC_list0.lst $first.lst$l
	fi
	echo >> .iC_list2.h	# terminate last line of #define \
	if [ $z -eq 1 ]; then
	    echo "echo >> .iC_list2.h	# terminate last line of #define \\"
	    echo "$CC -g -I.$ldir$C -o $first $list $lib"
	fi
	if $nice $CC -g -I.$ldir$C -o $first $list $lib; then
	    if [ -n "$I" ]; then
		if [ $z -eq 1 ]; then
		    echo "./$first -d$I > $first.ini"
		fi
		if ! ./$first -d$I > $first.ini; then
		    if [ $q -eq 0 ]; then
			echo "run time error in initial execution of '$first'" >&2
		    fi
		    let status+=1
		fi
	    fi
	else
	    if [ $q -eq 0 ]; then
		echo "$CC link errors in '$list' - no executable '$first' generated" >&2
	    fi
	    let status+=1
	fi
    else
	if [ $q -eq 0 ]; then
	    echo "${b}$ICC$v compile errors in '$list'" >&2
	fi
    fi
fi

# clean up temporary files generated by immcc compiler unless -x option
if [ $x -ne 1 ]; then
    rm -f .iC_list1.h .iC_list2.h
fi

# if [ $status -ne 0 -a $q -eq 0 ]; then
#     echo "########## $status errors ##########"
# fi
exit $status

############ POD to generate man page ##################################

=head1 NAME

 iCmake - make one or more iC applications

=head1 SYNOPSIS

 iCmake [-[l|o<exe>|s|c|b|n]ASRiI6xqh] [-v[<N>]] [-w<dir>] [-d<opt>]
        [ -Dmacro[=defn]...][ -Umacro...] file ...
   default: link all iC-files file.ic ... into independent executables
            output names are base names of the iC-files (file ...)
    -l      link all iC-files into one executable (implies -A)
            default: output name is base name of the first iC-file
            complete listing of all files is in first.lst
    -o<exe> place output in file 'exe' (implies -l if first option)
            complete listing of all files is in exe.lst
    -s      generate listings file.lst .. only (-o target.lst optional)
    -c      generate C outputs file.c ... only (-o target.c optional)
    -b      generate both listings and C outputs - no executable
    -n      generate no output, report immcc compile errors only
            -s and -n generate 'cexe.c' for last file as a side effect
    -A      compile output ARITHMETIC ALIAS nodes for symbol debugging
    -S      strict compile - all immediate variables must be declared
    -P      pedantic: warning if variable contains $ (default: $ allowed)
    -PP     pedantic-error: error if variable contains $
    -R      no maximum error count (default: abort after 100 errors)
    -D <macro> predefine <macro> for the iC preprocessor phase
    -U <macro> cancel previous definition of <macro> for the iC phase
            Note: do not use the same macros for the iC and the C phase
    -C <macro> predefine <macro> for the C preprocessor phase
    -V <macro> cancel previous definition of <macro> for the C phase
    -k<lim> highest I/O index (default: no limit; 63 for -c mode)
            if lim <= 63, mixed byte, word and long indices are tested
            default: any index for bit, byte, word or long is allowed
    -i      produce file.ini which records output of an initial run
    -I      produce file.ini with full INITIALIZATION info (debug only)
    -J      produce file.ini with run INITIALIZATION only (debug only)
    -6      produce logic generation listing file.lst6
    -x      auxiliary files .iC_list1.h .iC_list2.h not deleted
    -q      quiet operation - return status only
    -v<N>   use immcc<N>, pplsstfix<N> and libict<N>.a in local directory
    -w<dir> use immcc, pplstfix and libict.a in directory <dir>
            (default: use installed immcc, pplstfix and -lict)
    -d<opt> call immcc with extra -d<opt> orred into normal -d474
    -N      No nice with calls of immcc and gcc compilers (default: nice)
    -z      echo compiler calls with all options for debugging
    -h      this help text

=head1 DESCRIPTION

iCmake is a shell script to compile iC sources into C sources using the
immcc compiler.  These in turn are compiled and linked into an executable
iC applications (currently using gcc - this can be changed).

Various options allow partial compilation and generation of listings.

returns 0 (true) for no errors or the number of errors (false)

=head1 AUTHOR

John E. Wulff

=head1 BUGS

Email bug reports to B<john@je-wulff.de> with L<iC Project> in the
subject field.

=head1 SEE ALSO

L<immcc(1)>, L<iClive(1)>, L<iCserver(1)>, L<iCbox(1)>

=head1 COPYRIGHT

COPYRIGHT (C) 2000-2005  John E. Wulff

You may distribute under the terms of either the GNU General Public
License or the Artistic License, as specified in the README file.

For more information about this program, or for information on how
to contact the author, see the README file.
