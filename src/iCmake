#!/bin/bash

########################################################################
#
#	Copyright (C) 2000-2017  John E. Wulff
#
#   You may distribute under the terms of either the GNU General Public
#   License or the Artistic License, as specified in the README file.
#
#   For more information about this program, or for information on how
#   to contact the author, see the README file
#
#	make an executable file from an iC file
#
#	Cygnus does not understand cc - CC=gcc
#	Intel C/C++ compiler		CC=icc
#
########################################################################

name=${0##*/}
if echo $PATH | grep -q intel_cc; then
    CC=icc
else
    CC=gcc
fi

if [ -f "${HOME}/.iC/iCmake.ini" ]; then
    read LIB < ${HOME}/.iC/iCmake.ini
    if [ ! -d $LIB -o ! -f "$LIB/libict.a" ]; then
	echo "$name: iC system is configured with incorrect LIB '$LIB'" >&2; exit 125
    fi
else
    echo "$name: iC system is not configured and installed" >&2; exit 126
fi

ldir=" -I/usr/local/include -L$LIB"
ICC=immcc
IAC=immac

usage ()
{
  echo 'Usage:' >&2
  echo "  $name [-[l|o<exe>|i|t|c|b|n]sfgASpRaLjIJ6xqNzh][ -v[<N>]][ -w<dir>]" >&2
  echo '         [ -k<lim>][ -d<opt>][ -O<level>][ -Dmacro[=defn]...][ -Umacro...]' >&2
  echo '         { -L<lx>][ -Cmacro[=defn]...][ -Vmacro...][ -Pmacro[=defn]...]' >&2
  echo '         [ -W[no-]<warn>...] file ...' >&2
  echo '     default:	link all iC files file.ic ... into independent executables' >&2
  echo '		output names are base names of the iC files (file ...)' >&2
  echo '	-l	link all iC files into one executable (implies -A -f)' >&2
  echo '		default: output name is base name of the first iC file' >&2
  echo '		complete listing of all files is in first.lst' >&2
  echo "	-o<exe>	place output in file 'exe' (implies -l if first option)" >&2
  echo '		complete listing of all files is in exe.lst' >&2
  echo "	-i	generate iC file.ic .. only (runs $IAC pre-compiler only)" >&2
  echo '	-t	generate listings file.lst .. only (-o target.lst optional)' >&2
  echo '	-c	generate C outputs file.c ... only (-o target.c optional)' >&2
  echo '	-b	generate both listings and C outputs - no executable' >&2
  echo "	-n	generate no output, report $ICC compile errors only" >&2
  echo '	-s	link with static library libict.a (default libict.so)' >&2
  echo "	-L<lx>	link extra library(s) eg lm lrt ...(can be used more than once)" >&2
  echo '	-e	link all targets with -lefence to test with Electric Fence' >&2
  echo "	-f	force building of new output files" >&2
  echo '	-g	debugging with gdb - profiling with gprof - each expression has' >&2
  echo '		its own C code - forces -s -- link with static library libict.a' >&2
  echo '	-A	compile output ARITHMETIC ALIAS nodes for symbol debugging' >&2
  echo '	-S	use strict - immediate variables must be declared (default)' >&2
  echo "		forces $IAC to only accept twin braces in FOR ... {{ }}" >&2
  echo '	-N	no strict - deprecated style - undeclared variables imm bit' >&2
  echo '	-p	pedantic: warning if variable contains $ (default: $ allowed)' >&2
  echo '	-pp	pedantic-error: error if variable contains $' >&2
  echo '	-O <level> optimisation -O0 none -O1 bit -O2 arithmetic -O4 eliminate' >&2
  echo '		   duplicate arithmetic expressions -O7 all (default)' >&2
  echo '	-R	no maximum error count (default: abort after 100 errors)' >&2
  echo "	-P<macro> predefine <macro> for $IAC pre-compiler. iC target base name" >&2
  echo '		  is extended by the -P option. eg -P E=2 x.ica, target is x_E_2.ic' >&2
  echo '	-D<macro> predefine <macro> for the iC preprocessor phase' >&2
  echo '		  iC base name for generated files .lst and .c is extended' >&2
  echo '		  by the -D option. eg -D F=3 y.ic, list file is y_F_3.lst' >&2
  echo '	-U<macro> cancel previous definition of <macro> for the iC phase' >&2
  echo '		  Note: do not use the same macros for the iC and the C phase' >&2
  echo '	-C<macro> predefine <macro> for the C preprocessor phase. Name of executable' >&2
  echo '		  is extended by the -C option. eg -C G=4 z.ic, executable is z_G_4' >&2
  echo '	-V<macro> cancel previous definition of <macro> for the C phase' >&2
  echo '	-a	list iC preprocessor commands %define %include etc as comments' >&2
  echo '		list iCa FOR loop control lines and %%define etc as comments' >&2
  echo '	-W[no-]<warn>                  positive/negative warning options' >&2
  echo '	    -W[no-]deprecated-logic    use of && || ! in pure bit expressions' >&2
  echo '	    -W[no-]function-parameter  unused parameters in functions' >&2
  echo '	    -W[no-]function-delete     delete before function re-definition' >&2
  echo '	    -W[no-]deprecated          [none]/all of the above' >&2
  echo '	    -W[no-]undefined-gate      undefined gate' >&2
  echo '	    -W[no-]unused-gate         unused gate' >&2
  echo '	    -W[no-]all                 [no]/all warnings + -Wall for C compile' >&2
  echo "	-F	generate auxiliary 'file.log' for debugging $IAC translation" >&2
  echo '	-k<lim>	highest I/O index (default: no limit; 63 for -c mode)' >&2
  echo '		if lim <= 63, mixed byte, word and long indices are tested' >&2
  echo '		default: any index for bit, byte, word or long is allowed' >&2
  echo '	-E	store error output of iC and C compile in file.ini' >&2
  echo '	-j	append output of an initial run to file.ini      (implies -s)' >&2
  echo '	-I	append output of run INITIALIZATION only to file.ini  ( " -s)' >&2
  echo '	-J	append output of full INITIALIZATION info to file.ini ( " -s)' >&2
  echo '	-6	produce logic generation listing file.lst6' >&2
  echo '	-x	auxiliary files .iC_list1.h .iC_list2.h not deleted' >&2
  echo '	-q	quiet operation - return status only' >&2
  echo "	-v<N>	use $IAC<N>, $ICC<N>, pplstfix<N> and libict<N>.a in local" >&2
  echo '		directory' >&2
  echo "	-w<dir>	use $IAC, $ICC, pplstfix and libict.a in directory <dir>" >&2
  echo "		(default: use installed $ICC, pplstfix and -lict)" >&2
  echo "	-d<opt>	call $ICC with extra -d<opt> orred into normal -d474" >&2
  echo "	-y	No nice with calls of $ICC, $CC and $IAC compilers" >&2
  echo '		(default: nice)' >&2
  echo '	-z	echo compiler calls with all options for debugging' >&2
  echo '	-h	this help text' >&2
  echo '	$Id: iCmake 1.57 $' >&2
}

lwsock32=""
if [ "$OS" = "Windows_NT" ]; then
    lwsock32=" -lwsock32"
fi
link=0
status=0
files=""
list=""
slist=""
nice="nice "
aux=""
v=""
b=""
#lib="-lict -lrt$lwsock32"
lib="-lict$lwsock32"
libfile="$LIB/libict.so"
L=""
d=" -d474"
D=""
DA=""
CA=""
A=""
S=""
N=""
p=""
P=""
PA=""
F=""
a=""
R=""
force=0
ef=""
ic=""
x=0
l=""
q=0
z=0
k=""
E=""
I=""
C=""
CFL=""
first=""

if $ICC < /dev/null 2>&1| grep -q 'Electric Fence'; then
    ef=" -lefence"
fi

while getopts ":lo:itcbnsL:fegASpRaFk:EjIJ6xqNv:w:d:O:D:U:C:V:P:W:yzh" opt; do
    case $opt in
    l )	link=1
	aux=" -L"			# generate aux files with 'immcc -L' for linking
	if [ -z "$A" ]; then
	    A=" -A"			# must have ARITH ALIAS for linking
	    d="$d$A"
	fi
	;;
    o ) if [ $link -eq 0 ]; then	# don't necessarily generate aux files
	    link=1
	    aux=" -L"			# generate aux files with 'immcc -L' for linking
	    if [ -z "$A" ]; then
		A=" -A"			# must have ARITH ALIAS for linking
		d="$d$A"
	    fi
	fi
	if [ -n "$OPTARG" ]; then
	    first=$OPTARG
	    base=${first%.*}
	    if [ "$first" = "$base.ic" -o "$first" = "$base.ih" ]; then
		echo "$name: parameter error - target -o '$first' is probably an iC source" >&2
		exit 1
	    fi
	else
	    echo "$name: parameter error - no target name for -o option" >&2
	    exit 2
	fi
	;;
    i )	ic="ica";;
    t )	link=2;;
    c )	link=3; d="$A$S$N$R$k";;
    b ) link=4;;
    n ) link=5; d="$A$S$N$R$k";;
    s ) lib="$LIB/libict.a$lwsock32"; libfile="$LIB/libict.a";;
    L ) L="$L -$OPTARG";;
    f )	force=1;;
    e ) ef=" -lefence";;
    g ) d="$d -g"; CFL="$CFL -g -pg"; lib="$LIB/libict.a$lwsock32"; libfile="$LIB/libict.a";;
    A )	if [ -z "$A" ]; then A=" -A"; d="$d$A"; fi;;
    S )	if [ -z "$S" ]; then S=" -S"; d="$d$S"; fi;;
    N )	if [ -z "$N" ]; then N=" -N"; d="$d$N"; fi;;
    p )	if [ -z "$p" ]; then p=" -p"; fi; d="$d$p";;	# allows -pp => -p -p (-pedantic cannot handle generated C files)
    R )	if [ -z "$R" ]; then R=" -R"; d="$d$R"; fi;;
    a ) a=" -a";;
    F ) F=" -l x.log";;			# dummy string changed later
    k ) case "$OPTARG" in
	1*|2*|3*|4*|5*|6*|7|8|9)
	    k=" -k$OPTARG"; d="$d$k";;
	esac
	;;
    E )	E=" > ";;
    j )	I=440;;
    I )	I=540;;
    J )	I=500;;
    6 )	d="$d -d2"; l="6";;
    x )	d="$d -d4000"; x="1";;
    q )	q=1;;
    v ) if [ -z "$b" ]; then
	    b="./"
	fi
	lib="${b}libict$OPTARG.a$lwsock32"
	libfile="${b}libict$OPTARG.a"
	ldir=""
	v="$OPTARG"
	;;
    w ) OPTARG=${OPTARG%/}
	if [ ! -d "$OPTARG/" ]; then
	    echo "$name: -w '$OPTARG/' is not a directory" >&2
	    exit 254;
	fi
	b="$OPTARG/"
	if [ -z "$v" ]; then
	    lib="${b}libict.a$lwsock32"
	    libfile="${b}libict.a"
	    ldir=""
	fi
	;;
    d ) d="$d -d$OPTARG";;
    O ) d="$d -O$OPTARG";;
    P ) P="$P -P $OPTARG"; Pa=${OPTARG%=*}; PA="${PA}_${Pa}"; if [ $Pa != $OPTARG ]; then Pz=${OPTARG#$Pa=}; PA="${PA}_${Pz}"; fi;;
    D ) D="$D -D $OPTARG"; Da=${OPTARG%=*}; DA="${DA}_${Da}"; if [ $Da != $OPTARG ]; then Dz=${OPTARG#$Da=}; DA="${DA}_${Dz}"; fi;;
    U ) D="$D -U $OPTARG";;
    C ) D="$D -C $OPTARG"; C="$C -D $OPTARG"; Ca=${OPTARG%=*}; CA="${CA}_${Ca}"; if [ $Ca != $OPTARG ]; then Cz=${OPTARG#$Ca=}; CA="${CA}_${Cz}"; fi;;
    V ) D="$D -V $OPTARG"; C="$C -U $OPTARG";;
    W ) D="$D -W$OPTARG"; if [ "$OPTARG" = "all" ]; then  CFL="$CFL -Wall"; fi;;
    y ) nice="";;
    z )	z=1;;
    h )	usage; exit 0;;
    \?)	echo "$name: illegal option '-$OPTARG'" >&2; usage; exit 127;;
    esac
done
shift $(($OPTIND - 1))

if [ -n "$L" ]; then
    lib="$lib$L"
fi

if [ -n "$ef" ]; then
    lib="$lib$ef"
fi

rm -f .iC_list1.h .iC_list2.h		# remove left over files from previous make

for arg in $*; do
    lk=$link				# temporary link mode for each file
    base=${arg%.*}
    ext=${arg#$base}
    icaFile="$base.ica"
    icFile="$base.ic"
    ini="$base.ini"
    if [ -n "$E" ]; then
	E=" >> $ini 2>&1"
    fi
    if [ $link -ne 1 ]; then
	rm -f $ini			# also overwritten if error in immac calls below
    fi
    stat=0
    if [ -f $icaFile ]; then
	base="$base$PA"			# extend iC file and follow-on targets by -P options
	icFile="$base.ic"
	ini="$base.ini"
	if [ -n "$E" ]; then
	    E=" >> $ini 2>&1"
	fi
	if [ -n "$F" ]; then
	    F=" -l $base.log"		# will change for every arg once F is set
	fi
	if [ $icaFile -nt $icFile -o $force -ne 0 -a "$ext" != '.ic' ]; then
	    if [ -w $icFile ]; then
		mv -f $icFile "$icFile.bak"		# backup writable iC file
	    fi
	    if [ $q -eq 0 ]; then
		if [ $z -eq 1 ]; then echo -n "# "; fi
		echo $icFile
	    fi
	    if [ $z -eq 1 ]; then
		echo "$nice${b}$IAC$v$a$S$N$P$F -o $icFile $icaFile$E"	# may be copy if no iCa constructs
	    fi
	    if [ -n "$E" ]; then					# translate iCa to iC file
		if $nice${b}$IAC$v$a$S$N$P$F -o $icFile $icaFile > $base.err 2>&1; then e=0; else e=1; fi
		if [ -s $base.err ]; then
		    mv $base.err $ini		# old overwritten if warnings or errors
		else
		    rm $base.err
		fi
	    else
		if $nice${b}$IAC$v$a$S$N$P$F -o $icFile $icaFile; then e=0; else e=1; fi
	    fi
	    if [ $e -eq 1 ]; then
		if [ -n "$E" ]; then
		    echo "${b}$IAC$v compile errors in '$icaFile' - incorrect iC file '$icFile' generated" >> $ini
		else
		    echo "${b}$IAC$v compile errors in '$icaFile' - incorrect iC file '$icFile' generated" >&2
		fi
		stat=1
		let status+=20			# immac error
	    fi
	fi
    elif [ -f $icFile ]; then
	if [ $z -eq 1 ]; then
	    echo "if ! $nice${b}$IAC$v$S$N -t $icFile$E;"	# may be copy if no iCa constructs
	fi
	if [ -n "$E" ]; then					# translate iCa to iC file
	    if $nice${b}$IAC$v$S$N -t $icFile >> $base.err 2>&1; then e=0; else e=1; fi
	    if [ -s $base.err ]; then
		mv $base.err $ini		# old overwritten if warnings or errors
	    else
		rm $base.err
	    fi
	else
	    if $nice${b}$IAC$v$S$N -t $icFile; then e=0; else e=1; fi
	fi
	if [ $e -eq 1 ]; then
	    if [ -n "$E" ]; then
		echo "$? '$icFile' should be renamed '$icaFile' because it has iCa constructs" > $ini
	    else
		echo "$? '$icFile' should be renamed '$icaFile' because it has iCa constructs" >&2
	    fi
	    stat=1
	    let status+=20			# immac error
	fi
    fi
    if [ -n "$ext" ]; then
	case $ext in
	.lst )	lk=2;;
	.lst6 )	lk=2; d="$d -d2"; l="6";;
	.c )	lk=3; d="$A$S$N$R$k";;
	.ic )	;;
	.ica )	;;
	* )	echo "$name: *** bad file extension '$ext' in '$arg'" >&2; usage; exit 127;;
	esac
    fi

    if [ -f "$icFile" -a -z "$ic" -a "$stat" -eq 0 ]; then
	base="$base$DA"			# extend generated files .lst .c by -D options
	cFile="$base.c"
	lstFile="$base.lst$l"
	exe="$base$CA"			# extend executable and .ini by -C options
	if [ "$ini" != "$exe.ini" ]; then
	    ini="$exe.ini"		# ini file uses new exe file name as base
	    if [ -n "$E" ]; then
		E=" >> $ini 2>&1"
	    fi
	fi
	case $lk in
	0)				# default
	    stat=0
	    if [ "$icFile" -nt "$cFile" -o $force -ne 0 ]; then
		if [ $q -eq 0 ]; then
		    if [ $z -eq 1 ]; then echo -n "# "; fi
		    echo "$cFile"
		fi
		rm -f $cFile
		if [ $z -eq 1 ]; then
		    echo "$nice${b}$ICC$v$a$D$d -o $cFile -l $lstFile $icFile$E"
		fi
		if [ -n "$E" ]; then
		    if $nice${b}$ICC$v$a$D$d -o $cFile -l $lstFile $icFile >> $ini 2>&1; then e=0; else e=1; fi
		else
		    if $nice${b}$ICC$v$a$D$d -o $cFile -l $lstFile $icFile; then e=0; else e=1; fi
		fi
		if [ $e -eq 1 ]; then
		    if [ -n "$E" ]; then
			echo "${b}$ICC$v compile errors in '$icFile' - no executable '$exe' generated" >> $ini
		    else
			echo "${b}$ICC$v compile errors in '$icFile' - no executable '$exe' generated" >&2
		    fi
		    stat=1
		    let status+=1
		fi
	    fi
	    if [ "$stat" -eq 0 ]; then	# do sequentially in case C file was already made or library has changed
		if [ "$cFile" -nt "$exe" -o "$libfile" -nt "$exe" -o $force -ne 0 ]; then
		    if [ $q -eq 0 ]; then
			if [ $z -eq 1 ]; then echo -n "# "; fi
			echo $exe
		    fi
		    rm -f $exe
		    if [ $z -eq 1 ]; then
			echo "$nice$CC$CFL -I.$ldir$C -o $exe $cFile $lib$E"
		    fi
		    if [ -n "$E" ]; then
			$nice$CC$CFL -I.$ldir$C -o $exe $cFile $lib 2>&1 | sed -e 's/\/tmp\/[a-zA-Z][a-zA-Z_0-9]*/\/tmp\/x/' >> $ini
		    else
			$nice$CC$CFL -I.$ldir$C -o $exe $cFile $lib 2>&1 | sed -e 's/\/tmp\/[a-zA-Z][a-zA-Z_0-9]*/\/tmp\/x/'
		    fi
		    long=${exe##*/}
		    if [ "$long" = "$exe" ]; then
			exp="./$exe"	# avoid testing exe on another PATH
		    else
			exp="$exe"
		    fi
		    if [ -x $exp ]; then
			if [ -n "$I" ]; then
			    if [ -n "$E" ]; then
				if [ $z -eq 1 ]; then
				    echo "$exp -d$I >> $ini 2>&1"
				fi
				if $exp -d$I >> $ini 2> $exe.err; then e=0; else e=1; fi
				cat $exe.err >> $ini
				rm $exe.err
			    else
				if [ $z -eq 1 ]; then
				    echo "$exp -d$I >> $ini"
				fi
				if $exp -d$I >> $ini; then e=0; else e=1; fi
			    fi
			    if [ $e -eq 1 ]; then
				if [ -n "$E" ]; then
				    echo "run time error in initial execution of '$exe'" >> $ini
				else
				    echo "run time error in initial execution of '$exe'" >&2
				fi
				let status+=1
			    fi
			fi
		    else
			if [ -n "$E" ]; then
			    echo "$CC compile errors in '$cFile' - no executable '$exe' generated" >> $ini
			else
			    echo "$CC compile errors in '$cFile' - no executable '$exe' generated" >&2
			fi
			let status+=1
		    fi
		fi
	    fi ;;
	1)				# -l	link all iC files into one executable
	    if [ "$icFile" -nt "$cFile" -o "$libfile" -nt "$exe" -o $force -ne 0 ]; then
		list="$list $icFile"	# compile and link all if one has changed
	    fi				# or library has changed
	    files="$files $icFile"
	    ;;
	2)				# -t	generate listings file.lst
	    if [ -n "$first" ]; then	# -o <$first> is the name of the listing file 
		base=${first%.*}
		first=''		# -o applied only to first file
	    fi
	    if [ "$icFile" -nt "$lstFile" -o $force -ne 0 ]; then
		if [ $q -eq 0 ]; then
		    if [ $z -eq 1 ]; then echo -n "# "; fi
		    echo "$lstFile"
		fi
		rm -f $lstFile
		if [ $z -eq 1 ]; then
		    echo "$nice${b}$ICC$v$a$D$d -l $lstFile $icFile"
		fi
		if ! $nice${b}$ICC$v$a$D$d -l $lstFile $icFile; then
		    echo "${b}$ICC$v compile errors in '$icFile'" >&2
		    let status+=1
		fi
	    fi ;;
	3)				# -c	generate C outputs file.c
	    if [ -n "$first" ]; then	# -o <$first> is the name of the C output file 
		base=${first%.*}
		first=''		# -o applied only to first file
	    fi
	    if [ "$icFile" -nt "$cFile" -o $force -ne 0 ]; then
		if [ $q -eq 0 ]; then
		    if [ $z -eq 1 ]; then echo -n "# "; fi
		    echo "$cFile"
		fi
		rm -f $cFile
		if [ $z -eq 1 ]; then
		    echo "$nice${b}$ICC$v$D$d -o $cFile $icFile"
		fi
		if ! $nice${b}$ICC$v$D$d -o $cFile $icFile; then
		    echo "${b}$ICC$v compile errors in '$icFile'" >&2
		    let status+=1
		fi
	    fi ;;
	4)				# -b	generate both listings and C outputs
	    if [ -n "$first" ]; then	# -o <$first> is the name of the listing and C output file 
		echo "output file '$first' ignored" >&2
		first=''
	    fi
	    if [ "$icFile" -nt "$cFile" -o "$icFile" -nt "$lstFile" -o $force -ne 0 ]; then
		if [ $q -eq 0 ]; then
		    if [ $z -eq 1 ]; then echo -n "# "; fi
		    echo "$cFile $lstFile"
		fi
		rm -f $cFile $lstFile
		if [ $z -eq 1 ]; then
		    echo "$nice${b}$ICC$v$a$D$d -o $cFile -l $lstFile $icFile"
		fi
		if ! $nice${b}$ICC$v$a$D$d -o $cFile -l $lstFile $icFile; then
		    echo "${b}$ICC$v compile errors in '$icFile'" >&2
		    let status+=1
		fi
	    fi ;;
	5)				# -n	generate no output, report immcc compile errors only
	    if [ $q -eq 0 ]; then
		if [ $z -eq 1 ]; then echo -n "# "; fi
		echo $icFile
	    fi
	    if [ -n "$first" ]; then
		echo "output file '$first' ignored" >&2
		first=''
	    fi
	    if [ $z -eq 1 ]; then
		echo "$nice${b}$ICC$v$D$d $icFile"
	    fi
	    if ! $nice${b}$ICC$v$D$d $icFile; then
		echo "${b}$ICC$v compile errors in '$icFile'" >&2
		let status+=1
	    fi ;;
	esac
    elif [ -z "$ic" ]; then
	if [ -n "$E" ]; then
	    echo "Error: iC file '$icFile' does not exist or is in error" >> $ini
	else
	    echo "Error: iC file '$icFile' does not exist or is in error" >&2
	fi
	list="$list ERROR:$cFile"
	let status+=1
    fi
    if [ -f $ini -a ! -s $ini ]; then rm $ini; fi	# delete zero length ini file
done

if [ $link -eq 1 -a -z "$ic" -a -n "$list" ]; then
    list=""			# $list now collects recompiled .c files for linking
    exe=""
    if [ -n "$first" ]; then	# -o <$first> is the name of the executable
	exe=$first
	ini=$exe
	rm -f $ini
	if [ -n "$E" ]; then
	    E=" >> $ini 2>&1"
	fi
    fi
    for icFile in $files; do	# recompile all files for aux and link
	base=${icFile%.ic}
	icaFile="$base.ica"
	base="$base$DA"			# extend generated files .lst .c by -D options
	cFile="$base.c"
	lstFile="$base.lst$l"
	if [ -z "$exe" ]; then		# change exe and ini only for the first iC file
	    exe="$base$CA"		# extend executable and .ini by -C options
	    if [ "$ini" != "$exe.ini" ]; then
		ini="$exe.ini"		# ini file uses new exe file name as base
		if [ -n "$E" ]; then
		    E=" >> $ini 2>&1"
		fi
	    fi
	    if [ ! -f $icaFile ]; then
		rm -f $ini		# keep $ini if first source is $base.ica
	    fi
	fi
	if [ $q -eq 0 ]; then
	    if [ $z -eq 1 ]; then echo -n "# "; fi
	    echo $cFile
	fi
	rm -f $cFile		# -f in case read only
	if [ $z -eq 1 ]; then
	    echo "$nice${b}$ICC$v$a$D$d$aux -o $cFile -l $lstFile $icFile$E"
	fi
	if [ -n "$E" ]; then
	    if $nice${b}$ICC$v$a$D$d$aux -o $cFile -l $lstFile $icFile >> $ini 2>&1; then e=0; else e=1; fi
	else
	    if $nice${b}$ICC$v$a$D$d$aux -o $cFile -l $lstFile $icFile; then e=0; else e=1; fi
	fi
	if [ $e -eq 1 ]; then
	    list="$list ERROR:"
	    let status+=1
	fi
	list="$list $cFile"
	slist="$slist $lstFile"
    done
    if [ $status -eq 0 ]; then
	rm -f $exe
	if [ $q -eq 0 ]; then
	    if [ $z -eq 1 ]; then echo -n "# "; fi
	    echo "link $exe from$list"
	fi
	if [ -n "$slist" ]; then
	    cat $slist > $exe.tmp	# concatetnate all listings in first listing
	    mv -f $exe.tmp $exe.lst$l
	fi
	echo >> .iC_list2.h		# terminate last line of #define \
	if [ $z -eq 1 ]; then
	    echo "echo >> .iC_list2.h	# terminate last line of #define \\$E"
	    echo "$nice$CC$CFL -I.$ldir$C -o $exe $list $lib$E"
	fi
	if [ -n "$E" ]; then
	    $nice$CC$CFL -I.$ldir$C -o $exe $list $lib 2>&1 | sed -e 's/\/tmp\/[a-zA-Z][a-zA-Z_0-9]*/\/tmp\/x/' >> $ini
	else
	    $nice$CC$CFL -I.$ldir$C -o $exe $list $lib 2>&1 | sed -e 's/\/tmp\/[a-zA-Z][a-zA-Z_0-9]*/\/tmp\/x/'
	fi
	long=${exe##*/}
	if [ "$long" = "$exe" ]; then
	    exp="./$exe"		# avoid testing exe on another PATH
	else
	    exp="$exe"
	fi
	if [ -x $exp ]; then
	    if [ -n "$I" ]; then
		if [ -n "$E" ]; then
		    if [ $z -eq 1 ]; then echo "$exp -d$I >> $ini 2>&1"; fi
		    if $exp -d$I >> $ini 2> $exe.err; then e=0; else e=1; fi
		    cat $exe.err >> $ini
		    rm $exe.err
		else
		    if [ $z -eq 1 ]; then
			echo "$exp -d$I >> $ini"
		    fi
		    if $exp -d$I >> $ini; then e=0; else e=1; fi
		fi
		if [ $e -eq 1 ]; then
		    if [ -n "$E" ]; then
			echo "run time error in initial execution of '$exe'" >> $ini
		    else
			echo "run time error in initial execution of '$exe'" >&2
		    fi
		    let status+=1
		fi
	    fi
	else
	    if [ -n "$E" ]; then
		echo "$CC compile or link errors in '$list' - no executable '$exe' generated" >> $ini
	    else
		echo "$CC compile or link errors in '$list' - no executable '$exe' generated" >&2
	    fi
	    let status+=1
	fi

    else
	if [ -n "$E" ]; then
	    echo "${b}$ICC$v compile errors in '$list'" >> $ini
	else
	    echo "${b}$ICC$v compile errors in '$list'" >&2
	fi
    fi
    if [ -f $ini -a ! -s $ini ]; then rm $ini; fi	# delete zero length ini file
fi

# clean up temporary files generated by immcc compiler unless -x option
if [ $x -ne 1 ]; then
    rm -f .iC_list1.h .iC_list2.h
fi

exit $status

############ POD to generate man page ##################################

=encoding utf8

=head1 NAME

iCmake - make one or more immediate-C applications

=head1 SYNOPSIS

 iCmake [-[l|o<exe>|i|t|c|b|n]sfgASpRaLjIJ6xqNzh][ -v[<N>]][ -w<dir>]
        [ -k<lim>][ -d<opt>][ -O<level>][ -Dmacro[=defn]...][ -Umacro...]
        [ -Cmacro[=defn]...][ -Vmacro...][ -Pmacro[=defn]...]
        [ -W[no-]<warn>...] file ...
   default: link all iC files file.ic ... into independent executables
            output names are base names of the iC files (file ...)
    -l      link all iC files into one executable (implies -A)
            default: output name is base name of the first iC file
            complete listing of all files is in first.lst
    -o<exe> place output in file 'exe' (implies -l if first option)
            complete listing of all files is in exe.lst
    -i      generate iC file.ic .. only (runs immac pre-compiler only)
    -t      generate listings file.lst .. only (-o target.lst optional)
    -c      generate C outputs file.c ... only (-o target.c optional)
    -b      generate both listings and C outputs - no executable
    -n      generate no output, report immcc compile errors only
    -s      link with static library libict.a (default libict.so)
    -L<lx>  link extra library(s) eg lm lrt ...(can be used more than once)
    -e      link all targets with -lefence to test with Electric Fence
    -f      force building of new output files
    -g      debugging with gdb - profiling with gprof - each expression has
            its own C code - forces -s -- link with static library libict.a
    -A      compile output ARITHMETIC ALIAS nodes for symbol debugging
    -S      use strict - immediate variables must be declared (default)
            forces immac to only accept twin braces in FOR ... {{ }}
    -N      no strict - deprecated style - undeclared variables imm bit
    -p      pedantic: warning if variable contains $ (default: $ allowed)
    -pp     pedantic-error: error if variable contains $
    -O <level> optimisation -O0 none -O1 bit -O2 arithmetic -O4 eliminate
               duplicate arithmetic expressions -O7 all (default)
    -R      no maximum error count (default: abort after 100 errors)
    -P<macro> predefine <macro> for immac pre-compiler. iC target base name
              is extended by the -P option. eg -P E=2 x.ica, target is x_E_2.ic
    -D<macro> predefine <macro> for the iC preprocessor phase
              iC base name for generated files .lst and .c is extended
              by the -D option. eg -D F=3 y.ic, list file is y_F_3.lst
    -U<macro> cancel previous definition of <macro> for the iC phase
              Note: do not use the same macros for the iC and the C phase
    -C<macro> predefine <macro> for the C preprocessor phase. Name of executable
              is extended by the -C option. eg -C G=4 z.ic, executable is z_G_4
    -V<macro> cancel previous definition of <macro> for the C phase
    -a      list iC preprocessor commands %define %include etc as comments
            list iCa FOR loop control lines and %%define etc as comments
    -W[no-]<warn>                  positive/negative warning options
        -W[no-]deprecated-logic    use of && || ! in pure bit expressions
        -W[no-]function-parameter  unused parameters in functions
        -W[no-]function-delete     delete before function re-definition
        -W[no-]deprecated          [none]/all of the above
        -W[no-]undefined-gate      undefined gate
        -W[no-]unused-gate         unused gate
        -W[no-]all                 [no]/all warnings + -Wall for C compile
    -F      generate auxiliary 'file.log' for debugging immac translation
    -k<lim> highest I/O index (default: no limit; 63 for -c mode)
            if lim <= 63, mixed byte, word and long indices are tested
            default: any index for bit, byte, word or long is allowed
    -E      store error output of iC and C compile in file.ini
    -j      append output of an initial run to file.ini      (implies -s)
    -I      append output of run INITIALIZATION only to file.ini  ( " -s)
    -J      append output of full INITIALIZATION info to file.ini ( " -s)
    -6      produce logic generation listing file.lst6
    -x      auxiliary files .iC_list1.h .iC_list2.h not deleted
    -q      quiet operation - return status only
    -v<N>   use immac<N>, immcc<N>, pplstfix<N> and libict<N>.a in local
            directory
    -w<dir> use immac, immcc, pplstfix and libict.a in directory <dir>
            (default: use installed immcc, pplstfix and -lict)
    -d<opt> call immcc with extra -d<opt> orred into normal -d474
    -y      No nice with calls of immcc, gcc and immac compilers
            (default: nice)
    -z      echo compiler calls with all options for debugging
    -h      this help text

=head1 DESCRIPTION

B<iCmake> is a shell script to compile iCa and iC sources into C
sources using the B<immac> and B<immcc> compilers.  These in turn
are compiled and linked into an executable iC applications by a C
compiler - currently B<gcc> (this can be changed).

If a source file contains 'FOR loops', 'IF statements' or %%define
macro definitions, it is an iCa language file and should be named
<source>.ica.  This is translated to an iC source file using the
B<immac> pre-compiler, which is then translated into a C source by the
B<immcc> compiler. Otherwise the source should have the extension .ic,
which is translated directly by B<immcc>. If a file with the extension
.ic has iCa constructs a warning is issued and no attempt is made to
tranlsate it with B<immcc> (this would cause serious errors).

Various options allow partial compilation and generation of listings.

returns 0 (true) for no errors or the number of errors (false)

=head1 AUTHOR

John E. Wulff

=head1 BUGS

Email bug reports to B<immediateC@gmail.com> with L<iC Project> in the
subject field.

=head1 SEE ALSO

L<immcc(1)>, L<immac(1)>, L<iClive(1)>, L<iCserver(1)>, L<iCbox(1)>

=head1 COPYRIGHT

COPYRIGHT (C) 2000-2015  John E. Wulff

You may distribute under the terms of either the GNU General Public
License or the Artistic License, as specified in the README file.

For more information about this program, or for information on how
to contact the author, see the README file.

=cut

############ end of POD to generate man page ###########################
