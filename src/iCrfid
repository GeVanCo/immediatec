#!/usr/bin/perl

########################################################################
#
#	Copyright (C) 2014  John E. Wulff
#
#   You may distribute under the terms of either the GNU General Public
#   License or the Artistic License, as specified in the README file.
#
#   For more information about this program, or for information on how
#   to contact the author, see the README file
#
#	iCrfid - GUI to control and indicate I/O from the app rfid
#                This is an alternative to the real I/O available
#		 via a PiFace interface board.
#
########################################################################

use Tk;			# The graphical user interface toolkit perl/Tk
			##                   by Nick Ing-Simmons
use iCmsg;		# Messaging Toolkit: from Advanced Perl Programming
			##                   by Sriram Srinivasan
use strict;
use warnings;

my @ArgNames;		# stores IO names and initialisers in argument list order
my @ChannelNames;	# stores IO names with instance for each registered channel
my $UnitRegistrations;	# stores the registration string
my $nameI;
my $nameQ;
my $chI;
my $chQ;
my $chQvalue	= 0;
my @chQbits	= ( 0, 0, 0, 0, 0, 0, 0, 0, );
my $bits	= 0;
my $prevBits	= 0;

my @bitIndex =	(
    0, 0, 1, 0, 2, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0,	# 0x01 0x02 0x04 0x08
    4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,	# 0x10
    5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 	# 0x20
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 	# 0x40
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 	# 0x80
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
);

########################################################################
#
#	Initialization
#
########################################################################

my $named = $0; $named =~ s#.*[/\\]##;
my $nameo = $named;		# for generating bit map
format STDERR =
Usage:
 @<<<<<[ -bqIOth][ -s <iChost>][ -p <iCport>][ -n <name>][ -i <inst>][ [IQ]Xn]
	$named
	[IQ]Xn	one of Xn or IXn and QXn    (default X2)
	-s host host name of iCserver       (default 'localhost')
	-p port service Port of iCserver    (default '8778')
	-n name registration Name           (default RFID_2)
	-i inst instance ID for this @<<<<< (1 to 3 numeric digits)
				    $named
		no individual instances for [IQ]Xn allowed
	-b      block large Accept and Reject indicators
	-q      quiet - do not report clients connecting and disconnecting
	-I      trace send messages in iCmsg.pm
	-O      trace rcv messages in iCmsg.pm
	-t	trace activity for debugging
	-h	help, ouput this Usage text only
Copyright (C) 2018  John E. Wulff		<immediateC@gmail.com>
							  '@'
$Id: iCrfid 1.1 $ uses Tk-@<<<<<<<<<
							$Tk::VERSION
.

use vars qw($opt_s $opt_p $opt_n $opt_i $opt_b $opt_q $opt_I $opt_O $opt_t $opt_h);
use Getopt::Std;
getopts('s:p:n:i:bqIOth');		# sets $opt_h if -h etc

if ($opt_h) {
    write STDERR; exit(0);		# -h, ouput Usage only
}

my $instance = '';
if (defined $opt_i and $opt_i ne '') {
    if ($opt_i =~ /^\d{1,3}$/) {	# INSTSIZE 3 defined in icc.h
	$instance = "-$opt_i";
	printf STDERR "instance = '$instance'\n" if $opt_t;
    } else {
	warn "$named: badly formed option -i $opt_i - ignored\n";
    }
}

printf STDERR "ARGV:", join(':', @ARGV), ":\n" if $opt_t;

my ($argv);
while ($argv = shift @ARGV) {
    if ($argv =~ m/^([IQ])?X\d+$/) {
	if (not $1) {
	    if ($nameI) {
		goto tooMany;
	    }
	    $nameI = "I$argv";
	    if ($nameQ) {
		goto tooMany;
	    }
	    $nameQ = "Q$argv";
	} elsif ($1 eq 'I') {
	    if ($nameI) {
		goto tooMany;
	    }
	    $nameI = "$argv";
	} elsif ($1 eq 'Q') {
	    if ($nameQ) {
		goto tooMany;
	    }
	    $nameQ = "$argv";
	} else {
	  tooMany:			# cannot fall through to here
	    die "$named: $argv @ARGV: too many Xn arguments (only 1 in and 1 out allowed)\n";
	}
    } else {
	warn "$named: $argv: badly formed ID argument - ignored\n";
    }
}
$nameI = "IX2" unless $nameI;		# default name X2
$nameQ = "QX2" unless $nameQ;
push @ArgNames, "$nameI$instance", "$nameQ$instance";
my $name = $opt_n ? "$opt_n$instance" : "RFID$instance";
printf STDERR "nameI = $nameI, nameQ = $nameQ, name = $name\n" if $opt_t;

########################################################################
#
#	Connect to server and register I/Os
#
#	Inhibit Nagle's algorithm
#
########################################################################

my $host = defined $opt_s ? $opt_s : 'localhost';
my $port = defined $opt_p ? $opt_p : 8778;
$named = $name;			# use individual ID for warnings from now on

iCmsg->inhibit_nagle(1, $opt_I, $opt_O);	# inhibit Nagle's algorithm for real time response
my $conn = iCmsg->connect($host, $port, \&rcvd_msg_from_server);
die "Client '$named' could not connect to $host:$port\n" unless $conn;
print STDERR "iCrfid '$named' connecting at server\n" unless $opt_q;

############# send registration ############################

my $register = 1;		# tested in rcvd_msg_from_server() for registration reply
my $ri = 0;			# registration index used in rcvd_msg_from_server()
$UnitRegistrations = "N$name,S$nameI$instance,R$nameQ$instance,Z";	# registration string
printf STDERR "$named: UnitRegistrations: $UnitRegistrations\n" if $opt_t;
$conn->send_now($UnitRegistrations);
my ($tmsg, $terr) = $conn->rcv_now();		# receive final registration acknowledgment
printf STDERR "$named: Reply: $tmsg\n" if $opt_t;
rcvd_msg_from_server($conn, $tmsg, $terr);	# process final registration acknowledgment

############# registration analysis ########################
$ri == 2 or			# IXn and QXn
    die "$named: $ri: not enough registration replies from iCserver - system error";
$register = 0;
############# correct number of registration replies #######

########################################################################
#
#	Create main window and menus
#
#	NOTE: parameters in -command => [ ] closures are taken from the
#	      time the command was executed - not when event takes place.
#	      Use references to variables instead of value variables to
#	      pass information at run-time.
#
########################################################################

my $mainWindow = MainWindow->new();
$mainWindow->title("$nameo$instance");
$mainWindow->protocol('WM_DELETE_WINDOW', \&quit_program);	# Windows (X) pressed
$mainWindow->bind('<Key-q>',      \&quit_program);		# quit and stop iCserver
$mainWindow->bind('<Key-Q>',      [ \&quit_program, 1 ]);	# quit without stopping iCserver (for testing)

########################################################################
#	Create and display an icon bitmap
########################################################################

my $icon = pack("b48" x 48,
    "................................................",
    "................................................",
    "................................................",
    "................................................",
    "................................................",
    ".............................11111..............",
    "...........................1111111..............",
    "..........................11111111......111.....",
    ".........................111111........11111....",
    ".........................11111........1111111...",
    ".........................11111........1111111...",
    ".........................11111........1111111...",
    ".........................11111.........11111....",
    ".........................11111..........111.....",
    ".........................11111..................",
    "......................11111111111...............",
    "......................11111111111...............",
    "......................11111111111...............",
    "......................11111111111...............",
    "...111111....1111111.....11111........111111....",
    "...111111..111111111.....11111........111111....",
    "...111111.1111111111.....11111........111111....",
    "....1111111111111111.....11111.........11111....",
    "....111111111............11111.........11111....",
    "....1111111..............11111.........11111....",
    "....111111...............11111.........11111....",
    "....11111................11111.........11111....",
    "....11111................11111.........11111....",
    "....11111................11111.........11111....",
    "....11111................11111.........11111....",
    "....11111................11111.........11111....",
    "....11111................11111.........11111....",
    "....11111................11111.........11111....",
    "....11111................11111.........11111....",
    "....11111................11111.........11111....",
    "....11111................11111.........11111....",
    "....11111................11111.........11111....",
    "....11111................11111.........11111....",
    "....11111................11111.........11111....",
    "....11111................11111.........11111....",
    "...1111111..............1111111.......1111111...",
    "...1111111..............1111111.......1111111...",
    "...1111111..............1111111.......1111111...",
    "................................................",
    "................................................",
    "................................................",
    "................................................",
    "................................................",
);
$mainWindow->DefineBitmap('icon' => 48, 48, $icon);
$mainWindow->iconbitmap("icon");	# could use built in bitmap like "Tk" instead

########################################################################
#	Menu bar
########################################################################
my $menuBar = $mainWindow->Frame()->pack(-side => 'top', -fill => 'x');

########################################################################
#	Add button
########################################################################
my $menuAdd  = $menuBar->Button(-text        => ' Add  ',
				-relief      => 'raised',
				-borderwidth => 2,
				-width       => 6,
				-command     => [ \&sendI, '', 1, 0 ],	# Add button release
			       )->pack(-side => 'left', -padx => 2);
$menuAdd ->bind('<ButtonPress>'		     => [ \&sendI,     1, 1 ]);	# Add button press

########################################################################
#	Remove button
########################################################################
my $menuRemv = $menuBar->Button(-text        => 'Remove',
				-relief      => 'raised',
				-borderwidth => 2,
				-width       => 6,
				-command     => [ \&sendI, '', 2, 0 ],	# Remove button release
			       )->pack(-side => 'left', -padx => 2);
$menuRemv->bind('<ButtonPress>'		     => [ \&sendI,     2, 1 ]);	# Remove button press

########################################################################
#	Log button
########################################################################
my $x;
my $menuInfo = $menuBar->Checkbutton(-text   => 'Log',
				-relief      => 'raised',
				-variable    => \$x,
				-selectcolor => 'green3',
				-state       => 'normal',
				-indicatoron => 1,
				-borderwidth => 2,
				-command     => [ \&sendI, '', 0, \$x ],# Inform button change (ref)
			       )->pack(-side => 'left', -padx => 2);

########################################################################
#	Rfid entry
########################################################################
my $rfidText;
my $prevText;
my $entryRfid = $menuBar->Entry(-width        => 11,
				-background   => 'grey94',
				-textvariable => \$rfidText,
			       )->pack(-side  => 'left', -padx => 2);
$entryRfid->focus;
$entryRfid->bind('<KeyPress-Return>'	      => [ \&sendData ]);	# send Rfid data

########################################################################
#	Modified database button
########################################################################
my $menuMod  = $menuBar->Checkbutton(-text   => 'Mod',
				-relief      => 'raised',
				-variable    => \$chQbits[2],
				-selectcolor => 'red',
				-state       => 'disabled',
				-borderwidth => 2,
				-takefocus   => 0,
				-indicatoron => 1,
				-disabledforeground => 'dark red',
			       )->pack(-side => 'left', -padx => 2);

########################################################################
#	Activity display button
########################################################################
my $menuActv = $menuBar->Checkbutton(
				-relief      => 'raised',
				-variable    => \$chQbits[3],
				-selectcolor => 'red',
				-state       => 'disabled',
				-borderwidth => 2,
				-takefocus   => 0,
				-indicatoron => 1,
				-disabledforeground => 'dark red',
			       )->pack(-side => 'left', -padx => 2);

########################################################################
#	Help button
########################################################################
my $menuHelp = $menuBar->Button(-text        => 'Help',
				-relief      => 'raised',
				-borderwidth => 2,
				-command     => [ \&sendI, '', 3, 0 ],	# Help button release
			       )->pack(-side => 'right', -padx => 2);
$menuHelp->bind('<ButtonPress>'		     => [ \&sendI,     3, 1 ]);	# Help button press

my ($canvas, $accept, $reject, $accTxt, $rejTxt);
unless ($opt_b) {
########################################################################
#	Canvas for green Accept circle and red Reject circle
########################################################################
   $canvas = $mainWindow->Canvas(
				 -cursor     => 'left_ptr',
				 -background => 'cornsilk1',
				 -width      => 440,
				 -height     => 200,
				)->pack( -side => 'left', -fill => 'both', -expand => 1,);

   $accept = $canvas->createOval(
				 10, 10,
				 190, 190,
				 -fill       => 'grey94',
				 -outline    => 'black',
				 -width      => 3,
				);

   $accTxt = $canvas->createText(
				 100, 100,
				 -text       => '',
				 -font       => 'ariel 24 bold',
				);

   $reject = $canvas->createOval(
				 250, 10,
				 430, 190,
				 -fill       => 'grey94',
				 -outline    => 'black',
				 -width      => 3,
				);

   $rejTxt = $canvas->createText(
				 340, 100,
				 -text       => '',
				 -font       => 'ariel 24 bold',
				);
}

########################################################################
#
#	Register read events
#
########################################################################

$mainWindow->fileevent($conn->{sock}, 'readable', sub { iCmsg->event_loop(1); });

########################################################################
#
#	Sit in an infinite loop dispatching incoming events.
#
########################################################################

MainLoop();
exit(0);

####### End of main program ############################################

########################################################################
#
#	Send button value on IXn.m
#
########################################################################

sub sendI {
    my (undef, $m, $x) = @_;
    $x = $$x if ref $x;
    printf STDERR "send $nameI.$m$instance '$x'\n" if $opt_t;
    if ($x) {
	$bits |= 1 << $m;
    } else {
	$bits &= ~(1 << $m);
    }
    if ($bits != $prevBits) {
	$prevBits = $bits;
	printf STDERR "%s	< %2d:%d\n", $ChannelNames[$chI], $chI, $bits if $opt_O;
	$conn->send_now("$chI:$bits");		# send latest value
    }
} # sendI

########################################################################
#
#	Send Rfid data on stdout
#
########################################################################

sub sendData {
    print "$rfidText\n";			# send in pipe to rfid app
    $prevText = $rfidText;			# save for mod display
} # sendData

########################################################################
#
#	Receive message from server - adjust outputs - ack registrations
#
########################################################################

sub rcvd_msg_from_server {
    my ($conn, $msg, $err) = @_;
    my ($rejText, $accText);
    if (defined $msg) {
        my $len = length $msg;
	printf STDERR "($len)$msg<\n" if $opt_t;
	if ($len == 0) {
	    $conn->disconnect();
	    print STDERR "iCrfid '$named' disconnected by server\n" unless $opt_q;
	    quit_program(1);
	}
	my ($msg1, $channel, $value, $old, $id, $regId);
	foreach $msg1 (split /,/, $msg) {	# break up comma separated multiple messages
	    if ($msg1 =~ /^(\d+):(-?\d+)$/) {
		$channel = $1;			## receive data as channel:value
		$value   = $2;			## decimal value with optional sign
		if ($channel == $chQ) {
		    $old = $chQvalue;
		    if ($value != $old) {
			my ($diff, $mask, $m);	## only 1 bit array value - no analog values
			goto WrongFormat if $value >= 0x100;	# only 8 bit map allowed
			$diff = $old ^ $value;	# $old initialized to a number for correct XOR
			while ($diff) {		# age old algorithm from CSR days
			    $mask = $diff & -$diff;	# rightmost set bit from diff
			    $m |= $mask;	# mark which bits changed
			    $chQbits[$bitIndex[$mask]] = ($value & $mask) ? 1 : 0;
			    $diff &= ~$mask;	# modify viewable output - clear rightmost bit
			}
			if ($chQbits[2] && ($old & 0x04) == 0) {	# Mod indicator changed
			    if ($chQbits[0]) {
				$rfidText = '   Error  ';			# mod error 'pink'
			    } elsif ($chQbits[1]) {
				$rfidText = $prevText;				# rfidText 'palegreen'
			    }
			    unless ($opt_b) {
				$rejText = 'Error';
				if ($bits & 0x02) {				# IX2.1
				    $accText  = 'Added';
				} elsif ($bits & 0x04) {			# IX2.2
				    $accText  = 'Removed';
				}
			    }
			} elsif (not $opt_b) {
			    $accText  = 'Accept';
			    $rejText  = 'Reject';
			}
			if ($m & 0x03) {	# test only if QX2.0 and QX2.1 changed
			    if ($chQbits[0]) {
				$entryRfid->configure(-background => 'pink');	# Reject QX2.0
				unless ($opt_b) {
				    $canvas->itemconfigure($reject, -fill => 'red');
				    $canvas->itemconfigure($rejTxt, -text => $rejText);
				}
			    } elsif ($chQbits[1]) {
				$entryRfid->configure(-background => 'palegreen'); # Accept QX2.1
				unless ($opt_b) {
				    $canvas->itemconfigure($accept, -fill => 'green');
				    $canvas->itemconfigure($accTxt, -text => $accText);
				}
			    } else {
				$rfidText = '';					# clear entry window
				$entryRfid->configure(-background => 'grey94');
				unless ($opt_b) {
				    $canvas->itemconfigure($reject, -fill => 'grey94');
				    $canvas->itemconfigure($accept, -fill => 'grey94');
				    $canvas->itemconfigure($rejTxt, -text => '');
				    $canvas->itemconfigure($accTxt, -text => '');
				}
			    }
			}
			$chQvalue = $value;	# ready for next message
			printf STDERR "$named: $msg1	> $ChannelNames[$channel]\n" if $opt_t;
			printf STDERR "%s	< %2d:%d\n", $ChannelNames[$channel], $channel, $value if $opt_I;
		    }
		} else {
		    warn "$named: not registered for $msg1 from iCserver - not OK\n";
		}
	    } elsif ($register and $msg1 =~ /^(-?\d+)$/) {
		next if $1 eq '-0';		## null acknowledgment
		$channel = $1;			## receive channel of a registration acknowledgment
		$id = $ArgNames[$ri];		# argument name
		defined $id or
		    die "$named: too many registration acknowledgments from iCserver - system error";
		printf STDERR "$named: $ri: registering '$id' on channel '$channel'\n" if $opt_t;
		$ri++;
		my $dir = '';
		if ($id =~ /^QX/) {
		    if ($channel == 0) {
			warn "$named: trying to register receiver '$id' at channel 0 - error\n";
			next;
		    }
		    $dir = 'R';
		    $chQ = $channel;		# only one Output byte
		    if ($channel < 0) {
			$channel = -$channel;
			printf STDERR "$named: registering receiver '$id' on channel $channel twice - equivalence\n" if $opt_t;
		    }
		}
		elsif ($id =~ /^IX/) {
		    if ($channel == 0) {
			warn "$named: trying to register sender '$id' twice - not allowed\n";
			next;
		    }
		    $dir = 'S';
		    $chI = $channel;		# only one Input byte
		}
		if ($dir) {
		    $ChannelNames[$channel] = "$id";
		    printf STDERR "register: $dir$id channel = $channel\n" if $opt_t;
		}
	    } else {
	      WrongFormat:
		warn "$named: WARNING: '$msg1' out of '$msg' from iCserver has wrong format - ignored";
	    }
	}
    }
} # rcvd_msg_from_server

########################################################################
#
#	Quit program and stop iCserver, which stops all registered apps
#	unless 'Q' is pressed, which is useful for testing disconnect
#
########################################################################

sub quit_program {
    my (undef, $flag) = @_;
    printf STDERR "$named: quit\n" if $opt_t;
    $conn->send_now("X$named") if $conn and not $flag;	# stop iCserver unless 'Q'
    $mainWindow->destroy();
    exit(0);
} # quit_program

__END__

############ POD to generate man page ##################################

=encoding utf8

=head1 NAME

iCrfid - GUI to control and indicate I/O from the app rfid

=head1 SYNOPSIS

 iCrfid[ -bqIOth][ -s <iChost>][ -p <iCport>][ -n <name>][ -i <inst>][ [IQ]Xn]
	[IQ]Xn	one of Xn or IXn and QXn    (default X2)
	-s host host name of iCserver       (default 'localhost')
	-p port service Port of iCserver    (default '8778')
	-n name registration Name           (default RFID_2)
	-i inst instance ID for this iCrfid (1 to 3 numeric digits)
		no individual instances for [IQ]Xn allowed
	-b      block large Accept and Reject indicators
	-q      quiet - do not report clients connecting and disconnecting
	-I      trace send messages in iCmsg.pm
	-O      trace rcv messages in iCmsg.pm
	-t	trace activity for debugging
	-h	help, ouput this Usage text only

=head1 DESCRIPTION

B<iCrfid> is a GUI to provide virtual I/O for the app B<rfid>, which
is compiled from 'rfid.ic', whose I/O is on IX2 and QX2, which is
also the default I/O for B<iCrfid>.

The Rfid USB reader simulates keyboard input on stdin. For every Rfid
card it reads, it transmits a string of 10 decimal digits terminated
by a CR (the data could actually be any text string). The Rfid data is
immediately transmitted by B<iCrfid> on stdout to the app B<rfid> via
a pipe using the following calling sequence:

	iCrfid | rfid

This software can be tested without a Rfid reader by simulating the
Rfid reader with keyboard input.

=head1 AUTHOR

John E. Wulff

=head1 BUGS

Email bug reports to B<immediateC@gmail.com> with L<iC Project> in the
subject field.

=head1 SEE ALSO

L<iCserver(1)>, L<iCbox(1)>

=head1 COPYRIGHT

COPYRIGHT (C) 2000-2012  John E. Wulff

You may distribute under the terms of either the GNU General Public
License or the Artistic License, as specified in the README file.

For more information about this program, or for information on how
to contact the author, see the README file.
