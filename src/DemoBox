#!/usr/bin/perl
########################################################################
#
#	Example 14-1 Simple UI Code
#	Sriram Srinivasan: Advanced Perl p. 224
#
########################################################################

use Tk;					# Slurp the module in
use Msg;
#use strict;

########################################################################
#
#	Connect to server
#
########################################################################

my $host = 'localhost';
my $port = 8080;

my $conn = Msg->connect($host, $port, \&rcvd_msg_from_server);
die "Client could not connect to $host:$port\n" unless $conn;
print "Connection successful.\n";

########################################################################
#
#	Create main window
#
########################################################################

my $mainWindow = MainWindow->new();
$mainWindow->title("iC Demo Box");
$mainWindow->Label(-text => "iC Demo Box")->pack;

$mainWindow->Button(-text => "Exit",
            -command => sub { exit },
	   )->pack(-side   => 'bottom', 
		   -expand => 1,
		   -fill   => 'x',
		  );

my $inputs  = $mainWindow->Frame(
				)->pack(-side   => 'left', 
				        -expand => 'y',
				        -fill   => 'y',
				       );
$inputs->Label(-text => 'inputs',)->pack;

my $outputs = $mainWindow->Frame(
				)->pack(-side   => 'right', 
				        -expand => 'y',
				        -fill   => 'y',
				       );
$outputs->Label(-text => 'outputs',)->pack;

########################################################################
#
#	Generate many Checkbuttons
#
########################################################################

my @input;
my $index = 0;
foreach my $input (qw(I0 I1 I2 I3 I4 I5 I6 I7)) {  

    $makeCheckbutton = "\
	\$inputs->Checkbutton(\
		-text     => \$input,\
		-variable => \\\$input[\$index],\
		-command  => sub {\
				print \"Sending msg $index\\n\";\
				\$conn->send_now(\"$index,\$input[$index]\");\
			     },\
	)->pack(-side   => 'top',\
		-anchor => 'w',\
		-expand => 1,\
	);\
    ";

    eval $makeCheckbutton;
    print $@;
    $index++;
}

my @output;
my $index = 0;
foreach my $output (qw(O0 O1 O2 O3 O4 O5 O6 O7)) {  

    $makeCheckbutton = "\
	\$outputs->Checkbutton(\
		-text     => \$output,\
		-variable => \\\$output[\$index],\
#		-state    => 'disabled',\
		-command  => sub {\
				print \"Inverting output $index\\n\";\
				\$output[$index] = [1,0]->[\$output[$index]];\
			     },\
	)->pack(-side   => 'top',\
		-anchor => 'e',\
		-expand => 1,\
	);\
    ";

    eval $makeCheckbutton;
    print $@;
    $output[$index] = 0;
    $index++;
}

########################################################################
#
#	Idle execution
#
########################################################################

$mainWindow->fileevent($conn->{sock}, 'readable', sub { });

########################################################################
#
#	Sit in an infinite loop dispatching incoming events.
#
########################################################################

# MainLoop;

while (Tk::MainWindow->Count) {
    DoOneEvent(0);
    # print "#";
    Msg->event_loop(1);
}
# print "\nQuit\n";
$mainWindow->fileevent($conn->{sock}, 'readable', undef);
$conn->disconnect();
Msg->event_loop();

########################################################################
#
#	receive message from server
#
########################################################################

sub rcvd_msg_from_server {
    my ($conn, $msg, $err) = @_;
    if (defined $msg) {
        my $len = length ($msg);
        print "($len)$msg\n";
	my ($index, $value) = split /,/, $msg;
	print "$index $value $output[$index]\n";
	$output[$index] = $value;
    }
}
