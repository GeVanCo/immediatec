#!/usr/bin/perl
########################################################################
#
#	iC generic Demo Box
#	adapted from
#	Example 14-1 Simple UI Code
#	Sriram Srinivasan: Advanced Perl p. 224
#
########################################################################

use Tk;					# Slurp the module in
use Msg;
use strict;

########################################################################
#
#	Initialization
#
########################################################################

my $named = $0; $named =~ s#.*[/\\]##;
format STDERR =
Usage:	@<<<<<< [-s <host>] [-p <port>] [-h] [<unitID>]
	$named
	-s host	ID of server (default 'localhost')
	-p port	service port of server (default '8080')
	unitID	default is 'X0'
	-h	help, ouput this Usage text only
$Id: DemoBox,v 1.16 2000/05/29 13:32:09 jw Exp $
.

use vars qw($opt_s $opt_p $opt_h);
require "getopts.pl";
&Getopts('s:p:h');			# sets $opt_h if -h etc

if ($opt_h) {
    write STDERR; exit 0;	# -h, ouput Usage only
}

########################################################################
#
#	Connect to server
#
########################################################################

my $host = defined $opt_s ? $opt_s : 'localhost';
my $port = defined $opt_p ? $opt_p : 8080;
my $unitID = (@ARGV >= 1) ? $ARGV[0] : 'X0';

my $conn = Msg->connect($host, $port, \&rcvd_msg_from_server);
die "Client could not connect to $host:$port\n" unless $conn;
print "Connection $unitID at client.\n";

$conn->send_now($unitID);		# register I/O

########################################################################
#
#	Create main window and Exit button
#
########################################################################

my $mainWindow = MainWindow->new();
$mainWindow->title("iC");
$mainWindow->Label(-text => "iC Demo Box")->pack;

$mainWindow->Button(-text    => "Exit",
		    -command => sub { exit },
		   )->pack(-side   => 'bottom', 
			   -expand => 1,
			   -fill   => 'x',
			  );

########################################################################
#
#	Generate an input and an output frame
#
########################################################################

my $inFrame  = $mainWindow->Frame(-label       => 'inputs',
				  -relief      => 'groove',
				  -borderwidth => 2,
				 )->pack(-side   => 'left', 
				         -expand => 'y',
				         -fill   => 'y',
				        );

my $outFrame = $mainWindow->Frame(-label       => 'outputs',
				  -relief      => 'groove',
				  -borderwidth => 2,
				 )->pack(-side   => 'right', 
				         -expand => 'y',
				         -fill   => 'y',
				        );

########################################################################
#
#	Generate 8 input checkbuttons and 8 output checkbuttons
#
########################################################################

my @inputs;

for (my $index = 0; $index < 8; $index++) {
    my $input = "I$unitID.$index";
    my $makeCheckbutton = "\
	\$inFrame->Checkbutton(\
	    -text        => \$input,\
	    -variable    => \\\$inputs[\$index],\
	    -selectcolor => 'green',\
	    -command     => sub {\
				 print \"   $index,\$inputs[$index] from $unitID\\n\";\
				 \$conn->send_now(\"$index,\$inputs[$index]\");\
				},\
	)->pack(-side   => 'top',\
		-expand => 1,\
	);\
    ";
    eval $makeCheckbutton;
    print $@;
}

my @outputs;

for (my $index = 0; $index < 8; $index++) {
    my $output = "Q$unitID.$index";
    my $makeCheckbutton = "\
	\$outFrame->Checkbutton(\
	    -text        => \$output,\
	    -variable    => \\\$outputs[\$index],\
	    -selectcolor => 'red',\
#	    -state       => 'disabled',\
	    -takefocus   => 0,\
	    -command     => sub {\
				 print \"Inverting output $index on $unitID\\n\";\
				 \$outputs[$index] = [1,0]->[\$outputs[$index]];\
				},\
	)->pack(-side   => 'top',\
		-expand => 1,\
	);\
    ";
    eval $makeCheckbutton;
    print $@;
    $outputs[$index] = 0;
}

########################################################################
#
#	Register read events
#
########################################################################

$mainWindow->fileevent($conn->{sock}, 'readable', sub { Msg->event_loop(1); });

########################################################################
#
#	Sit in an infinite loop dispatching incoming events.
#
########################################################################

MainLoop;

########################################################################
#
#	Receive message from server - adjust outputs
#
########################################################################

sub rcvd_msg_from_server {
    my ($conn, $msg, $err) = @_;
    if (defined $msg) {
        my $len = length ($msg);
#	print "($len)$msg\n";
	if ($len == 0) {
	    $conn->disconnect();
	    print "DemoBox $unitID disconnected by server\n";
	    exit;
	}
	my ($index, $value) = split /,/, $msg;
#	print "$index $value $outputs[$index]\n";
	$outputs[$index] = $value;
    }
}
__END__

while (Tk::MainWindow->Count) {
    DoOneEvent(0);
    print "#";
}
print "\nQuit\n";
$mainWindow->fileevent($conn->{sock}, 'readable', undef);
$conn->disconnect();
Msg->event_loop();
