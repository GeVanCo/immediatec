#!/bin/bash

########################################################################
#
#	tt - regression tests for iC
#
########################################################################

version()
{
  echo 'Author:	John E. Wulff        <immediateC@gmail.com>' >&2
  echo '$Id: tt 1.43 $' >&2
}

usage()
{
  echo "Usage: $name [-clrgASNP[P]RaLjIJ6x:f:F:yzvh][ -O<level>]" >&2
  echo "          [ -m<txt>][ -d<opt>][ -x<regex>][ -f|F<filter>] <dir1>[ <dir2>]" >&2
  echo '	-m<txt>	place <txt> message in log file just after full date' >&2
  echo '	-d<opt>	call immcc with extra -d<opt> orred into normal -d474' >&2
  echo '	-c	only copy files to <dir1>; must be new, else compare only' >&2
  echo '	-l	list files which differ (default is full Mdiff output with -e)' >&2
  echo '	-w	whitespace (spaces, tabs, blank lines) are significant' >&2
  echo '		default: all whitespace is ignored (opposite to diff)' >&2
  echo '	-x<regex>  in each Mdiff ignore changes in lines that match regex' >&2
  echo '	-f<filter> process the first file in an Mdiff by <filter> before diff' >&2
  echo '	-F<filter> process the second file in an Mdiff by <filter> before diff' >&2
  echo '	-g	each expression has its own C code for debugging with gdb' >&2
  echo '	-A	compile output ARITHMETIC ALIAS nodes for symbol debugging' >&2
  echo '	-S	use strict - immediate variables must be declared (default)' >&2
  echo '	-N	no strict - deprecated style - undeclared variables imm bit' >&2
  echo '	-P	pedantic: warning if variable contains $ (default $ allowed)' >&2
  echo '	-PP	pedantic-error: error if variable contains $' >&2
  echo '	-O <level> optimisation -O0 none -O1 bit -O2 arithmetic -O4 eliminate' >&2
  echo '		duplicate arithmetic expressions -O7 all (default)' >&2
  echo '	-R      no maximum error count (default: abort after 100 errors)' >&2
  echo '	-s	link with static library libict.a (default libict.so)' >&2
  echo '	-e	link all targets with -lefence to test with Electric Fence' >&2
  echo '	-a      immac: output for loop control and %define lines as comments' >&2
  echo '		do an extra run in those test directories which contain iCa files' >&2
  echo '		and make only iCa files and compare them with "<dir1>a"' >&2
  echo '	-L      generate auxiliary 'file.log' for debugging immac translation' >&2
  echo '	-E	store error output of iC and C compile in file.ini' >&2
  echo '	-j	append output of an initial run to file.ini      (implies -s)' >&2
  echo '	-I	append output of run INITIALIZATION only to file.ini  ( " -s)' >&2
  echo '	-J	append output of full INITIALIZATION info to file.ini ( " -s)' >&2
  echo '	-6	produce logic generation listing file.lst6 and file.cc=(cexe.c)' >&2
  echo '	-t <string of directory names for Test1 group> default Test1 Test9 Test11 - Test14' >&2
  echo '	-T <string of directory names for Test2 group> default Test2 - Test8, Test10' >&2
  echo '	-y	No nice with calls of immcc and gcc compilers (default: nice)' >&2
  echo '	-z	echo compiler calls with all options for debugging' >&2
  echo '	-v	author and version information' >&2
  echo '	-h	this help text' >&2
  echo '	--	all further arguments are treated as files' >&2
  echo >&2
  echo "	$name must be called from a directory .T, which is a sub-directory of the" >&2
  echo "	directory in which the iC system is made and in which 'make test' must be called." >&2
  echo "	.T has a number of sub-directories Test1, Test2, Test3 .. Test14 containg iC sources." >&2
  echo "	Each iC source is made with iCmake, generating different files." >&2
  echo >&2
  echo "	<dir1> or <dir1>_<opt> are sub-directories of directory" >&2
  echo "	Test1, Test2, Test3 .. Test9 (however many exist)" >&2
  echo "	<dir1> will be created if it does not exist and generated" >&2
  echo "	files copied to it; if <dir1> exists, the generated files" >&2
  echo "	will be compared with files in <dir1> with Mdiff -kLe" >&2
  echo "	If no <dir1> is specified no files will be copied or compared" >&2
  echo >&2
  echo "	If <dir2> is specified and exists and <dir1> does not exist" >&2
  echo "	<dir1> will be created and only changed files will be copied to <dir1>." >&2
  echo "	The others will be soft links from <dir1> to <dir2>" >&2
  echo
  echo "	If <dir2> is specified and <dir1> exists all files in <dir1>" >&2
  echo "	will be compared with all files in <dir2> with Mdiff -kLe" >&2
  echo >&2
  echo "	If <dir2> is an absolute path, it must be the base of" >&2
  echo "	another set of directories Test1, Test2, Test3 .. Test9" >&2
  version
}

########################################################################
#
#	main
#
########################################################################

name=${0##*/}
name=${name%.*}

m=""
v=""
d=""
l="Le"
x=""
f=""
F=""
P=""
c=""
e=""
ao="x"
A=""
L=""
E=""
I=""
g=""
pd="pd"
pg="pg"
T="test"
z=""
head=""
test1=""
test2=""
Test1='Test1 Test9 Test11 Test12 Test13 Test14'
Test2='Test2 Test3 Test4 Test5 Test6 Test7 Test8 Test10'

while getopts ":cm:d:lwgASNO:PRseaLEjIJ6x:f:F:t:T:yzvh" opt; do
    case $opt in
    c )	c="c";;
    m )	m="$OPTARG";;
    d ) v="$v -d$OPTARG"; d="_$OPTARG";;
    l )	l="${l}l";;
    w )	l="${l}w";;
    g )	A="$A -g";;
    A )	A="$A -A";;
    S )	A="$A -S";T="strict";;
    N )	A="$A -N";;
    O )	A="$A -O$OPTARG";;
    P )	if [ -z "$P" ]; then P=" -P";T="pedantic";x="$x -IC.OUTPUT -I__GNUC__ -I__extension__ -I#endif"; fi;A="$A$P";;	# allows -PP => -P -P
    R )	A="$A -R";;
    s )	A="$A -s";;
    e )	A="$A -e";e=" -I Electric.Fence";;
    a )	ao=a;;
    L )	L=" -L";;
    E ) E=" -E";;
    j ) I=" -j";;
    I ) I=" -I";;
    J ) I=" -J";;
    6 ) A="$A -6";g="6"; pd="p6"; pg="p6"; x="$x -Iic[045]\."; d="_6";;	# only remove and make p6.lt fiiles
    x )	x="$x -I$OPTARG";;
    f )	f="/home/archiv/bin/$OPTARG"; if [[ ! -x $f ]]; then echo "-f '$f' must be executable" >&2; usage; exit 126; fi; f=" -f$f";;
    F )	F="/home/archiv/bin/$OPTARG"; if [[ ! -x $F ]]; then echo "-F '$F' must be executable" >&2; usage; exit 126; fi; F=" -F$F";;
    t )	test1="$OPTARG";;
    T )	test2="$OPTARG";;
    y )	A="$A -y";;
    z )	v="$v -z";z="z";;
    v )	version; exit 0;;
    h )	usage; exit 0;;
    \?)	echo "$name: illegal option '-$OPTARG' >&2"; usage; exit 127;;
    esac
done

if [ -z "$test1" -a -z "$test2" ]; then
    test1="$Test1 $Test2"	# do all directories with mm test2=$Test2
else
    T=""		# do not execute 'make test'
fi
for t in $test1; do
    if [ !  -d "$t" ]; then
	echo "ERROR: '$t' is not a directory; in group '$test1'" >&2
	exit
    fi
done
for t in $test2; do
    if [ !  -d "$t" ]; then
	echo "ERROR: '$t' is not a directory; in group '$test2'" >&2
	exit
    fi
done

echo; date
echo "$name $@"
if [ -n "$m" ]; then
    echo "== -m\"$m\" =="
fi
shift $(($OPTIND - 1))

l="$l$x$f$F"
if [ -n "$z" ]; then
    echo "c = !$c! A = !$A! I = !$I! E = !$E! m = !$m! v = !$v! d = !$d! l = !$l! g = !$g! pd = !$pd! pg = !$pg!"
fi

d1=$1
d1=${d1%/}
d2=$2
d2=${d2%/}
d3=${d2#/}
if [ "$d2" = "$d3" ]; then
    # relative path
    d3="../$d2"
else
    # absolute path
    d3="$d2/\$t/$d1"
fi

if [ -z "$d" -a -z "$c" -a -n "$d1" -a -z "$d2" -a -n "$T" ]; then
    cd ..
    echo; echo "========== Test0 make $T"; echo
    make $T
    cd -
fi

cd $t;
if [ -n "$d2" -a -d "$d2$d" -a -n "$d1" -a ! -d "$d1$d" ]; then
    head="$d2$d"
    d2=""
fi
cd ..;

if [ -n "$z" ]; then
    echo "d1 = !$d1! d2 = !$d2! d3 = !$d3! head = !$head!"
    echo "test1 !$test1!"
    echo "test2 !$test2!"
fi

if [ -n "$test1" ]; then
    for t in $test1; do
	cd $t
	for a in "$ao" ""; do		# do -a first
	    if [ -n "$a" ]; then
		if [ "$a" = 'x' -o -n "$g" -o ! -f pda.lt ]; then
		    continue		# no -a stuff in this test directory	
		fi
	    fi
	    if [ -z "$d2" ]; then
		if [ -z "$c" ]; then
		    if [ -z "$a" ]; then
			ae=""
		    else
			ae=" -a"
		    fi
		    ml
		    if [ -f $pg.lt -a -s $pg.lt ]; then
			rm -f $(cat $pg.lt)
		    fi
		    echo; echo "========== $t mm$I$E$v$A$L$ae"
		    mm$I$E$v$A$L$ae	# do twice if -a
		    ml
		fi
		if [ -n "$d1" ]; then
		    if [ -d "$d1$a$d" ]; then
			echo; echo "========== $t Mdiff -k$l$e -I'ic[0-6c]\.' -I'[at]+0x' -I 'ld.returned' -I  '(eval' -I '\.go' -I 'syntax.error' -I 'BLTIN' -I 'FUNCTION' \$(cat $pd$a.lt) $d1$a$d"
			if ! Mdiff -$l p*.lt $d1$a$d; then echo "**********"; fi
			Mdiff -k$l$e -I'ic[0-6c]\.' -I'[at]+0x' -I 'ld.returned' -I  '(eval' -I '\.go' -I 'syntax.error' -I 'BLTIN' -I 'FUNCTION' $(cat $pd$a.lt) $d1$a$d
		    else
			mkdir $d1$a$d
			if [ -d "$head" ]; then
			    echo; echo "========== $t link all files from $d1$a$d to $head or beyond"
			    cd $d1$a$d
			    for file in ../$head/*; do
				if [ -L $file ]; then
				    cp -a $file .
				elif [ -f $file ]; then
				    ln -s $file .
				else
				    echo "**** Error: $name has strange file $file - not backed up" >&2
				fi
			    done
			    rm -f $(Mdiff -Lle * ..)	# remove links to files which no longer exist
			    cd ..
			    echo "========== $t cp --remove-destination -p \$(Mdiff -kLel$e -I'ic[0-6c]\.' -I'[at]+0x' -I 'ld.returned' -I  '(eval' -I '\.go' -I 'syntax.error' -I 'BLTIN' -I 'FUNCTION' \$(cat $pd$a.lt) $d1$a$d) $d1$a$d"
			    cp --remove-destination -p $(Mdiff -kLel$e -I'ic[0-6c]\.' -I'[at]+0x' -I 'ld.returned' -I  '(eval' -I '\.go' -I 'syntax.error' -I 'BLTIN' -I 'FUNCTION' $(cat $pd$a.lt) $d1$a$d) $d1$a$d 2> /dev/null
			else
			    echo; echo "========== $t cp -p \$(cat $pd$a.lt) $d1$a$d"
			    cp -p $(cat $pd$a.lt) $d1$a$d
			    cp -p p*.lt $d1$a$d
			fi
		    fi
		fi
	    elif [ -d "$d1$a$d" -a -d "$d2$a$d" ]; then
		cd $d1$a$d
		eval d4="$d3"
		echo; echo "========== $t Mdiff -k$l$e -I'ic[0-6c]\.' -I'[at]+0x' -I 'ld.returned' -I  '(eval' -I '\.go' -I 'syntax.error' -I 'BLTIN' -I 'FUNCTION' $d1$a$d/* $d4$a$d"
		Mdiff -k$l$e -I'ic[0-6c]\.' -I'[at]+0x' -I 'ld.returned' -I  '(eval' -I '\.go' -I 'syntax.error' -I 'BLTIN' -I 'FUNCTION' $(cat ../$pd$a.lt) $d4$a$d
		cd ..
	    else
		echo "ERROR: if two <directories> are specified they must exist" >&2
		usage
		break
	    fi
	    if [ -z "$T" ]; then
		break		# do only first loop if directories are specified in command line
	    fi
	done
	cd ..
    done
fi

if [ -n "$test2" ]; then
    for t in $test2; do
	cd $t
	if [ -z "$d2" ]; then
	    if [ -z "$c" ]; then
		ml
		if [ -f $pg.lt -a -s $pg.lt ]; then
		    rm -f $(cat $pg.lt)
		fi
		echo; echo "========== $t my$I$E$v$A"
		my$I$E$v$A
		ml
	    fi
	    if [ -n "$d1" ]; then
		if [ -d "$d1$d" ]; then
		    echo; echo "========== $t Mdiff -k$l$e -I'ic[0-6c]\.' -I'[at]+0x' -I 'ld.returned' -I  '(eval' -I '\.go' -I 'syntax.error' -I 'BLTIN' -I 'FUNCTION' \$(cat $pd.lt) $d1$d"
		    if ! Mdiff -$l p*.lt $d1$d; then echo "**********"; fi
		    Mdiff -k$l$e -I'ic[0-6c]\.' -I'[at]+0x' -I 'ld.returned' -I  '(eval' -I '\.go' -I 'syntax.error' -I 'BLTIN' -I 'FUNCTION' $(cat $pd.lt) $d1$d
		else
		    mkdir $d1$d
		    if [ -d "$head" ]; then
			echo; echo "========== $t link all files from $d1$d to $head or beyond"
			cd $d1$d
			for file in ../$head/*; do
			    if [ -L $file ]; then
				cp -a $file .
			    elif [ -f $file ]; then
				ln -s $file .
			    else
				echo "**** Error: $name has strange file $file - not backed up" >&2
			    fi
			done
			rm -f $(Mdiff -Lle * ..)	# remove links to files which no longer exist
			cd ..
			echo "========== $t cp --remove-destination -p \$(Mdiff -kLel$e -I'ic[0-6c]\.' -I'[at]+0x' -I 'ld.returned' -I  '(eval' -I '\.go' -I 'syntax.error' -I 'BLTIN' -I 'FUNCTION' \$(cat $pd.lt) $d1$d) $d1$d"
			cp --remove-destination -p $(Mdiff -kLel$e -I'ic[0-6c]\.' -I'[at]+0x' -I 'ld.returned' -I  '(eval' -I '\.go' -I 'syntax.error' -I 'BLTIN' -I 'FUNCTION' $(cat $pd.lt) $d1$d) $d1$d 2> /dev/null
		    else
			echo; echo "========== $t cp -p \$(cat $pd.lt) $d1$d"
			cp -p $(cat $pd.lt) $d1$d
			cp -p p*.lt $d1$d
		    fi
		fi
	    fi
	elif [ -d "$d1$d" -a -d "$d2$d" ]; then
	    cd $d1$d
	    eval d4="$d3"
	    echo; echo "========== $t Mdiff -k$l$e -I'ic[0-6c]\.' -I'[at]+0x' -I 'ld.returned' -I  '(eval' -I '\.go' -I 'syntax.error' -I 'BLTIN' -I 'FUNCTION' $d1$d/* $d4$d"
	    diff -k$l$e -I'ic[0-6c]\.' -I'[at]+0x' -I 'ld.returned' -I  '(eval' -I '\.go' -I 'syntax.error' -I 'BLTIN' -I 'FUNCTION' $(cat ../$pd.lt) $d4$d
	    cd ..
	else
	    echo "ERROR: if two <directories> are specified they must exist" >&2
	    usage
	fi
	cd ..
    done
fi
echo; echo "========== end"

########################################################################
# time tt -AIlO3 -m"m -O3 W338_22 Y309_03" V340e >> icc.tt_V340
# time tt -AIl -m"W339_06 - adjusted for Win" V342 >> icc.tt_V342 2>&1
########################################################################
