#!/bin/bash

########################################################################
#
#	tt - regression tests for iC
#
########################################################################

version()
{
  echo 'Author:	John E. Wulff        <john@je-wulff.de>'
  echo '$Id: tt,v 1.20 2007/03/03 23:12:25 jw Exp $'
}

usage()
{
  echo "Usage: $name [-clASP[P]RiIJ6x:f:F:zvh]" >&2
  echo "          [ -m<txt>][ -d<opt>][ -x<regex>][ -f|F<filter>] <dir1>[ <dir2>]" >&2
  echo '	-m<txt>	place <txt> message in log file just after full date' >&2
  echo '	-d<opt>	call immcc with extra -d<opt> orred into normal -d474' >&2
  echo '	-c	only copy files to <dir1>; must be new, else compare only' >&2
  echo '	-l	list files which differ (default is full Mdiff output with -e)' >&2
  echo '	-x<regex>  in each Mdiff ignore changes in lines that match regex' >&2
  echo '	-f<filter> process the first file in an Mdiff by <filter> before diff' >&2
  echo '	-F<filter> process the second file in an Mdiff by <filter> before diff' >&2
  echo '	-A	compile output ARITHMETIC ALIAS nodes for symbol debugging' >&2
  echo '	-S	strict compile - all immediate variables must be declared' >&2
  echo '	-P	pedantic: warning if variable contains $ (default $ allowed)' >&2
  echo '	-PP	pedantic-error: error if variable contains $' >&2
  echo '	-R      no maximum error count (default: abort after 100 errors)' >&2
  echo '	-i	produce file.ini with load info but no INITIALIZATION' >&2
  echo '	-I	produce file.ini with load info and full INITIALIZATION' >&2
  echo '	-J	produce file.ini without load info but full INITIALIZATION' >&2
  echo '	-6	produce logic generation listing file.lst6 in Test2 etc' >&2
  echo '	-z	echo compiler calls with all options for debugging' >&2
  echo '	-v	author and version information'
  echo '	-h	this help text' >&2
  echo '	--	all further arguments are treated as files' >&2
  echo
  echo "	$name must be called from a directory, which has a number of" >&2
  echo "	sub-directories Test1, Test2, Test3 .. Test9 containg iC sources." >&2
  echo "	Each iC source is made with iCmake, generating different files." >&2
  echo
  echo "	<dir1> or <dir1>_<opt> are sub-directories of directory" >&2
  echo "	Test1, Test2, Test3 .. Test9 (however many exist)" >&2
  echo "	<dir1> will be created if it does not exist and generated" >&2
  echo "	files copied to it; if <dir1> exists, the generated files" >&2
  echo "	will be compared with files in <dir1> with Mdiff -kLe" >&2
  echo "	If no <dir1> is specified no files will be copied or compared" >&2
  echo
  echo "	If <dir2> is specified all files in <dir1> will be" >&2
  echo "	compared with all files in <dir2> with Mdiff -kLe" >&2
  echo
  echo "	If <dir2> is an absolute path, it must be the base of" >&2
  echo "	another set of directories Test1, Test2, Test3 .. Test9" >&2
  version
}

########################################################################
#
#	main
#
########################################################################

name=${0##*/}
name=${name%.*}

m=""
v=""
d=""
l="Le"
x=""
f=""
F=""
P=""
c=""
A=""
I=""
g=""
G=""
T="test"

while getopts ":cm:d:lASPRiIJ6x:f:F:zvh" opt; do
    case $opt in
    c )	c="c";;
    m )	m="$OPTARG";;
    d ) v="$v -d$OPTARG"; d="_$OPTARG";;
    l )	l="${l}l";;
    A )	A="$A -A";;
    S )	A="$A -S";;
    P )	if [ -z "$P" ]; then P=" -P";T="pedantic";x="$x -IC.OUTPUT -I__GNUC__ -I__extension__ -I#endif"; fi;A="$A$P";;	# allows -PP => -P -P
    R )	A="$A -R";;
    i ) I=" -i";;
    I ) I=" -I";;
    J ) I=" -J";;
    6 ) g="6"; G=" -6"; x="$x -Iic[045]\."; d="_6";;
    x )	x="$x -I$OPTARG";;
    f )	f="/home/archiv/bin/$OPTARG"; if [[ ! -x $f ]]; then echo "-f '$f' must be executable" >&2; usage; exit 126; fi; f=" -f$f";;
    F )	F="/home/archiv/bin/$OPTARG"; if [[ ! -x $F ]]; then echo "-F '$F' must be executable" >&2; usage; exit 126; fi; F=" -F$F";;
    z )	v="$v -z";;
    v )	version; exit 0;;
    h )	usage; exit 0;;
    \?)	echo "$name: illegal option '-$OPTARG'"; usage; exit 127;;
    esac
done
shift $(($OPTIND - 1))

l="$l$x$f$F"
# echo "c = !$c! A = !$A! I = !$I! m = !$m! v = !$v! d = !$d! l = !$l! g = !$g! G = !$G!"

d1=$1
d1=${d1%/}
d2=$2
d2=${d2%/}
d3=${d2#/}
if [ "$d2" = "$d3" ]; then
    # relative path
    d3="../$d2"
else
    # absolute path
    d3="$d2/\$t/$d1"
fi

echo; date
if [ -n "$m" ]; then
    echo "== $m =="
fi

if [ -z "$d" -a -z "$c" -a -n "$d1" -a -z "$d2" ]; then
    echo; echo "========== Test0 make $T"; echo
    make $T
fi

for t in Test1 Test9; do
    if [ -d "$t" -a -z "$g" ]; then
	cd $t
	if [ -z "$d2" ]; then
	    if [ -z "$c" ]; then
		rm -f $(cat pg.lt)
		echo; echo "========== $t mm$I$v$A"
		mm$I$v$A
		ml
	    fi
	    if [ -n "$d1" ]; then
		if [ -d "$d1$d" ]; then
		    Rdiff p*.lt
		    echo; echo "========== $t Mdiff -k$l \$(cat pd.lt) $d1$d"
		    Mdiff -k$l $(cat pd.lt) $d1$d
		else
		    mkdir $d1$d
		    echo; echo "========== $t cp -p \$(cat pd.lt) $d1$d"
		    cp -p $(cat pd.lt) $d1$d
		fi
	    fi
	elif [ -d "$d1$d" -a -d "$d2$d" ]; then
	    cd $d1$d
	    eval d4="$d3"
	    echo; echo "========== $t Mdiff -k$l $d1$d/* $d4$d"
	    Mdiff -k$l $(cat ../pd.lt) $d4$d
	    cd ..
	else
	    echo "ERROR: if two <directories> are specified they must exist" >&2
	    usage
	fi
	cd ..
    fi
done

for t in Test2 Test3 Test4 Test5 Test6 Test7 Test8; do
    if [ -d "$t" ]; then
	cd $t
	if [ -z "$d2" ]; then
	    if [ -z "$c" ]; then
		rm -f $(cat p[g$g].lt)
		echo; echo "========== $t my$I$v$A$G"
		my$I$v$A$G
		ml
	    fi
	    if [ -n "$d1" ]; then
		if [ -d "$d1$d" ]; then
		    Rdiff p*.lt
		    echo; echo "========== $t Mdiff -k$l \$(cat p[d$g].lt) $d1$d"
		    Mdiff -k$l $(cat p[d$g].lt) $d1$d
		else
		    mkdir $d1$d
		    echo; echo "========== $t cp -p \$(cat p[d$g].lt) $d1$d"
		    cp -p $(cat p[d$g].lt) $d1$d
		fi
	    fi
	elif [ -d "$d1$d" -a -d "$d2$d" ]; then
	    cd $d1$d
	    eval d4="$d3"
	    echo; echo "========== $t Mdiff -k$l $d1$d/* $d4$d"
	    Mdiff -k$l $(cat ../p[d$g].lt) $d4$d
	    cd ..
	else
	    echo "ERROR: if two <directories> are specified they must exist" >&2
	    usage
	fi
	cd ..
    fi
done
echo; echo "========== end"
