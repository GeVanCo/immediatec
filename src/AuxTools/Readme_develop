
Notes on the development environment of the iC components

	John E. Wulff   19 May 2002

Originally the system was developed under Unix Sytem V (1985 - 1986)
The system was ported to DOS with the MS-C compiler (1987 -1989)
and Borland C++ 3.1 (1990 - 1994) both with the MKS toolkit.

The development environment has been SuSE Linux 4.3 - 8.1 (1995 -2002)
The distribution was tested under Red Hat Linux 7.2 and Debian.

Building the distribution is described in detail in README. The usual
steps followed in Linux projects has been adopted: tar -x, configure,
make, make test, make install.

This builds and installs 5 components from the C sources:

    icc		the stand-alone iC compiler

    icr		an iC compiler with integrated run-time keyboard
		I/O test environment (was used mainly under DOS)

    ict		an iC compiler with integrated run-time TCP/IP
		test environment (used with networking components)

    libict.a	a static library to build stand alone applications
		from iC sources for the TCP/IP support environment

    lmain	lmain only tests the internal C-parser and is not
		required for any other purpose

Additionally a number of Perl scripts are installed to establish
a TCP/IP networking environment for running iC applications:

    iCserver	a network server for communicating I/O components
		with running iC applications (currently 1).

    iCbox	a network client I/O component to generate digital
		or anlog input for an application and to display
		digital or analog output from an application.
		(This is a simulation of real I/O components)

    iClive	a programming and debugging tool for iC applications.
		It provides an edit window in which the text of an iC
		source can be displayed and optionally edited and saved.
		It is also a network client for a running application
		and shows the state of nodes in the running application
		as coloured text and as numerical information.

The netorking components can be used on one computer using 'localhost',
which is the default host name or distributed over several computers using
appropriate host names with the -s <host> option.  The default networking
port is '8778'. Another port can be selected with the -p <port> option.

    iCmake	make one or more iC application(s) from iC source(s).
		Each source file is compiled using 'icc' which
		generates a C file, which in turn is compiled and
		linked with 'libict.a' generating the application.

All components and the generated applications will display detailed
usage texts when called with the -h option.

Scripts:

    configure:	#! /bin/sh
		Generated from autoconf.
		Generates 'Makefile' from 'makefile.in'

    install.sh:	#!/bin/sh
		install script - from X11R5;
		expected by configure and used in 'make install' if
		configure cannot find a better BSD compatible 'install'

    mkinstalldirs:#!/bin/sh
		make directory hierarchy - from Noah Friedman
		Public domain; used in 'make install'

    perlinstall:#!/bin/sh
		install Perl modules in the correct $INC path;
		used in 'make install'

    iCbox:	#!/usr/bin/perl -P
    iClive:	#!/usr/bin/perl -P
    iCmake:	#!/bin/bash
    iCserver:	#!/usr/bin/perl -P

    makeAll:	#!/bin/bash
		calls 'make' with the correct environment to make
		icc, icr, ict, libict.a and lmain
		-q quiet, output only headings and error messages
    		-g compile for debugging and no optimisation (default -O2)
		-h full help text

		calls 'make' with OPT=''  to make icc           (OPT+=YYDEBUG if -c)
		calls 'make' with OPT=RUN to make icr           (OPT+=YYDEBUG if -r)
		calls 'make' with OPT=TCP to make ict           (OPT+=YYDEBUG if -t)
		calls 'make' with OPT=LOAD TCP to make libict.a (OPT+=YYDEBUG if -l)
		calls 'make' with OPT=LMAIN to make lmain       (OPT+=YYDEBUG if -m)
		"make" or "make all" calls makeAll -rm
		"make quiet" calls makeAll -qrm
		use makeAll directly if different options are required

    m:		#!/bin/bash
		make all iC components for debugging and install them
		optionally make all iC applications with the new libict.a

    pplstfix:	#! /usr/bin/perl
		Postprocessor used to fix forward references in
		iC listing files generated by the iC compilers.
		Called from 'icc' and 'ict' while compiling.

Auxiliary scripts for testing compiler outputs

    mklst:	#! /usr/bin/perl
		make a list of files generated by each iC source
		name passed as a parameter; used by 'ml'

    mkpp:	#!/usr/bin/bash
		make (or diff) version files for previous versions
		of the iC system. Uses 'mkv' of John Wulff's version
		control system.  Execute in directory Test2;
		assumes version directories Alex??

    ml:		#!/usr/bin/bash
		make lists for icc compiler tests; uses 'mklst'
		    mklst *.i[ch] > p.lt	# all for copying
		    mklst -d *.i[ch] > pd.lt	# sources, includes and derived for comparing
		    mklst -e *.ic > pe.lt	# executables only
		    mklst -c *.ic > pc.lt	# C files only
		    mklst -i *.ic > pi.lt	# ini files only
		    mklst -l *.ic > pl.lt	# lst files only
		    mklst -6 *.ic > p6.lt	# lst6 files only
		    mklst -p *.ic > pp.lt	# iC files only

    mm:		#!/usr/bin/bash
		Usage: mm [-h] [-v<N>]
		make iC test cases from pm.lt which may specify linking iC's
		pm.lt must be edited manually from pp.lt (.ic files only)
		to reflect those which must be linked into an application

    mo:		#!/usr/bin/bash
    		Usage: mo [-tTrRm] [file ...] # if none uses $(cat pa.lt)
		make an 'ict' compiler for each iC application and
		store the generated text files in directory ListT.
		The generated standard and error outputs are
		stored in the file ListT/Init.out. This information can
		then be diffed with runs of previous versions of
		the iC system. (use Mdiff -k ListT/*.* ListT/Alex.)

		mo -r makes an 'icr' compiler for each application and
		stores the generated text files in ListR

    mpv:	#!/usr/bin/bash
		make (or diff) versions of icc ict and libict.a
		named in a parameter list or all versions;
		assumes version directories Test2/Alex??

    mz:		#!/usr/bin/bash
		Usage: mz [-dh] [-min<MIN>] [-max<MAX>] file ...
		make (or diff) iC applications in previous versions.
		Uses iCmake -v<version> to make individual applications
		This assumes that previous versions of ict<version>,
		pplstfix<version> and libict<version>.a are available.
		(these are made with mpv) assumes version directories
		Test2/Alex??
		if no files are specified uses mm via pm.lt to make
		all the applications in the Test2 directory

$Id: Readme_develop,v 1.8 2004/01/03 11:38:37 jw Exp $
