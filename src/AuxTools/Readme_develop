
Notes on the development environment of the iC components

	John E. Wulff   04 February 2007

Originally the system was developed under Unix Sytem V (1985 - 1986)
The system was ported to DOS with the MS-C compiler (1987 -1989)
and Borland C++ 3.1 (1990 - 1994) both with the MKS toolkit.

The development environment has been SuSE Linux 4.3 - 9.3 (1995 -2005)
The distribution was tested under Red Hat Linux 7.2, Debian Linux and
the Cygwin environment under Windows XP. A native Windows port with
MS Visual C++ and Perl only is under development.

Building the distribution is described in detail in README. The usual
steps followed in Linux projects has been adopted: tar -x, configure,
make, make test, make install.

The compilers required are for C, Yacc and Lex. Building the system
requires Perl 5, Bash, Make and Configure. (Older Sed and Awk scripts
have been converted to Perl scripts). Running iC applications requires
Perl 5 and Bash.

This builds and installs 5 components from the sources:

    immcc	the stand-alone immediate C (iC) compiler

    icr		an iC compiler with integrated run-time keyboard
		I/O test environment (was used mainly under DOS)

    ict		an iC compiler with integrated run-time TCP/IP
		test environment (used with networking components)

    libict.a	a static library to build stand alone applications
		from iC sources for the TCP/IP support environment

    lmain	lmain only tests the internal C-parser and is not
		required for any other purpose

Postprocessor

    pplstfix	Postprocessor used to fix forward references and aliases
		in iC listing files generated by the iC compilers.
		Called from 'immcc', 'icr' and 'ict' while compiling.

Additionally a number of Perl scripts are installed to establish
a TCP/IP networking environment for running iC applications:

    iCbox	a network client I/O component to generate digital
		or anlog input for an iC application and to display
		digital or analog output from an iC application.
		(This is a simulation of real I/O components)

    iCserver	a network server for connecting I/O components
		with running iC applications over TCP/IP.

    iClive	a programming and debugging tool for iC applications.
		It provides an edit window in which the text of an iC
		source can be displayed and optionally edited and saved.
		It is also a network client for a running application
		and shows the state of nodes in the running application
		as coloured text and as numerical information.

The netorking components can be used on one computer using 'localhost',
which is the default host name or distributed over several computers using
appropriate host names with the -s <host> option.  The default networking
port is '8778'. Another port can be selected with the -p <port> option.

    iCmake	make one or more iC application(s) from iC source(s).
		Each source file is compiled using 'immcc' which
		generates a C file, which in turn is compiled and
		linked with 'libict.a' generating the application.

All components and the generated applications will display detailed
usage texts when called with the -h option.

Scripts:

    configure:	#! /bin/sh
		Generated from autoconf. Slightly modified by jw
		Generates 'Makefile' from 'Makefile.in'

    install.sh:	#!/bin/sh
		install script - from X11R5;
		expected by configure and used in 'make install' if
		configure cannot find a better BSD compatible 'install'
		
		Actuall use /usr/bin/install (file-4.13) via /usr/bin/ginstall
		Also use /usr/bin/ranlib

    perlinstall:#!/bin/sh
		install Perl modules in the correct $INC path;
		used in 'make install'

    iCbox:	#!/usr/bin/perl
    iClive:	#!/usr/bin/perl
    iCmake:	#!/bin/bash
    iCserver:	#!/usr/bin/perl
    pplstfix:	#!/usr/bin/perl

    makeAll:	#!/bin/bash
		calls 'make' with the correct environment to make
		immcc, icr, ict, libict.a and lmain
		-q quiet, output only headings and error messages
    		-g compile for debugging and no optimisation (default -O2)
		-h full help text

		calls 'make' with OPT=''  to make immcc         (OPT+=YYDEBUG if -c)
		calls 'make' with OPT=RUN to make icr           (OPT+=YYDEBUG if -r)
		calls 'make' with OPT=TCP to make ict           (OPT+=YYDEBUG if -t)
		calls 'make' with OPT=LOAD TCP to make libict.a (OPT+=YYDEBUG if -l)
		calls 'make' with OPT=LMAIN to make lmain       (OPT+=YYDEBUG if -m)
		"make" or "make all" calls makeAll -rm
		"make quiet" calls makeAll -qrm
		use makeAll directly if different options are required

    comp.pl:	#!/usr/bin/perl
    gram.pl:	#!/usr/bin/perl
    icg.pl:	#!/usr/bin/perl
    pawk.pl:	#!/usr/bin/perl
		4 support scripts for make

    m:		#!/bin/bash
		Make all iC components for debugging and install them.
		For this to work /usr/bin/install and /usr/bin/ranlib must have
		the "set user ID on execution" bit set (chmod +s ... as root).
		Optionally make all iC applications with the new libict.a

Auxiliary scripts for testing compiler outputs

    mklst:	#! /usr/bin/perl
		make a list of files generated by each iC source
		name passed as a parameter; used by 'ml'

    mkpp:	#!/usr/bin/bash
		make (or diff) version files for previous versions
		of the iC system. Uses 'mkv' of John Wulff's version
		control system.  Execute in directory Test2;
		assumes version directories Alex??

    ml:		#!/usr/bin/bash
		make lists for immcc compiler tests; uses 'mklst'
		    p.lt	# all for copying
		    pd.lt	# sources, includes and derived for comparing
		    pe.lt	# executables only
		    pc.lt	# C files only
		    pi.lt	# ini files only
		    pl.lt	# lst files only
		    p6.lt	# lst6 files only
		    pp.lt	# iC files only
		    ps.lt	# iC source files *.ic and *.ih
		    pg.lt	# exe .c .ini .lst .lst6 - generated - may be deleted in source dir
		    -g	pg.lt - exe .c .ini .lst .lst6 - generated files only
		    -n	pn.lt - exe .c .ini .lst .lst6 - generated corpses - no .ic to match

    mm:		#!/usr/bin/bash
		Usage: mm [-h] [-v<N>]
		make iC test cases from pm.lt which may specify linking iC's
		pm.lt must be edited manually from pp.lt (.ic files only)
		to reflect those which must be linked into an application

    mo:		#!/usr/bin/bash
    		Usage: mo [-tTrRm] [file ...] # if none uses $(cat pa.lt)
		make an 'ict' compiler for each iC application and
		store the generated text files in directory ListT.
		The generated standard and error outputs are
		stored in the file ListT/Init.out. This information can
		then be diffed with runs of previous versions of
		the iC system. (use Mdiff -k ListT/*.* ListT/Alex.)

		mo -r makes an 'icr' compiler for each application and
		stores the generated text files in ListR

    mpv:	#!/usr/bin/bash
		make (or diff) versions of immcc ict and libict.a
		named in a parameter list or all versions;
		assumes version directories Test2/Alex??

    mz:		#!/usr/bin/bash
		Usage: mz [-dh] [-min<MIN>] [-max<MAX>] file ...
		make (or diff) iC applications in previous versions.
		Uses iCmake -v<version> to make individual applications
		This assumes that previous versions of ict<version>,
		pplstfix<version> and libict<version>.a are available.
		(these are made with mpv) assumes version directories
		Test2/Alex??
		if no files are specified uses mm via pm.lt to make
		all the applications in the Test2 directory

    tt:		#!/usr/bin/bash
		Regression test of iC compilation of ic sources in Test1 - Test10
		Usage: tt [-clrASP[P]RiIJ6x:f:F:zvh]
		  [ -m<txt>][ -d<opt>][ -x<regex>][ -f|F<filter>] <dir1>[ <dir2>]
		-m<txt>	place <txt> message in log file just after full date
		-d<opt>	call immcc with extra -d<opt> orred into normal -d474
		-c	only copy files to <dir1>; must be new, else compare only
		-l	list files which differ (default is full Mdiff output with -e)
		-r	put Rdiff *.lt output in log file
		-x<regex>  in each Mdiff ignore changes in lines that match regex
		-f<filter> process the first file in an Mdiff by <filter> before diff
		-F<filter> process the second file in an Mdiff by <filter> before diff
		-A	compile output ARITHMETIC ALIAS nodes for symbol debugging
		-S	strict compile - all immediate variables must be declared
		-P	pedantic: warning if variable contains $ (default $ allowed)
		-PP	pedantic-error: error if variable contains $
		-R      no maximum error count (default: abort after 100 errors)
		-i	produce file.ini with load info but no INITIALIZATION
		-I	produce file.ini with load info and full INITIALIZATION
		-J	produce file.ini without load info but full INITIALIZATION
		-6	produce logic generation listing file.lst6 in Test2 etc
		-z	echo compiler calls with all options for debugging
		-h	this help text
		--	all further arguments are treated as files
		tt must be called from a directory, which has a number of
		sub-directories Test1, Test2, Test3 .. Test9 containg iC sources.
		Each iC source is made with iCmake, generating different files.
		<dir1> or <dir1>_<opt> are sub-directories of directory
		Test1, Test2, Test3 .. Test9 (however many exist)
		<dir1> will be created if it does not exist and generated
		files copied to it; if <dir1> exists, the generated files
		will be compared with files in <dir1> with Mdiff -kLe
		If no <dir1> is specified no files will be copied or compared
		If <dir2> is specified and exists and <dir1> does not exist
		<dir1> will be created and only changed files will be coped to <dir1>.
		The others will be soft links from <dir1> to <dir2>
		If <dir2> is specified and <dir1> exists all files in <dir1>
		will be compared with all files in <dir2> with Mdiff -kLe
		If <dir2> is an absolute path, it must be the base of
		another set of directories Test1, Test2, Test3 .. Test9

    $Id: Readme_develop,v 1.12 2007/03/26 12:47:51 jw Exp $
