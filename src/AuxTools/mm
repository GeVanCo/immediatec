#!/bin/bash
########################################################################
#
#	make iC test cases from pm.lt which may specify linking iC's
#
########################################################################

usage ()
{
  echo "Usage:	${0##*/} [-gASRaLNjIJxzh][ -v<N>][ -d<opt>][ -O<level>]" >&2
  echo '	-v<N>	use ict<N> eg ict1 ict2 ... with libict1.a libict2.a ...' >&2
  echo '	-d<opt>	call immcc with extra -d<opt> orred into normal -d474' >&2
  echo '	-g	each expression has its own C code for debugging with gdb' >&2
  echo '	-A	compile output ARITHMETIC ALIAS nodes for symbol debugging' >&2
  echo '	-S	strict compile - all immediate variables must be declared' >&2
  echo '	-P	pedantic: warning if variable contains $ (default $ allowed)' >&2
  echo '	-PP	pedantic-error: error if variable contains $' >&2
  echo '	-O <level> optimisation -O0 none -O1 bit -O2 arithmetic -O4 eliminate' >&2
  echo '		duplicate arithmetic expressions -O7 all (default)' >&2
  echo '	-R      no maximum error count (default: abort after 100 errors)' >&2
  echo '	-a      immac: output for loop control and %define lines as comments' >&2
  echo '	-L      generate auxiliary 'file.log' for debugging immac translation' >&2
  echo '	-N	No nice with calls of immcc and gcc compilers (default: nice)' >&2
  echo '	-j	produce file.ini with load info but no INITIALIZATION' >&2
  echo '	-I	produce file.ini with load info and full INITIALIZATION' >&2
  echo '	-J	produce file.ini without load info but full INITIALIZATION' >&2
  echo '	-x	auxiliary files .iC_list1.h .iC_list2.h not deleted' >&2
  echo '	-z	echo compiler calls with all options for debugging' >&2
  echo '	-h	this help text' >&2
  echo '	uses iCmake -f -v<N> -d<opt> -O<level> to make each line of the list pm.lt' >&2
  echo '	which has mostly individual lines naming one source eg. xxx.ic' >&2
  echo '	but may also have lines like "-l a.ic a1.ic a2.ic" for linking' >&2
  echo 'Author:	John E. Wulff        <john@je-wulff.de>' >&2
  echo '$Id: mm,v 1.20 2009/09/12 09:21:02 jw Exp $' >&2
}

A=" -f"
z=0
I=""

while getopts ":d:gASO:PRaLNjIJ6xzh" opt; do
    case $opt in
    v )	A="$A -v$OPTARG";;
    d ) A="$A -d$OPTARG";;
    g )	A="$A -g";;
    A )	A="$A -A";;
    S )	A="$A -S";;
    O )	A="$A -O$OPTARG";;
    P )	A="$A -P";;
    R )	A="$A -R";;
    a )	A="$A -a";;
    L )	A="$A -L";;
    N )	A="$A -N";;
    j ) I=" -j";;
    I ) I=" -I";;
    J ) I=" -J";;
    x )	A="$A -x";;
    z )	z=1;A="$A -z";;
    h )	usage; exit 0;;
    \?)	echo "$name: illegal option '-$OPTARG'"; usage; exit 127;;
    esac
done
shift $(($OPTIND - 1))

while true; do
    read line
    if [[ -z "$line" ]]; then
	break
    fi
    if [ $z -eq 1 ]; then
	echo "iCmake$I$A $line" >&2
    fi
    iCmake$I$A $line
done < pm.lt 2>&1 | sed '/^\/tmp\/[a-z_A-Z][a-z_A-Z0-9]*\./ s//\/tmp\/x./' > Init.out
rm -rf ic[0-9].*
