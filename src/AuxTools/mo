#!/bin/bash

########################################################################
#
#	make a function version of icr or ict
#
#	make a new icr or ict only if the iC file has functions
#
########################################################################

usage ()
{
    echo 'Usage:	'${0##*/}' [-CTszh] [iCtarget ...]' >&2
    echo 'Must be executed in the iC development environment or one of its subdirectories.' >&2
    echo 'Makes a dedicated icr or ict compiler with integrated arithmetic functions' >&2
    echo 'from iCtarget if iCtarget has arithmetic variables or literal blocks. ' >&2
    echo '	-R	uses icr -c to make a dedicated icr for each iCtarget' >&2
    echo '		output the listings produced to directory ListR' >&2
    echo '	-r	make icr with YYDEBUG -t trace output possible' >&2
    echo '	-T	uses ict -c to make a dedicated ict for each iCtarget' >&2
    echo '		output the listings produced to directory ListT' >&2
    echo '	-t	make ict with YYDEBUG -t trace output possible (default)' >&2
    echo '	-s	make with -DINT_MAX=32767 (make clean; makeAll first)' >&2
    echo '		(on a 16 bit system INT_MAX is 32767 and -s is not required)' >&2
    echo '		simulates compilation for a 16 bit system, which does' >&2
    echo '		no 32 bit arithmetic and rejects QL.. and IL.. I/O unless' >&2
    echo '	-z	make with -DLONG16        (make clean; makeAll first)' >&2
    echo '		produces code for long int arithmetic on a 16 bit system' >&2
    echo 'if no iCtargets are specified, each single entry of file pa.lt is made' >&2
    echo '   outputs the common output to ListR/ListR.out or ListT/ListT.out' >&2
    echo '   restores a plain icr or ict at the end of the test run' >&2
    echo '	-m	make each entry from pm.lt instead of default pa.lt (takes longer)' >&2
    echo '	-h	this help text' >&2
    echo '	$Id: mo,v 1.16 2004/01/14 10:48:22 jw Exp $' >&2
}

ic='ict'
op='Tt'
p='T'
list='pa.lt'

while [ $# -gt 0 ]; do
    case $1 in
    -)	shift; break;;
    -*)	option=${1#?}
	while [ -n "$option" ]; do
	    case "$option" in
	    R*)	ic='icr';op='R';p='R';;
	    r*)	ic='icr';op='Rr';p='R';;
	    T*)	ic='ict';op='T';p='T';;
	    t*)	ic='ict';op='Tt';p='T';;
	    m*)	list='pm.lt';;
	    s*)	op="${op}s";;
	    z*)	op="${op}z";;
	    h*)	usage; exit 255;;
	    *)	echo "unknown flag -$option" >&2
		usage; exit 255;;
	    esac
	    option=${option#?}
	done;;
    *)	break;;
    esac
    shift
done

devp=$(pwd)
while [ -n "$devp" ]; do
    if [ -x $devp/$ic ]; then
	break				# iC compiler found
    fi
    newp=${devp%/*}
    if [ "$newp" = "$devp" ]; then
	break				# in case of C: in Windows
    fi
    devp=$newp
done
if [ ! -x $devp/$ic ]; then
    echo "no '$ic' found in '$(pwd)' or one of its subdirectories" >&2
    echo "maybe you need to make '$ic' first ???" >&2
    exit 254
fi

rm -f /tmp/cexe.c			# just in case
$ic -c < /dev/null			# uses installed iC compiler
mv cexe.c /tmp				# empty cexe.c for comparison

if [ $# != 0 ]; then
    test -d List$p || mkdir List$p;
    for f in $*; do
	file=$f
	base=${file%.*}
	file="$base.ic"
	if [ -f "$file" ]; then
	    if $ic -c -d474 -l List$p/$base.lst $file && ! cmp -s cexe.c /tmp/cexe.c; then
		echo "$file";
		cp -f cexe.c List$p/$base.c
		mv -f cexe.c $devp 2> /dev/null
		cd $devp
		rm -f cexe.o $ic	# new cexe.o too soon for make sometimes
		makeAll -$op 2>&1 | grep -iE '(error|warning|:[0-9]+:)'
		cd - > /dev/null
		if [ -x $devp/$ic ]; then	# use newly generated compiler
		    $devp/$ic -d500 $file > List$p/$base.ini
		else
		    echo "make $ic from $file failed"
		fi
	    else
		rm List$p/$base.lst	# only keep listings with functions or literals
	    fi
	else
	    echo "ERROR: $file does not exist - no $ic made"
	fi
    done
elif [ -f $list ]; then
    test -d List$p || mkdir List$p;
    for f in $(cat $list); do
	file=$f
	base=${file%.*}
	file="$base.ic"
	if [ -f "$file" ]; then
	    if $ic -c -d474 -l List$p/$base.lst $file && ! cmp -s cexe.c /tmp/cexe.c; then
		echo "$file";
		cp -f cexe.c List$p/$base.c
		mv -f cexe.c $devp 2> /dev/null
		cd $devp
		rm -f cexe.o $ic	# new cexe.c too soon for make sometimes
		makeAll -$op 2>&1 | grep -iE '(error|warning|:[0-9]+:)'
		cd - > /dev/null
		if [ -x $devp/$ic ]; then	# use newly generated compiler
		    $devp/$ic -d500 $file > List$p/$base.ini
		else
		    echo "make $ic from $file failed"
		fi
	    else
		rm List$p/$base.lst	# only keep listings with functions or literals
	    fi
	else
	    echo "ERROR: $file does not exist - no $ic made" >&2
	fi
    done > List$p/List$p.out 2>&1;
    if [ -f /tmp/cexe.c ]; then
	cd $devp			# restore plain icr or ict
	cp /tmp/cexe.c .
	rm -f cexe.o $ic		# new cexe.c too soon for make sometimes
	makeAll -$op 2>&1 | grep -iE '(error|warning|:[0-9]+:)'
	cd - > /dev/null
    fi
else
    echo "ERROR: no list of test iC sources '$list' found - no $ic made" >&2
fi
rm -f /tmp/cexe.c			# clean up in case another user wants to use it
