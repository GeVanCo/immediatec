#! /usr/bin/perl

#################################################################
#
#   mkv - MaKe a Version file from $Id strings in a group of files
#
#################################################################

use strict;

my $named = $0;
$named =~ s#.*[/\\]##;		# delete directory names in path
my @argv = ();
my $argv;
format STDERR =
Usage:	@<< [-wh][ -o <out>] file ...
	$named
	-o<out> output version list to <out>   (default stdout)
	-c	git commit -a <out> if -o<out>
		git tag -a <tag> (default incremented previous tag)
	-t<tag>	output '$Revision: <tag> $' (default from file)
	-w	use "what" for identification (default "ident")
	-d	debug output for multiple versions
	-h	this help text
This script is used to produce a sorted parts list (or version
list) of all the sources used in the file(s) named.
The files may be ascii sources or binary objects or executables,
as long a they contain Id strings produced by RCS or CVS.
(With -w the #(@) version strings from "sccs" may be used)
		"@"
Directories and files which do not contain a version string are
silently ignored.
The Id strings are formatted to produce a tabular list.
The list also has an RCS header and subsequent versions should
be maintained under RCS. The version number of the parts list
can then be used as the overall version number of a project.
Different versions of these lists can then be "diffed". This
gives a precise listing of changed files for each increment.
More importantly, since @<< can be used on any executable,
			$named
a list can be produced later from an unknown executable. It is
then known precisely from which version source files it was made.
	Author: J.E. Wulff (immediateC@gmail.com)
					"@"
	$Id: mkv 1.16 $
.

use vars qw($opt_o $opt_t $opt_c $opt_w $opt_d $opt_h);
use Getopt::Long qw(:config no_ignore_case bundling);
GetOptions (
    '<>'  => sub { push(@argv, @_); },	# Transfer file argument to @argv
    'o=s' => \$opt_o,
    't=s' => \$opt_t,
    'c'   => \$opt_c,
    'w'   => \$opt_w,
    'd'   => \$opt_d,
    'h'   => \$opt_h,
);
scalar @ARGV == 0 or die "*** ERROR: $named: '@ARGV' remaining after Getopt::Long Getoptions() ???\n";

if ($opt_h) {
    write STDERR; exit 0;	# -h, ouput Usage only
}

my $ident    = $opt_w ? "what -m" : "ident -q";
my $list     = "";
my $idLine   = "\$Id\$\n";
my $revision = $opt_t ? "\$Revision $opt_t \$" : "";
my %idList   = ();
my ($describe, $file, $version, $rest, $vList);

while ($argv = shift @argv) {
    if (-f $argv) {
	$list .= " $argv";
    } elsif (not -d $argv) {
	warn "*** WARNING: $named: '$argv' must be an existing file\n";
    }
}
length $list > 0 or die "*** ERROR: $named: there must be at least one file to make a version list from\n";

########################################################################
#  Get the previous 'git describe' tag if not dirty (confirms we have git)
#  Unless a tag has been specified manually with the -t <tag> option
#  increment the tag if about to 'commit and tag' (-c) for a release version
########################################################################
if ($describe = qx(git describe --always --dirty 2> /dev/null)) {
    chomp $describe;			# we are in a directory with git
    if ($describe =~ /-dirty$/) {
	$describe = "";			# do not commit a dirty version
    } elsif ($opt_o and not $opt_t) {
	$opt_t = $describe;
	$opt_t =~ s/\.(\d+)(-\d+-g[\da-f]+)?$/.@{[$1+1]}/ if $opt_c;
	$revision = "\$Revision $opt_t \$";
    }
}

########################################################################
#  Execute the 'ident' or 'what' command and analyse the lines returned
########################################################################
open PIPE, "$ident$list |" or die "Can't open '$ident$list' pipe: $!";
while (<PIPE>) {
    chomp;
    if (not $revision and m/\$Revision: /) {
	$revision = $_;
    }
    if (m/^(\t| +\$Id: )([^\$]+)( \$)?$/) {
	($file, $version, $rest) = split " ", $2, 3;
	$file =~ s/,v$//;		# strip RCS ,v extension
	if ($file ne $opt_o) {
	    if (exists $idList{$file}) {
		my ($version0, $rest0);
		my @previous = ();
		$vList = $idList{$file};
		foreach $version0 (keys %$vList) {
		    $rest0    = $$vList{$version0};
		    print "+++ $file	$version	$rest	$version0	$rest0\n" if $opt_d;
		    if ($version0 eq $version) {
			goto Found;
		    } else {
			push @previous, $version0;
		    }
		}
		warn "*** WARNING: $named: '$file' has multiple versions $version @previous\n";
		$idList{$file}{$version} = $rest;	# new version for a previous file
	      Found:;
	    } else {
		$idList{$file}{$version} = $rest;	# new file
	    }
	}
    }
}
close PIPE;
########################################################################
#  Open the optional output file and copy it's Id line
########################################################################
if ($opt_o) {
    if (-f $opt_o) {
	open FH, "$opt_o" or die "*** ERROR: $named: can't open '$opt_o' for reading: $!";
	while (<FH>) {
	    if (m/\$Id: /) {
		$idLine = $_;		# read the Id line from the output file
		last;
	    }
	}
	close FH;
    }
    open STDOUT, ">$opt_o" or die "*** ERROR: $named: can't redirect stdout to '$opt_o': $!";
}
########################################################################
#  Write the output
########################################################################
print "$revision\n" if $revision;
print $idLine;
foreach $file (sort keys %idList) {
    $vList = $idList{$file};
    foreach $version (sort r_numerically keys %$vList) {
	$rest    = $$vList{$version};
	printf("%-15s %-7s %s\n", $file, $version, $rest);
	$file = "";			# for more than 1 revision
    }
}
if ($describe and $opt_c and $opt_o and $opt_t) {
    print STDERR "do you want to commit '$opt_o' with tag '$opt_t' now  y/[n] ? ";
    my $in = <STDIN>;
    if ($in =~ m/^[yY]/) {
	########################################################################
	#  Commit and tag
	########################################################################
	print STDERR "git commit -a -m \"release version $opt_t\"\n";
	system(      "git commit -a -m \"release version $opt_t\"");
	print STDERR "git tag    -a -m \"release version $opt_t\" $opt_t\n";
	system(      "git tag    -a -m \"release version $opt_t\" $opt_t");
    }
}

########################################################################
#
#  Compare version numbers numerically in descending order for sort
#  Branch numbers greater than 2 number groups are put at the end
#  GIT branches are alpha-numeric
#
########################################################################

sub r_numerically {
    my @aa = split /\./, $b;
    my @bb = split /\./, $a;
    my $al = scalar @aa;
    my $bl = scalar @bb;
    ($bl, 2)[$bl <= 2] <=> ($al, 2)[$al <= 2]	# branch > 2 at end
		    ||
		$aa[0] <=> $bb[0]
		    ||
		$aa[1] <=> $bb[1]
		    ||
		$aa[2] cmp $bb[2]
		    ||
		$aa[3] <=> $bb[3]
}
