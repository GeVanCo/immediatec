#! /usr/bin/perl

#################################################################
#
#   Make a list of all files generated from *.ic and *.ica
#
#################################################################

use strict;

my $named = $0;
$named =~ s#.*[/\\]##;		# delete directory names in path
format STDERR =
Usage:	@<<<<<<< [-dgnecilL6paHsh] [-m px.lt] [file ...]
	$named
	-d	output .c .cc .ini .lst .log .ic .ica .ih .iha - for comparisons
	-D	output .c .cc .ini .lst .log .ic .ica .iha - but only if derived from .ica
	-g	output exe .c .cc .ini .lst .lst6 .log - generated - may be deleted in source dir
		also ouput .ic if generated from .ica
	-n	output exe .c .cc .ini .lst .lst6 - generated corpses - no .ic to match
	-e	output only base without extension
	-c	output only base with .c and .cc extension
	-i	output only base with .ini extension
	-l	output only base with .lst extension
	-L	output only base with .log extension
	-6	output only base with .lst6 and .cc extension
	-p	output only base with .ic extension
	-a	output only base with .ica extension
	-H	output only base with .ih or .iha extension (includes)
	-s	output only base with .ic or .ica or .ih or .iha extension
		output .ic only if not generated from .ica (all primary sources)
	-S	output only base with .ica or .iha extension (iCa sources)
	-m	output only base with .ic or .ica unless they occurr in file px.lt
		in which case insert execution lines from px.lt instead
	-M	output only base with .ica unless they occurr in file px.lt
		in which case insert execution lines from px.lt instead
	-h	help, ouput this Usage text only
$Id: mklst,v 1.16 2013/04/19 06:48:33 jw Exp $
.

use vars qw($opt_c $opt_d $opt_D $opt_e $opt_g $opt_i $opt_l $opt_L $opt_n);
use vars qw($opt_6 $opt_p $opt_a $opt_H $opt_s $opt_S $opt_m $opt_M $opt_h);
use Getopt::Std;		# replace require "getopts.pl";
getopts('cdDegilLn6paHsSmMh');	# sets $opt_h if -h etc

if ($opt_h) {
    write STDERR; exit 0;	# -h, ouput Usage only
}

my %pn = ();
my %prev = ();
my %mx = ();
my @ax = ();
my $current = -1;
my $line = 0;
my ($source, $sf, $ln);
my $x_file = "px.lt";
my ($b, $s, $f, $ext);

if ( -f $x_file and -s $x_file and not $opt_n and not $opt_H) {
    if (open (IN, $x_file)) {
	while (<IN>) {
	    while (/(([A-Z_a-z]\w*)\.(ica?))/g) {
		$f = $1;
		$s = $b = $2;
		$ext = $3;
		unless (defined $mx{$f}) {
		    $mx{$f} = $line;	# note first use of source in this line
		    unless (-f $f) {
			if (-e $f) {
			    warn "$named: '$f' referred to in '$x_file' is not a regular file\n";
			} else {
			    warn "$named: '$f' referred to in '$x_file' does not exist\n";
			}
		    }
		}
	    }
	    if ($ext eq "ica" and /-P/) {
		while (/-P\s*(\w+)((=(\w+))?)/g) {
		    $b .= "_$1";
		    $b .= "_$4" if $2;
		}
		$mx{$s} = $b;		# save modified target base for iCa source
	    }
	    push @ax, $_;		# save line for output when first encountered
	    $line++;			# next line
	}
	close(IN);
    } else {
	warn "$named: cannot open pre_defined file $x_file\n";
    }
##    foreach $source (sort keys %mx) { warn "$source	$mx{$source}\n"; }
}

unshift(@ARGV, '-') if !@ARGV;	# use stdin if no further arguments
while ($ARGV = shift @ARGV) {
    if ($opt_n) {					# > pn.lt
	if ($ARGV =~ /^([A-Z_a-z]\w*)\.(lst6?|ini)$/) {	# don't check .c or .log - too dangerous
	    unless (-f "$1.ic" or -f "$1.ica" or $pn{$1}) {
		$pn{$1}++;			# don't output list a second time
		print "$1\n" if -f "$1";	# if no .ic or .ica, the rest are corpses
		print "$1.c\n" if -f "$1.c";
		print "$1.cc\n" if -f "$1.cc";
		print "$1.exe\n" if -f "$1.exe";
		print "$1.ini\n" if -f "$1.ini";
		print "$1.log\n" if -f "$1.log";
		print "$1.lst\n" if -f "$1.lst";
		print "$1.lst6\n" if -f "$1.lst6";
	    }
	}
    } elsif ($opt_H) {					# > ph.lt
	if ($ARGV =~ /^([A-Z_a-z]\w*)\.iha?$/) {
		print "$1.ih\n" if -f "$1.ih";
		print "$1.iha\n" if -f "$1.iha";
	}
    } elsif ($ARGV =~ /^([A-Z_a-z]\w*)\.(i[ch]a?)$/ and not $prev{$1}) {
	$prev{$1}++;				# don't output lists a second time
	$b = $s = $1;
	if ($x_file and defined $mx{$s}) {
	    $b = $mx{$s};			# target base name modified by -P define
	    $prev{$b}++;			# don't output lists a second time
	}
	if ($opt_d) {					# > pd.lt
	    print "$b.c\n" if -f "$b.c";
	    print "$b.cc\n" if -f "$b.cc";
	    print "$b.ic\n" if -f "$b.ic";
	    print "$s.ica\n" if -f "$s.ica";
	    print "$b.ini\n" if -f "$b.ini";
	    print "$b.log\n" if -f "$b.log";
	    print "$b.lst\n" if -f "$b.lst";
	    print "$b.ih\n" if -f "$b.ih";
	    print "$b.iha\n" if -f "$b.iha";
	} elsif ($opt_D) {				# > pda.lt
	    if (-f "$s.ica") {
		print "$b.c\n" if -f "$b.c";
		print "$b.cc\n" if -f "$b.cc";
		print "$b.ic\n" if -f "$b.ic";
		print "$s.ica\n";
		print "$b.ini\n" if -f "$b.ini";
		print "$b.log\n" if -f "$b.log";
		print "$b.lst\n" if -f "$b.lst";
		print "$b.iha\n" if -f "$b.iha";
	    }
	} elsif ($opt_g) {				# > pg.lt
	    print "$b\n" if -f "$b";
	    print "$b.c\n" if -f "$b.c";
	    print "$b.cc\n" if -f "$b.cc";
	    print "$b.exe\n" if -f "$b.exe";
	    print "$b.ic\n" if -f "$s.ica" and -f "$b.ic";
	    print "$b.ini\n" if -f "$b.ini";
	    print "$b.log\n" if -f "$b.log";
	    print "$b.lst\n" if -f "$b.lst";
	    if ($opt_6) {
		print "$b.lst6\n" if -f "$b.lst6";
	    }
	} elsif ($opt_e) {				# > pe.lt
	    print "$b\n" if -f "$b";
	    print "$b.exe\n" if -f "$b.exe";
	} elsif ($opt_c) {				# > pc.lt
	    print "$b.c\n" if -f "$b.c";
	    print "$b.cc\n" if -f "$b.cc";
	} elsif ($opt_i) {				# > pi.lt
	    print "$b.ini\n" if -f "$b.ini";
	} elsif ($opt_l) {				# > pl.lt
	    print "$b.lst\n" if -f "$b.lst";
	} elsif ($opt_L) {				# > pL.lt
	    print "$b.log\n" if -f "$b.log";
	} elsif ($opt_6) {				# > p6.lt
	    print "$b.cc\n" if -f "$b.cc";
	    print "$b.lst6\n" if -f "$b.lst6";
	} elsif ($opt_p) {				# > pp.lt
	    print "$b.ic\n" if -f "$b.ic";
	} elsif ($opt_a) {				# > pa.lt
	    print "$s.ica\n" if -f "$s.ica";
	} elsif ($opt_s or $opt_S or			# > ps.lt ( > pm.lt and pma.lt if no px.lt )
		 $opt_m or $opt_M) {			# > pm.lt and pma.lt
	    $source = '';
	    $sf = ($opt_s or $opt_m) ? 'T' : '';	# force output for -s or -m but not for -S or -M
	    if (-f "$s.ica") {
		$sf = $source = "$s.ica";		# force output for -M if x.ica file
	    } elsif (-f "$b.ic") {
		$source = "$b.ic";
	    }
	    if (($opt_m or $opt_M) and defined ($ln = $mx{$source})) {
		if ($current < $ln) {
		    die "ERROR: bad line '$ln' ($current)" if $ln < $current-1 or $ln >= $line;
		    while (++$current < $ln) {
			print $ax[$current] if $sf;	# include lines without source
		    }
		    print $ax[$current] if $sf;		# line with sources
		}
	    } else {
		print "$source\n" if $sf and $source;	# or source only if not in px.lt or -s;
	    }
	    if ($opt_s) {
		print "$b.ih\n" if -f "$b.ih";
		print "$b.iha\n" if -f "$b.iha";
	    }
	    if ($opt_S) {
		print "$b.iha\n" if -f "$b.iha";
	    }
	} else {					# > p.lt
	    print "$b\n" if -f "$b";
	    print "$b.c\n" if -f "$b.c";
	    print "$b.cc\n" if -f "$b.cc";
	    print "$b.exe\n" if -f "$b.exe";
	    print "$b.ini\n" if -f "$b.ini";
	    print "$b.log\n" if -f "$b.log";
	    print "$b.lst\n" if -f "$b.lst";
	    print "$b.ic\n" if -f "$b.ic";
	    print "$s.ica\n" if -f "$s.ica";
	    print "$b.ih\n" if -f "$b.ih";
	    print "$b.iha\n" if -f "$b.iha";
	}
    }
}
if ($opt_m) {
    while (++$current < $line) {	# works even if $opt_m is not a file
	print $ax[$current];		# include lines without source at end
    }
}
