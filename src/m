#!/bin/bash

usage()
{
    echo "Make various iC components for DEBUGGING and optionally install them" >&2
    echo "Usage $name[ -aclSGPVXrtNmgpuedsyzIih][ -D<OPT>][ -W<OPT>][[ <iCmake_options>] <iC_sources>]" >&2
    echo '		with no option flags make immcc, libict.a and install them' >&2
    echo '	-a	make all - immcc, libict.a, libict.so and install' >&2
    echo '		also make goserver and immag (replacements for iCserver andd immac) if golang' >&2
    echo '		as well as iCpiFace, iCpiPUD, iCpiPWM, and iCpiI2C if on a Raspberry Pi' >&2
    echo '	-c	make immediate C compiler immcc with YYDEBUG' >&2
    echo '	-l	make immediate C static library libict.a with YYDEBUG' >&2
    echo '	-S	make immediate C shared library libict.so WITHOUT YYDEBUG' >&2
    echo '	-G	make goserver and immag (replacements for iCserver and immac) if golang' >&2
    echo '	-P	make iCpiFace and iCpiPUD for Raspberry Pi with YYDEBUG' >&2
    echo '	-V	make iCpiPWM for Raspberry Pi as SUID PWM and serVo program' >&2
    echo '	-X	make iCpiI2C and iCpiPUD for Raspberry Pi with YYDEBUG' >&2
    echo '	-r	make standalone interpreter icr' >&2
    echo '	-t	make standalone interpreter ict' >&2
    echo '	-N	make const test internal constant expression compiler only' >&2
    echo '	-m	make standalone internal C compiler lmain for test' >&2
    echo '    Extra options' >&2
    echo '	-g	compile for debugging and no optimisation (default -O2)' >&2
    echo '	-p	compile and link for profiling with gprof (-pg)' >&2
    echo '	-u	make any compiler targets with Symbol SYUNION option' >&2
    echo '	-e	make all targets with EFENCE option and link with -lefence' >&2
    echo '	-d	make with DEQ - double ended queues are slightly faster' >&2
    echo '	-s	make with INT_MAX=32767 (on a 16 bit system -s is not required)' >&2
    echo '		simulates compilation for a 16 bit system, which does' >&2
    echo '		no 32 bit arithmetic and rejects QL.. and IL.. I/O unless' >&2
    echo '	-y	make with LONG16 (useful for a 16 bit system)' >&2
    echo '		produces code for long int arithmetic on a 16 bit system' >&2
    echo '	-D<OPT>	make all targets with <OPT> defined' >&2
    echo '	-W<OPT>	compile all C sources with -W<OPT> (useful for -Wall)' >&2
    echo '	-z	echo compiler calls with all options for debugging' >&2
    echo "	-I	execute chmod +s /usr/bin/install /usr/bin/ranlib as su once" >&2
    echo "		this is required to run make install as an ordinary user" >&2
    echo '	-i	make install after programs have been updated' >&2
    echo '	-h	this help text' >&2
    echo '	NOTE: if any option is changed, make clean is automatically executed' >&2
    echo "	<iC_sources>  list of iC source files which will be made with iCmake" >&2
    echo 'Author:	John E. Wulff        <immediateC@gmail.com>' >&2
    echo '$Id: m 1.28 $' >&2
}

name=${0##*/}
clSGrtm=''
gpudsyez=''
dw=''
i=''
N=''
P=''
G=''
V=''
X=''
I=''
z=0
o=''

if [ -x /bin/uname ]; then
    cpu=`/bin/uname -m`
    tail=${cpu#"armv"}
    if [[ "$cpu" != "$tail" ]]; then
	o=" OPT=\"-DRASPBERRYPI\""
    fi
fi

while getopts ":aclSNPGVXrtmgpudsyezD:W:Iih" opt; do
    case $opt in
    a ) clSGrtm="${clSGrtm}clSuG";
	if [ -n "$o" ]; then
	    clSGrtm="${clSGrtm}PVX";
	fi
	i="install";;
    c ) clSGrtm="${clSGrtm}c";;
    l ) clSGrtm="${clSGrtm}l";;
    S ) clSGrtm="${clSGrtm}S";;
    G ) clSGrtm="${clSGrtm}G";;
    N ) clSGrtm="${clSGrtm}N";;
    r ) clSGrtm="${clSGrtm}r";;
    t ) clSGrtm="${clSGrtm}t";;
    m ) clSGrtm="${clSGrtm}m";;
    g ) gpudsyez="${gpudsyez}g";;
    p ) gpudsyez="${gpudsyez}p";;
    u ) gpudsyez="${gpudsyez}u";;
    d ) gpudsyez="${gpudsyez}d";;
    s ) gpudsyez="${gpudsyez}s";;
    y ) gpudsyez="${gpudsyez}y";;
    e ) gpudsyez="${gpudsyez}e";;
    z )	gpudsyez="${gpudsyez}z";z=1;;
    D ) dw="$dw -D$OPTARG";;
    W ) dw="$dw -W$OPTARG";;
    N ) N="N";;
    P ) P="P";;
    V ) V="V";;
    X ) X="X";;
    I )
	echo "Enter root:" >&2
	sudo chmod +s /usr/bin/install /usr/bin/ranlib
	echo "chmod +s /usr/bin/install /usr/bin/ranlib" >&2
	echo "Exit  root:" >&2
	sudo -k
	exit
	;;
    i )	i="install";;
    h )	usage; exit 127;;
    \?)	echo "$name: illegal option '-$OPTARG'"; usage; exit 127;;
    esac
done
shift $(($OPTIND - 1))

if [ -n "$P" ]; then
    clSGrtm="${clSGrtm}P"
fi
if [ -n "$V" ]; then
    clSGrtm="${clSGrtm}V"
fi
if [ -n "$X" ]; then
    clSGrtm="${clSGrtm}X"
fi

if [ -z "$clSGrtm" -a -z "$i" ]; then
    clSGrtm="clSu"
    i="install"
fi

if [ -n "$clSGrtm" ]; then
    echo "### ./makeAll -qg$clSGrtm$gpudsyez$dw"
    ./makeAll -qg$clSGrtm$gpudsyez$dw
fi

if [ -n "$i" ]; then
    echo "### make$o install"
    make$o install
fi

for ic; do
    echo "iCmake -As $ic"
    iCmake -As $ic
done
