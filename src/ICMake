#!/usr/bin/ksh -p

########################################################################
#
#	Copyright (C) 2000-2001  John E. Wulff
#
#   You may distribute under the terms of either the GNU General Public
#   License or the Artistic License, as specified in the README file.
#
#   For more information about this program, or for information on how
#   to contact the author, see the README file or <john@je-wulff.de>
#
#	make an executable file from an iC file
#
#	Use cc rather than gcc, to make this script usable on every Unix
#
########################################################################

usage ()
{
    echo 'Usage:	'${0##*/}' [-[l|s|c|b|n]6h] [-v[<N>]] file ...' >&2
    echo '    (default)	link all files into independent executables' >&2
    echo '	-l	link all files into one executable' >&2
    echo '	-s	supress C output and executable, listing only' >&2
    echo '	-c	generate C output only' >&2
    echo '	-b	generate both listing and C output' >&2
    echo '	-n	generate no output, report icc compile errors only' >&2
    echo '		-s and -n generate cexe.c for last file as a side effect' >&2
    echo '	-v	use icc and libict.a in local directory' >&2
    echo '		(default use installed icc and -lict)' >&2
    echo '	-v<N>	use icc<N> eg icc1 icc2 ... with libict1.a libict2.a ...' >&2
    echo '	-6	produce logic generation listing file.lst6' >&2
    echo '		default listing is file.lst' >&2
    echo '	-A	compile output ARITHMETIC ALIAS nodes' >&2
    echo '	-h	this help text' >&2
    echo '	$Id: ICMake,v 1.14 2001/03/11 17:16:32 jw Exp $' >&2
}

link=0
flag=noerror
a=""
v=""
b=""
lib="-lict"
d="-d74"
l=""

while [[ $# > 0 ]]; do
    case $1 in
    -)	shift; break;;
    -*)	option=${1#?}
	while [[ -n "$option" ]]; do
	    case "$option" in
	    l*)	link=1;;
	    s*)	link=2;;
	    c*)	link=3;;
	    b*) link=4;;
	    n*) link=5;;
	    v*)	option=${option#?};
		if [[ -n $option ]]; then
		    v=$option;
		    lib=libict$v.a;
		else
		    lib=libict.a;
		fi
		b="./"
		break;;
	    6*)	d="-d76";l="6";;
	    A*)	d="$d -A";;
	    h*)	usage; exit 255;;
	    *) aflag="-$option"; break;;
	    esac
	    option=${option#?}
	done;;
    *)	break;;
    esac
    shift
done

for f in $*; do
    file=$f
    base=${file%.*}
    if [[ $file = $base ]]; then
	file="$base.ic"
    fi
    if [[ ! -f $file ]]; then
	echo "iC file $file does not exist" >&2
	usage
	exit 1;
    fi
    echo $file

    case $link in
    0)
	rm -f $base.c $base
	if nice ${b}icc$v $d -o $base.c -l $base.lst$l $file; then
	    if nice cc -g -I. -DYYDEBUG -o $base $base.c _list_.c $lib; then
		$base -d540 > $base.ini
	    fi
	else
	    echo "${b}icc$v compile errors in '$file' - no executable '$base' generated" >&2
	fi ;;
    1)
	rm -f $base.c
	if nice ${b}icc$v $a $d -o $base.c -l $base.lst$l $file; then
	    list="$list $base.c"
	else
	    list="$list ERROR:$base.c"
	    flag=error
	fi
	if [[ -z $first ]]; then
	    first=$base
	    a="-a"
	fi ;;
    2)
	if ! nice ${b}icc$v $d -c -l $base.lst$l $file; then
	    echo "${b}icc$v compile errors in '$file'" >&2
	fi ;;
    3)
	rm -f $base.c
	if ! nice ${b}icc$v -o $base.c $file; then
	    echo "${b}icc$v compile errors in '$file'" >&2
	fi ;;
    4)
	rm -f $base.c
	if ! nice ${b}icc$v $d -o $base.c -l $base.lst$l $file; then
	    echo "${b}icc$v compile errors in '$file'" >&2
	fi ;;
    5)
	if ! nice ${b}icc$v -c $file; then
	    echo "${b}icc$v compile errors in '$file'" >&2
	fi ;;
    esac
done

if [[ $link = 1 ]]; then
    if [[ $flag = noerror ]]; then
	rm -f $first
	echo "link $first from$list"
	if nice cc -g -I. -DYYDEBUG -o $first $list _list_.c $lib; then
	    $first -d540 > $first.ini
	fi
    else
	echo "${b}icc$v compile errors in '$list'" >&2
    fi
fi
