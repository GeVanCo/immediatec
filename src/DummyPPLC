#!/usr/bin/perl -w

########################################################################
#
#	Dummy PPLC client for testing ICServer and DemoBox
#
########################################################################

use Msg;
use strict;

########################################################################
#
#	Initialization
#
########################################################################

my $named = $0; $named =~ s#.*[/\\]##;
format STDERR =
Usage:	@<<<<<<<< [-s <host>] [-p <port>] [-h] [<delay>]
	$named
	-s host	ID of server (default 'localhost')
	-p port	service port of server (default '8778')
	delay	random output every <delay> seconds eg 2.5
	-h	help, ouput this Usage text only
$Id: DummyPPLC,v 1.4 2000/11/06 20:30:33 jw Exp $
.

use vars qw($opt_s $opt_p $opt_h);
require "getopts.pl";
&Getopts('s:p:h');			# sets $opt_h if -h etc

if ($opt_h) {
    write STDERR; exit 0;	# -h, ouput Usage only
}

########################################################################
#
#	Connect to server
#
########################################################################

my $host = defined $opt_s ? $opt_s : 'localhost';
my $port = defined $opt_p ? $opt_p : 8778;
my $pplc = 'P0';

my $conn = Msg->connect($host, $port, \&rcvd_msg_from_server);
die "Client could not connect to $host:$port\n" unless $conn;
print "Connection $pplc at client.\n";

$conn->send_now("$pplc");		# register PPLC

########################################################################
#
#	Generate dummy output at intervals governed by optional 2nd arg
#
########################################################################

my $delay = (@ARGV >= 1) ? $ARGV[0] : 0;
my $connected = (length $delay == 0) ? 0 : 1;
$delay += 0.01;		# must have fraction, minimum 0.01 second
    
while ($connected) {
    for my $unitID (qw(X0 X1 X2 X3)) {
	my $x = int rand 8;
	my $y = int rand 2;
	my $msg = "$unitID,$x,$y";
	$conn->send_now($msg);
#	print "$msg from $pplc\n";
    }
    Msg->event_loop($delay);
}
Msg->event_loop();		# in case no outputs

########################################################################
#
#	Receive message from server
#
########################################################################

sub rcvd_msg_from_server {
    my ($conn, $msg, $err) = @_;
    if (defined $msg) {
	if (length $msg != 0) {
	    print "$msg rcvd $pplc\n";
	} else {
	    $conn->disconnect();
	    $connected = 0;
	    print "$pplc disconnected by server\n";
	}
    }
}
