
Notes on the development environment of the iC components

	John E. Wulff   19 May 2002

Originally the system was developed under Unix Sytem V (1985 - 1986)
The system was ported to DOS with the MS-C compiler (1987 -1989)
and Borland C++ 3.1 (1990 - 1994) both with the MKS toolkit.

The development environment has been SuSE Linux 4.3 - 7.2 (1995 -2002)
The distribution was tested under Red Hat Linux 7.2 and Debian.

Building the distribution is described in detail in README. The usual
steps followed in Linux projects has been adopted: tar -x, configure,
make, make test, make install.

This builds and installs three components from the sources:

    icc		the iC compiler with integrated run-time character
		I/O test environment (used mainly under DOS)

    ict		the iC compiler with integrated run-time TCP/IP
		test environment (used with networking components)

    libict.a	a static library to build stand alone applications
		from iC sources for the TCP/IP test environment

Additionally a number of Perl and sh scripts are installed to establish
a TCP/IP networking environment for testing iC applications:

    iCserver	a network server for communicating I/O components
		with running iC applications (currently 1).

    iCbox	a network client I/O component to generate digital
		or anlog input for an application and to display
		digital or analog output from an application.
		(This is a simulation of real I/O components)

    iClive	a programming and debugging tool for iC applications.
		It provides an edit window in which the text of an iC
		source can be displayed and optionally edited and saved.
		It is also a network client for a running application
		and shows the state of nodes in the running application
		as coloured text and as numerical information.

    iCmake	make one or more iC application(s) from iC source(s).
		Each source file is compiled using 'ict' which
		generates a C file, which in turn is compiled and
		linked with 'libict.a' generating the application.

The netorking components can be used on one computer using 'localhost'
or distrubuted over several computers using appropriate host names.
All components and the generated applications will display detailed
usage texts when called with th -h flag.

Scripts:

    configure:	#! /bin/sh
		Generated from autoconf and modified to make 'yacc'
		rather than 'bison' the first choice YACC compiler.
		Generates 'Makefile' from 'makefile.in'

    install.sh:	#!/bin/sh
		install script - from X11R5;
		expected by configure and used in 'make install' if
		configure cannot find a better BSD compatible 'install'

    mkinstalldirs:#!/bin/sh
		make directory hierarchy - from Noah Friedman
		Public domain; used in 'make install'

    perlinstall:#!/bin/sh
		install Perl modules in the correct $INC path;
		used in 'make install'

    iCbox:	#!/usr/bin/perl -P
    iClive:	#!/usr/bin/perl -P
    iCmake:	#!/bin/sh
    iCserver:	#!/usr/bin/perl -w -P

    makeAll:	#!/bin/sh
		calls 'make' with the correct environments to make
		icc, ict and libict.a

    makeIct:	#!/bin/sh
		calls 'make' with OPT=TCP to make ict

    makeLib:	#!/bin/sh
		calls 'make' with OPT=TCP to make libict.a

    pplstfix:	#! /usr/bin/perl -w
		Postprocessor used to fix forward references in
		iC listing files generated by the iC compilers.
		Called from 'icc' and 'ict' while compiling.

Auxiliary scripts for testing compiler outputs

    mklst:	#! /usr/bin/perl
		make a list of files generated by each iC source
		name passed as a parameter; used by 'ml'

    mkpp:	#!/usr/bin/ksh -p
		make (or diff) version files for previous versions
		of the iC system. Uses 'mkv' of John Wulff's version
		control system.  Execute in directory Test;
		assumes version directories Alex??

    ml:		#!/usr/bin/ksh -p
		make lists for icc compiler tests; uses 'mklst'

    mo:		#!/usr/bin/ksh -p
    		Usage: mo [file ...]	# if none uses $(cat pe.lst)
		make an 'ict' compiler for each application and
		store the generated text files in directory ListT.
		The generated standard and error outputs are
		stored in the file OutT. This information can
		then be diffed with runs of previous versions of
		the iC system. (use Mdiff -k ... ListT)

    mp:		#!/usr/bin/ksh -p
    		Usage: mp [file ...]	# if none uses $(cat pe.lst)
		make an 'icc' compiler for each application and
		store the generated text files in directory ListP.
		The generated standard and error outputs are
		stored in the file OutP. This information can
		then be diffed with runs of previous versions of
		the iC system. (use Mdiff -k ... ListP)

    mpv:	#!/usr/bin/ksh -p
		make (or diff) versions of icc ict and libict.a
		named in a parameter list or all versions;
		assumes version directories Test/Alex??

    mz:		#!/usr/bin/ksh -p
		make (or diff) iC applications in previous versions.
		Uses iCmake -v<version> to make individual applications
		This assumes that previous versions of ict<version>,
		pplstfix<version> and libict<version>.a are available.
		(these are made with mpv) assumes version directories
		Test/Alex??

$Id: Readme_develop,v 1.1 2002/06/05 11:29:31 jw Exp $
