/********************************************************************
 *
 *	Lift controller for completed iClift (V98)
 *
 *	immac -P LIFTS=1 -P FLOORS=3 (default)
 *	for any other case use different numbers for Lifts and/or FLOORS
 *	The same number of LIFTS and FLOORS must be selected for iClift.
 *
 *	Any Outside floor select button or inside cage button will
 *	close both doors and move the lift to that floor, reset the
 *	calling button and then open both doors. At that point an
 *	output is generated with flickAny, which will select a random
 *	floor button in iClift - repeating the cycle, if iClift is run
 *	with the continuous option -C (useful for longterm tests).
 *	The continuous option can also be toggled with the Escape Key
 *	in iClift. To re-start continous mode select another floor for
 *	each lift with the floor select buttons.
 *
 * @(#)$Id: lifts.ica 1.4 $
 *
 ********************************************************************/
%define LIFTS	1			/* default number of lifts  - vary with -P LISTS=x */
%define FLOORS	3			/* default number of floors - vary with -P FLOORS=y */
%define FPL	L*(10+((FLOORS-1)/8)*8)	/* current lift times floor group offset */
%define FPLF	FPL+(2+(F/8)*8)		/* offset for per floor components */

use strict;

imm timer t = TIMER(TX0.4);		/* 100 ms timer */
    FOR (L = 0; L < LIFTS; L++) {{

/********************************************************************
 ********************************************************************
 **	Lift '[L+1]' control
 ********************************************************************
 ********************************************************************/

imm int cagePosn[L]  =  IB[FPL+0];
imm bit cageNear[L]  = ~IX[FPL+1].0;
imm bit cageHome[L]  = ~IX[FPL+1].1;
imm bit doorPosn[L]  =  IX[FPL+1].2;
imm bit doorNear[L]  = ~IX[FPL+1].3;
imm bit doorHome[L]  = ~IX[FPL+1].4;
imm bit cageAlarm[L] =  IX[FPL+1].5;	// AL cage alarm button
imm bit closeDoor[L] =  IX[FPL+1].6;	// >< door close button
imm bit openDoor[L]  =  IX[FPL+1].7;	// <> door open button

imm bit underIn[L]   =  IX[FPL+0].0;	// inside door undershoot
imm bit overIn[L]    =  IX[FPL+0].1;	// inside door overshoot
imm bit underOut[L]  =  IX[FPL+0].4;	// outside door undershoot
imm bit overOut[L]   =  IX[FPL+0].5;	// outside door overshoot

imm bit reset[L] = IX[FPL+4].0;	// reset from iClift startup via Floor '0' non-existent down
QX[FPL+4].0 = reset[L];		// down button bit, which does not exist
QX[FPL+1].5 = D(cageAlarm[L]);	// AL button reset
QX[FPL+1].1 = D(underIn[L] | overIn[L] | underOut[L] | overOut[L]);	// turn continuous testing off

imm bit flick[L], fa[L];
	FOR (F = 0; F < FLOORS; F++) {{
imm bit flick[L][F], selFloor[L][F];
	}}
imm bit doorCloseReq[L]  = closeDoor[L] FOR (F = 0; F < FLOORS; F++) {{ | selFloor[L][F] }};
imm bit flickAny[L]      = flick[L]     FOR (F = 0; F < FLOORS; F++) {{ | flick[L][F] }};
QX[FPL+1].0 = ST(fa[L] = SR(flickAny[L] & ~fa[L], flickAny[L] & fa[L] | reset[L]), t, 5);

imm bit doorClosed[L]    = ~doorPosn[L] & doorNear[L] & doorHome[L];
imm bit doorOpened[L]    =  doorPosn[L] & doorNear[L] & doorHome[L];

/********************************************************************
 *	Lift '[L+1]' cage control
 ********************************************************************/

imm int cageTarget[L]    = FOR (F = 0; F < FLOORS; F++) {{ selFloor[L][F] ? [F] : }} cagePosn[L];

imm bit upSlow[L], downSlow[L];	// lift cage

imm bit rightFloor[L]    = cageTarget[L] == cagePosn[L];	// cageTarget[L] =
imm bit nearTarget[L]    = rightFloor[L]  & cageNear[L];	// cagePosn[L]   =
imm bit reachedTarget[L] = rightFloor[L]  & cageHome[L];
imm bit up[L]            = (cageTarget[L] > cagePosn[L]) & ~downSlow[L] & doorClosed[L];
imm bit down[L]          = (cageTarget[L] < cagePosn[L]) & ~upSlow[L]   & doorClosed[L];
        upSlow[L]        = SR(up[L],       reachedTarget[L] | reset[L]);
        downSlow[L]      = SR(down[L],     reachedTarget[L] | reset[L]);
imm bit cageFast[L]      = SR(down[L] | up[L], nearTarget[L] | reset[L]);

QX[FPL+0].0 = up[L];			// show cage up indicator (optional)
QX[FPL+0].1 = down[L];			// show cage down indicator (optional)

QX[FPL+0].5 = upSlow[L];
QX[FPL+0].6 = downSlow[L];
QX[FPL+0].7 = cageFast[L];

/********************************************************************
 *	Lift '[L+1]' inside door control
 ********************************************************************/

imm bit openSlow[L], closeSlow[L];

imm bit doorTarget[L]    = SR(RISE(reachedTarget[L]) | openDoor[L], doorCloseReq[L] | reset[L]);
imm bit rightSide[L]     = doorTarget[L]  ^ ~doorPosn[L];			// same as doorTarget[L] == doorPosn[L]
imm bit nearSide[L]      = rightSide[L] &  doorNear[L];
imm bit reachedSide[L]   = rightSide[L] &  doorHome[L];
imm bit open[L]          =  doorTarget[L] & ~doorPosn[L] & ~closeSlow[L];	// same as doorTarget[L] > doorPosn[L]
imm bit close[L]         = ~doorTarget[L] &  doorPosn[L] & ~openSlow[L];	// same as doorTarget[L] < doorPosn[L]
        openSlow[L]      = SR(open[L],         reachedSide[L] | reset[L]);
        closeSlow[L]     = SR(close[L],        reachedSide[L] | reset[L]);
imm bit doorFast[L]      = SR(open[L] | close[L], nearSide[L] | reset[L]);

QX[FPL+0].2 = openSlow[L];
QX[FPL+0].3 = closeSlow[L];
QX[FPL+0].4 = doorFast[L];

QX[FPL+1].6 = closeDoor[L] & doorClosed[L];	// >< door close button
QX[FPL+1].7 = openDoor[L]  & doorOpened[L];	// <> door open button

flick[L] = RISE(doorPosn[L] & reachedSide[L]);
	FOR (F = 0; F < FLOORS; F++) {{

/********************************************************************
 *	Lift '[L+1]' Floor '[F]' outside door control
 ********************************************************************/

imm bit openSlow[L][F], closeSlow[L][F];

QX[FPLF+0].[F%8] = IX[FPLF+0].[F%8] & reachedTarget[L];		// Floor '[F]' select button inside cage
	    IF (F < FLOORS-1) {{
QX[FPLF+1].[F%8] = IX[FPLF+1].[F%8] & reachedTarget[L];		// Floor '[F]' select button up on outside wall
	    }}
	    IF (F > 0) {{
QX[FPLF+2].[F%8] = IX[FPLF+2].[F%8] & reachedTarget[L];		// Floor '[F]' select button down on outside wall
	    }}
imm bit selFloor[L][F]     = IX[FPLF+0].[F%8] IF (F < FLOORS-1) {{ | IX[FPLF+1].[F%8] }} IF (F > 0) {{ | IX[FPLF+2].[F%8] }};
imm bit reachedFloor[L][F] = QX[FPLF+0].[F%8] IF (F < FLOORS-1) {{ | QX[FPLF+1].[F%8] }} IF (F > 0) {{ | QX[FPLF+2].[F%8] }};

imm bit doorPosn[L][F]     =  IX[FPLF+3].[F%8];
imm bit doorNear[L][F]     = ~IX[FPLF+4].[F%8];
imm bit doorHome[L][F]     = ~IX[FPLF+5].[F%8];

imm bit doorTarget[L][F]   = SR(RISE(reachedFloor[L][F]) | openDoor[L] & (cagePosn[L] == [F]), doorCloseReq[L] | reset[L]);
imm bit rightSide[L][F]    = doorTarget[L][F]  ^ ~doorPosn[L][F];
imm bit nearSide[L][F]     = rightSide[L][F] &  doorNear[L][F];
imm bit reachedSide[L][F]  = rightSide[L][F] &  doorHome[L][F];
imm bit open[L][F]         =  doorTarget[L][F] & ~doorPosn[L][F] & ~closeSlow[L][F];
imm bit close[L][F]        = ~doorTarget[L][F] &  doorPosn[L][F] & ~openSlow[L][F];
        openSlow[L][F]     = SR(open[L][F],         reachedSide[L][F] | reset[L]);
        closeSlow[L][F]    = SR(close[L][F],        reachedSide[L][F] | reset[L]);
imm bit doorFast[L][F]     = SR(open[L][F] | close[L][F], nearSide[L][F] | reset[L]);

QX[FPLF+3].[F%8] = openSlow[L][F];
QX[FPLF+4].[F%8] = closeSlow[L][F];
QX[FPLF+5].[F%8] = doorFast[L][F];

QX[FPLF+6].[F%8] = up[L];		// show outside up indicator
QX[FPLF+7].[F%8] = down[L];		// show outside down indicator

flick[L][F] = RISE(doorPosn[L][F] & reachedSide[L][F]);
	}}
    }}

/********************************************************************
 ********************************************************************
 **	End control
 ********************************************************************
 ********************************************************************/
