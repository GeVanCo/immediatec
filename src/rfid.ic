/********************************************************************
 *
 *	RFID demo for Mini Makers Faire, Powerhouse Museum
 *	16-17 August 2014
 *	16 March 2015	v9	normalised I/O
 *
 *******************************************************************/

imm timer t = TIMER(TX0.4);	// 100 ms

imm bit  eoi = RISE(TX0.0);	// announce end of initialisation

immC bit in0;
immC bit in1;
immC bit in2;

QX2.0 = ST(in0 | eoi, t, 8);	// pulse RED   for 0.8 seconds
QX2.1 = ST(in1, t, 8);		// pulse GREEN for 0.8 seconds
QX2.2 = ST(in2, t, 8);		// pulse QX2.2 for 0.8 seconds
QX2.3 = TX0.5;			// QX2.3 toggling live display

QX2.4 = IX2.0;			// echo button 0
QX2.5 = IX2.1;			// echo button 1
QX2.6 = IX2.2;			// echo button 2
QX2.7 = IX2.3;			// echo button 3

%{
%#include	<stdio.h>
%#include	<stdlib.h>
%#include	<string.h>

%#define	CODES	30
%#define	CODELEN	16

typedef	char	Code[CODELEN];

static Code *	codeBase;
static int	codes = 0;
static int	code = 0;
static int	c;
static int	c1;
static char *	colour;
static char *	Usage = {
"\n  Usage:\n"
"    Swipe a RFID card over the rfid reader:\n"
"      shows RED if card is not recognised\n"
"        press button 1 to add card code to data base\n"
"      shows GREEN if card is recognised\n"
"        press button 2 to remove card code from data base\n"
"    Press ctrl+D or ctrl+C on the keyboard to stop the program\n"
"    Press Button 1 2 and 3 while Button 0 is released to shutdown\n"
};
%}

if (RISE(eoi) | IX2.0 & IX2.1) {
    printf("%s\n", Usage);
}

if (TX0.1) {			// pulses when a line of stdin received
    if (strlen(iC_stdinBuf)) {
	for (c = 0; c < code; c++) {
	    if (strcmp(iC_stdinBuf, codeBase[c]) == 0) {
		in1 = 1;	// good GREEN
		colour = "GREEN: ";
		goto Good;
	    }
	}
	in0 = 1;		// any other bad RED
	colour = "RED:   ";
      Good:;
	if (IX2.0) {		// note use in C code
	    printf("%s%s", colour, iC_stdinBuf);
	}
    } else {
	iC_quit(QUIT_TERMINAL);
    }
} else {
    in2 = in1 = in0 = 0;
}

if (IX2.1) {
    for (c = 0; c < code; c++) {
	if (strcmp(iC_stdinBuf, codeBase[c]) == 0) {
	    in2 = in0 = 1;		// RED - ignore same code twice
	    goto Twice;
	}
    }
    while (code >= codes) {		// insert new code
	codeBase = realloc(codeBase,	/* initially NULL */
	    (codes + CODES) * sizeof(Code));
	memset(&codeBase[codes], '\0', CODES * sizeof(Code));
	codes += CODES;			/* increase the array size */
    }
    strncpy(codeBase[code++], iC_stdinBuf, CODELEN);
    in2 = in1 = 1;			// GREEN - good update
  Twice:;
} else {
    in2 = in1 = in0 = 0;
}

if (IX2.2) {
    for (c = 0; c < code; c++) {
	if (strcmp(iC_stdinBuf, codeBase[c]) == 0) {
	    for (c1 = c + 1; c1 < code; c++, c1++) {
		strncpy(codeBase[c], codeBase[c1], CODELEN);
	    }
	    memset(&codeBase[code = c], '\0', CODELEN);
	    in2 = in1 = 1;		// GREEN - good removal
	    goto Removed;
	}
    }
    in2 = in0 = 1;			// RED - code not foubd
  Removed:;
} else {
    in2 = in1 = in0 = 0;
}

if (~IX2.0 & IX2.1 & IX2.2 & IX2.3) {	// press button 1 2 and 3 together
    system("sudo shutdown -h now");	// while button 0 is released to shutdown
}
