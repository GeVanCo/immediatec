/********************************************************************
 *
 *	RFID demo for Mini Makers Faire, Powerhouse Museum
 *	16-17 August 2014
 *	16 March 2015	v9	normalised I/O
 *	14 October 2015	v11	add full command line analysis
 *	11 March 2017		change to iC version 3
 *	 3 June  2018		use EOI and T100ms
 *
 * @(#)$Id: rfid.ic 1.6 $
 *
 *******************************************************************/

%{
#include	<stdlib.h>			// declares system()
%}

imm timer t = TIMER(T100ms);	// 100 ms

immC bit in0;
immC bit in1;
immC bit in2;

QX2.0 = ST(in0, t, 8);		// pulse RED   for 0.8 seconds
QX2.1 = ST(in1, t, 8);		// pulse GREEN for 0.8 seconds
QX2.2 = ST(in2, t, 8);		// pulse Mod for 0.8 seconds
QX2.3 = T1sec;			// QX2.3 toggling live display

QX2.4 = IX2.0;			// echo button 0 Log
QX2.5 = IX2.1;			// echo button 1 Add
QX2.6 = IX2.2;			// echo button 2 Remove
QX2.7 = IX2.3;			// echo button 3 Help

%{	/* Start of literal C code */
#include	<stdio.h>
#include	<icg.h>
#include	<stdlib.h>
#include	<string.h>

#define	CODES	30
#define	CODELEN	16

typedef	char	Code[CODELEN];

static Code *	codeBase;
static int	codes = 0;
static int	code = 0;
static int	c;
static int	c1;
static char *	colour;
static char *	usage =
"Usage: %s"
#ifdef	RASPBERRYPI
"[ -I X2]"
#endif
"[ --[ -h]|[ -R <app ...>]]\n"
#ifdef	RASPBERRYPI
"    -I X2        activate IX2.0-3 and QX2.0-7 for inverting PiFace\n"
#endif
"   --h           this help text\n"
"   --R <app ...> run auxiliary app followed by -z and its arguments\n"
"                 as a separate process; -R ... must be last arguments.\n"
"%s"
;
static char *	local =
"\n"
"    Swipe a RFID card over the rfid reader:\n"
"      shows RED if card is not recognised\n"
"        Press button 1 to Add card code to data base\n"
"      shows GREEN if card is recognised\n"
"        Press button 2 to Remove card code from data base\n"
"    toggle button 0 to output a Log text for every swipe\n"
"    press button 3 to repeat this Help text\n"
"    type ctrl+D on the keyboard to stop the program\n"
#ifdef	RASPBERRYPI
"    press button 1 2 and 3 while button 0 is released to shutdown\n"
#endif
;

int
iCbegin(int argc, char** argv)
{
    char *	progname = *argv;
    char *	mqz = "-qz";
    char *	mz  = "-z";

    if (argc >= 0) {
	/********************************************************************
	 *  Process command line arguments
	 *******************************************************************/
	while (--argc > 0) {
	    if (**++argv == '-') {
		++*argv;
		do {
		    switch (**argv) {
		    case '\0':
			goto break2;	/* - ignore */
		    case '-':
			break;		/* ignore extra - */
		    case 'R':
			/********************************************************************
			 *  Run auxiliary app with rest of command line
			 *  splice in the "-z" option to block STDIN interrupts in chained apps
			 *  alternatively "-qz" option for quiet operation and to block STDIN
			 *******************************************************************/
			if (! *++*argv) { --argc; if(! *++argv) goto missing; }
			*(argv-1) = *argv;	/* move app string to previous argv array member */
			*argv = iC_debug & DQ ?  mqz : mz; /* point to "-qz"  or "-z" in current argv */	
			argv--;			/* start call with app string */
			goto break3;
		    missing:
			fprintf(stderr, "WARNING: %s: missing value after '%s'\n", progname, ((*--argv)-=2, *argv));
		    case 'h':
		    case '?':
			fprintf(stderr, usage, progname, local);
			iC_quit(-2);
		    default:
			fprintf(stderr, "WARNING: %s: unknown option -%c\n", progname, **argv);
			break;
		    }
		} while (*++*argv);
		break2: ;
	    } else fprintf(stderr, "WARNING: %s: unknown argument '%s'\n", progname, *argv);
	}					/* end of command line analysis */
    } else {
	/********************************************************************
	 *  Run auxiliary app
	 *******************************************************************/
      break3:
	iC_fork_and_exec(argv);
    }
    return 0;			/* no errors */
} /* iCbegin */
%}	/* End of literal C code */

if (RISE(IX2.3) | RISE(EOI)) {
    printf("%s\n", local);	// local help
}

if (STDIN) {			// pulses when a line of stdin received
    if (strlen(iC_stdinBuf)) {
	for (c = 0; c < code; c++) {
	    if (strcmp(iC_stdinBuf, codeBase[c]) == 0) {
		in1 = 1;	// good GREEN
		colour = "ACCEPT";
		goto Good;
	    }
	}
	in0 = 1;		// any other bad RED
	colour = "REJECT";
      Good:;
	if (IX2.0) {		// note use in C code
	    printf("%s	%s", colour, iC_stdinBuf);
	}
    } else {
	iC_quit(QUIT_TERMINAL);
    }
} else {
    in2 = in1 = in0 = 0;
}

if (IX2.1) {
    if (strlen(iC_stdinBuf)) {
	for (c = 0; c < code; c++) {
	    if (strcmp(iC_stdinBuf, codeBase[c]) == 0) {
		in2 = in0 = 1;		// RED - ignore same code twice
		goto Twice;
	    }
	}
	while (code >= codes) {		// insert new code
	    codeBase = realloc(codeBase,	// initially NULL
		(codes + CODES) * sizeof(Code));
	    memset(&codeBase[codes], '\0', CODES * sizeof(Code));
	    codes += CODES;			// increase the array size
	}
	strncpy(codeBase[code++], iC_stdinBuf, CODELEN);
	if (IX2.0) {			// note use in C code
	    printf("ADD	%10.10s	to data base\n", iC_stdinBuf);
	}
	in2 = in1 = 1;			// GREEN - good update
      Twice:;
    }
} else {
    in2 = in1 = in0 = 0;
}

if (IX2.2) {
    if (strlen(iC_stdinBuf)) {
	for (c = 0; c < code; c++) {
	    if (strcmp(iC_stdinBuf, codeBase[c]) == 0) {
		for (c1 = c + 1; c1 < code; c++, c1++) {
		    strncpy(codeBase[c], codeBase[c1], CODELEN);
		}
		memset(&codeBase[code = c], '\0', CODELEN);
		if (IX2.0) {		// note use in C code
		    printf("REMOVE	%10.10s	from data base\n", iC_stdinBuf);
		}
		in2 = in1 = 1;		// GREEN - good removal
		goto Removed;
	    }
	}
	in2 = in0 = 1;			// RED - code not foubd
      Removed:;
    }
} else {
    in2 = in1 = in0 = 0;
}

if (~IX2.0 & IX2.1 & IX2.2 & IX2.3) {	// press button 1 2 and 3 together
    if (system("uname -m | grep armv") == 0) {
	fprintf(stderr, "sudo shutdown -h now\n");
	system("sudo shutdown -h now");	// while button 0 is released to shutdown
    } else {
	fprintf(stderr, "shutdown only allowed on Raspberry Pi (armv) processors\n");
    }
}
